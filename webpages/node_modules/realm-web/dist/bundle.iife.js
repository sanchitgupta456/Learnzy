var Realm = (function (exports) {
    'use strict';

    var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };
    var BrowserInfo = /** @class */ (function () {
        function BrowserInfo(name, version, os) {
            this.name = name;
            this.version = version;
            this.os = os;
            this.type = 'browser';
        }
        return BrowserInfo;
    }());
    var NodeInfo = /** @class */ (function () {
        function NodeInfo(version) {
            this.version = version;
            this.type = 'node';
            this.name = 'node';
            this.os = process.platform;
        }
        return NodeInfo;
    }());
    var SearchBotDeviceInfo = /** @class */ (function () {
        function SearchBotDeviceInfo(name, version, os, bot) {
            this.name = name;
            this.version = version;
            this.os = os;
            this.bot = bot;
            this.type = 'bot-device';
        }
        return SearchBotDeviceInfo;
    }());
    var BotInfo = /** @class */ (function () {
        function BotInfo() {
            this.type = 'bot';
            this.bot = true; // NOTE: deprecated test name instead
            this.name = 'bot';
            this.version = null;
            this.os = null;
        }
        return BotInfo;
    }());
    var ReactNativeInfo = /** @class */ (function () {
        function ReactNativeInfo() {
            this.type = 'react-native';
            this.name = 'react-native';
            this.version = null;
            this.os = null;
        }
        return ReactNativeInfo;
    }());
    // tslint:disable-next-line:max-line-length
    var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
    var SEARCHBOT_OS_REGEX = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
    var REQUIRED_VERSION_PARTS = 3;
    var userAgentRules = [
        ['aol', /AOLShield\/([0-9\._]+)/],
        ['edge', /Edge\/([0-9\._]+)/],
        ['edge-ios', /EdgiOS\/([0-9\._]+)/],
        ['yandexbrowser', /YaBrowser\/([0-9\._]+)/],
        ['kakaotalk', /KAKAOTALK\s([0-9\.]+)/],
        ['samsung', /SamsungBrowser\/([0-9\.]+)/],
        ['silk', /\bSilk\/([0-9._-]+)\b/],
        ['miui', /MiuiBrowser\/([0-9\.]+)$/],
        ['beaker', /BeakerBrowser\/([0-9\.]+)/],
        ['edge-chromium', /Edg\/([0-9\.]+)/],
        [
            'chromium-webview',
            /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/,
        ],
        ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
        ['phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/],
        ['crios', /CriOS\/([0-9\.]+)(:?\s|$)/],
        ['firefox', /Firefox\/([0-9\.]+)(?:\s|$)/],
        ['fxios', /FxiOS\/([0-9\.]+)/],
        ['opera-mini', /Opera Mini.*Version\/([0-9\.]+)/],
        ['opera', /Opera\/([0-9\.]+)(?:\s|$)/],
        ['opera', /OPR\/([0-9\.]+)(:?\s|$)/],
        ['ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
        ['ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
        ['ie', /MSIE\s(7\.0)/],
        ['bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/],
        ['android', /Android\s([0-9\.]+)/],
        ['ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/],
        ['safari', /Version\/([0-9\._]+).*Safari/],
        ['facebook', /FBAV\/([0-9\.]+)/],
        ['instagram', /Instagram\s([0-9\.]+)/],
        ['ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/],
        ['ios-webview', /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
        ['searchbot', SEARCHBOX_UA_REGEX],
    ];
    var operatingSystemRules = [
        ['iOS', /iP(hone|od|ad)/],
        ['Android OS', /Android/],
        ['BlackBerry OS', /BlackBerry|BB10/],
        ['Windows Mobile', /IEMobile/],
        ['Amazon OS', /Kindle/],
        ['Windows 3.11', /Win16/],
        ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],
        ['Windows 98', /(Windows 98)|(Win98)/],
        ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],
        ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],
        ['Windows Server 2003', /(Windows NT 5.2)/],
        ['Windows Vista', /(Windows NT 6.0)/],
        ['Windows 7', /(Windows NT 6.1)/],
        ['Windows 8', /(Windows NT 6.2)/],
        ['Windows 8.1', /(Windows NT 6.3)/],
        ['Windows 10', /(Windows NT 10.0)/],
        ['Windows ME', /Windows ME/],
        ['Open BSD', /OpenBSD/],
        ['Sun OS', /SunOS/],
        ['Chrome OS', /CrOS/],
        ['Linux', /(Linux)|(X11)/],
        ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],
        ['QNX', /QNX/],
        ['BeOS', /BeOS/],
        ['OS/2', /OS\/2/],
    ];
    function detect(userAgent) {
        if (!!userAgent) {
            return parseUserAgent(userAgent);
        }
        if (typeof document === 'undefined' &&
            typeof navigator !== 'undefined' &&
            navigator.product === 'ReactNative') {
            return new ReactNativeInfo();
        }
        if (typeof navigator !== 'undefined') {
            return parseUserAgent(navigator.userAgent);
        }
        return getNodeVersion();
    }
    function matchUserAgent(ua) {
        // opted for using reduce here rather than Array#first with a regex.test call
        // this is primarily because using the reduce we only perform the regex
        // execution once rather than once for the test and for the exec again below
        // probably something that needs to be benchmarked though
        return (ua !== '' &&
            userAgentRules.reduce(function (matched, _a) {
                var browser = _a[0], regex = _a[1];
                if (matched) {
                    return matched;
                }
                var uaMatch = regex.exec(ua);
                return !!uaMatch && [browser, uaMatch];
            }, false));
    }
    function parseUserAgent(ua) {
        var matchedRule = matchUserAgent(ua);
        if (!matchedRule) {
            return null;
        }
        var name = matchedRule[0], match = matchedRule[1];
        if (name === 'searchbot') {
            return new BotInfo();
        }
        var versionParts = match[1] && match[1].split(/[._]/).slice(0, 3);
        if (versionParts) {
            if (versionParts.length < REQUIRED_VERSION_PARTS) {
                versionParts = __spreadArrays(versionParts, createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length));
            }
        }
        else {
            versionParts = [];
        }
        var version = versionParts.join('.');
        var os = detectOS(ua);
        var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
        if (searchBotMatch && searchBotMatch[1]) {
            return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);
        }
        return new BrowserInfo(name, version, os);
    }
    function detectOS(ua) {
        for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
            var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];
            var match = regex.exec(ua);
            if (match) {
                return os;
            }
        }
        return null;
    }
    function getNodeVersion() {
        var isNode = typeof process !== 'undefined' && process.version;
        return isNode ? new NodeInfo(process.version.slice(1)) : null;
    }
    function createVersionParts(count) {
        var output = [];
        for (var ii = 0; ii < count; ii++) {
            output.push('0');
        }
        return output;
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    class DefaultNetworkTransport {
        constructor() {
            if (!DefaultNetworkTransport.fetch) {
                throw new Error("DefaultNetworkTransport.fetch must be set before it's used");
            }
            if (!DefaultNetworkTransport.AbortController) {
                throw new Error("DefaultNetworkTransport.AbortController must be set before it's used");
            }
        }
        fetchWithCallbacks(request, handler) {
            // tslint:disable-next-line: no-console
            this.fetch(request)
                .then(async (response) => {
                const decodedBody = await response.text();
                // Pull out the headers of the response
                const responseHeaders = {};
                response.headers.forEach((value, key) => {
                    responseHeaders[key] = value;
                });
                return {
                    statusCode: response.status,
                    headers: responseHeaders,
                    body: decodedBody,
                };
            })
                .then(r => handler.onSuccess(r))
                .catch(e => handler.onError(e));
        }
        async fetch(request) {
            const { timeoutMs, url, ...rest } = request;
            const { signal, cancelTimeout } = this.createTimeoutSignal(timeoutMs);
            try {
                // We'll await the response to catch throw our own error
                return await DefaultNetworkTransport.fetch(url, {
                    signal,
                    ...rest
                });
            }
            finally {
                // Whatever happens, cancel any timeout
                cancelTimeout();
            }
        }
        createTimeoutSignal(timeoutMs) {
            if (typeof timeoutMs === "number") {
                const controller = new DefaultNetworkTransport.AbortController();
                // Call abort after a specific number of milliseconds
                const timeout = setTimeout(() => {
                    controller.abort();
                }, timeoutMs);
                return {
                    signal: controller.signal,
                    cancelTimeout: () => {
                        clearTimeout(timeout);
                    },
                };
            }
            else {
                return {
                    signal: undefined,
                    cancelTimeout: () => {
                        /* No-op */
                    },
                };
            }
        }
    }
    DefaultNetworkTransport.DEFAULT_HEADERS = {
        "Content-Type": "application/json",
    };

    ////////////////////////////////////////////////////////////////////////////
    DefaultNetworkTransport.fetch = window.fetch.bind(window);
    DefaultNetworkTransport.AbortController = window.AbortController;

    var long_1 = Long;

    /**
     * wasm optimizations, to do native i64 multiplication and divide
     */
    var wasm = null;

    try {
      wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
      ])), {}).exports;
    } catch (e) {
      // no wasm support :(
    }

    /**
     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
     *  See the from* functions below for more convenient ways of constructing Longs.
     * @exports Long
     * @class A Long class for representing a 64 bit two's-complement integer value.
     * @param {number} low The low (signed) 32 bits of the long
     * @param {number} high The high (signed) 32 bits of the long
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @constructor
     */
    function Long(low, high, unsigned) {

        /**
         * The low 32 bits as a signed value.
         * @type {number}
         */
        this.low = low | 0;

        /**
         * The high 32 bits as a signed value.
         * @type {number}
         */
        this.high = high | 0;

        /**
         * Whether unsigned or not.
         * @type {boolean}
         */
        this.unsigned = !!unsigned;
    }

    // The internal representation of a long is the two given signed, 32-bit values.
    // We use 32-bit pieces because these are the size of integers on which
    // Javascript performs bit-operations.  For operations like addition and
    // multiplication, we split each number into 16 bit pieces, which can easily be
    // multiplied within Javascript's floating-point representation without overflow
    // or change in sign.
    //
    // In the algorithms below, we frequently reduce the negative case to the
    // positive case by negating the input(s) and then post-processing the result.
    // Note that we must ALWAYS check specially whether those values are MIN_VALUE
    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
    // a positive number, it overflows back into a negative).  Not handling this
    // case would often result in infinite recursion.
    //
    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
    // methods on which they depend.

    /**
     * An indicator used to reliably determine if an object is a Long or not.
     * @type {boolean}
     * @const
     * @private
     */
    Long.prototype.__isLong__;

    Object.defineProperty(Long.prototype, "__isLong__", { value: true });

    /**
     * @function
     * @param {*} obj Object
     * @returns {boolean}
     * @inner
     */
    function isLong(obj) {
        return (obj && obj["__isLong__"]) === true;
    }

    /**
     * Tests if the specified object is a Long.
     * @function
     * @param {*} obj Object
     * @returns {boolean}
     */
    Long.isLong = isLong;

    /**
     * A cache of the Long representations of small integer values.
     * @type {!Object}
     * @inner
     */
    var INT_CACHE = {};

    /**
     * A cache of the Long representations of small unsigned integer values.
     * @type {!Object}
     * @inner
     */
    var UINT_CACHE = {};

    /**
     * @param {number} value
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromInt(value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
            value >>>= 0;
            if (cache = (0 <= value && value < 256)) {
                cachedObj = UINT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
            if (cache)
                UINT_CACHE[value] = obj;
            return obj;
        } else {
            value |= 0;
            if (cache = (-128 <= value && value < 128)) {
                cachedObj = INT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = fromBits(value, value < 0 ? -1 : 0, false);
            if (cache)
                INT_CACHE[value] = obj;
            return obj;
        }
    }

    /**
     * Returns a Long representing the given 32 bit integer value.
     * @function
     * @param {number} value The 32 bit integer in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {!Long} The corresponding Long value
     */
    Long.fromInt = fromInt;

    /**
     * @param {number} value
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromNumber(value, unsigned) {
        if (isNaN(value))
            return unsigned ? UZERO : ZERO;
        if (unsigned) {
            if (value < 0)
                return UZERO;
            if (value >= TWO_PWR_64_DBL)
                return MAX_UNSIGNED_VALUE;
        } else {
            if (value <= -TWO_PWR_63_DBL)
                return MIN_VALUE;
            if (value + 1 >= TWO_PWR_63_DBL)
                return MAX_VALUE;
        }
        if (value < 0)
            return fromNumber(-value, unsigned).neg();
        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
    }

    /**
     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
     * @function
     * @param {number} value The number in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {!Long} The corresponding Long value
     */
    Long.fromNumber = fromNumber;

    /**
     * @param {number} lowBits
     * @param {number} highBits
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromBits(lowBits, highBits, unsigned) {
        return new Long(lowBits, highBits, unsigned);
    }

    /**
     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
     *  assumed to use 32 bits.
     * @function
     * @param {number} lowBits The low 32 bits
     * @param {number} highBits The high 32 bits
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {!Long} The corresponding Long value
     */
    Long.fromBits = fromBits;

    /**
     * @function
     * @param {number} base
     * @param {number} exponent
     * @returns {number}
     * @inner
     */
    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

    /**
     * @param {string} str
     * @param {(boolean|number)=} unsigned
     * @param {number=} radix
     * @returns {!Long}
     * @inner
     */
    function fromString(str, unsigned, radix) {
        if (str.length === 0)
            throw Error('empty string');
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
            return ZERO;
        if (typeof unsigned === 'number') {
            // For goog.math.long compatibility
            radix = unsigned,
            unsigned = false;
        } else {
            unsigned = !! unsigned;
        }
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw RangeError('radix');

        var p;
        if ((p = str.indexOf('-')) > 0)
            throw Error('interior hyphen');
        else if (p === 0) {
            return fromString(str.substring(1), unsigned, radix).neg();
        }

        // Do several (8) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = fromNumber(pow_dbl(radix, 8));

        var result = ZERO;
        for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i),
                value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = fromNumber(pow_dbl(radix, size));
                result = result.mul(power).add(fromNumber(value));
            } else {
                result = result.mul(radixToPower);
                result = result.add(fromNumber(value));
            }
        }
        result.unsigned = unsigned;
        return result;
    }

    /**
     * Returns a Long representation of the given string, written using the specified radix.
     * @function
     * @param {string} str The textual representation of the Long
     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
     * @returns {!Long} The corresponding Long value
     */
    Long.fromString = fromString;

    /**
     * @function
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */
    function fromValue(val, unsigned) {
        if (typeof val === 'number')
            return fromNumber(val, unsigned);
        if (typeof val === 'string')
            return fromString(val, unsigned);
        // Throws for non-objects, converts non-instanceof Long:
        return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
    }

    /**
     * Converts the specified value to a Long using the appropriate from* function for its type.
     * @function
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {!Long}
     */
    Long.fromValue = fromValue;

    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
    // no runtime penalty for these.

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_16_DBL = 1 << 16;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_24_DBL = 1 << 24;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

    /**
     * @type {number}
     * @const
     * @inner
     */
    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

    /**
     * @type {!Long}
     * @const
     * @inner
     */
    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

    /**
     * @type {!Long}
     * @inner
     */
    var ZERO = fromInt(0);

    /**
     * Signed zero.
     * @type {!Long}
     */
    Long.ZERO = ZERO;

    /**
     * @type {!Long}
     * @inner
     */
    var UZERO = fromInt(0, true);

    /**
     * Unsigned zero.
     * @type {!Long}
     */
    Long.UZERO = UZERO;

    /**
     * @type {!Long}
     * @inner
     */
    var ONE = fromInt(1);

    /**
     * Signed one.
     * @type {!Long}
     */
    Long.ONE = ONE;

    /**
     * @type {!Long}
     * @inner
     */
    var UONE = fromInt(1, true);

    /**
     * Unsigned one.
     * @type {!Long}
     */
    Long.UONE = UONE;

    /**
     * @type {!Long}
     * @inner
     */
    var NEG_ONE = fromInt(-1);

    /**
     * Signed negative one.
     * @type {!Long}
     */
    Long.NEG_ONE = NEG_ONE;

    /**
     * @type {!Long}
     * @inner
     */
    var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

    /**
     * Maximum signed value.
     * @type {!Long}
     */
    Long.MAX_VALUE = MAX_VALUE;

    /**
     * @type {!Long}
     * @inner
     */
    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

    /**
     * Maximum unsigned value.
     * @type {!Long}
     */
    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

    /**
     * @type {!Long}
     * @inner
     */
    var MIN_VALUE = fromBits(0, 0x80000000|0, false);

    /**
     * Minimum signed value.
     * @type {!Long}
     */
    Long.MIN_VALUE = MIN_VALUE;

    /**
     * @alias Long.prototype
     * @inner
     */
    var LongPrototype = Long.prototype;

    /**
     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
     * @returns {number}
     */
    LongPrototype.toInt = function toInt() {
        return this.unsigned ? this.low >>> 0 : this.low;
    };

    /**
     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
     * @returns {number}
     */
    LongPrototype.toNumber = function toNumber() {
        if (this.unsigned)
            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };

    /**
     * Converts the Long to a string written in the specified radix.
     * @param {number=} radix Radix (2-36), defaults to 10
     * @returns {string}
     * @override
     * @throws {RangeError} If `radix` is out of range
     */
    LongPrototype.toString = function toString(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw RangeError('radix');
        if (this.isZero())
            return '0';
        if (this.isNegative()) { // Unsigned Longs are never negative
            if (this.eq(MIN_VALUE)) {
                // We need to change the Long value before it can be negated, so we remove
                // the bottom-most digit in this base and then recurse to do the rest.
                var radixLong = fromNumber(radix),
                    div = this.div(radixLong),
                    rem1 = div.mul(radixLong).sub(this);
                return div.toString(radix) + rem1.toInt().toString(radix);
            } else
                return '-' + this.neg().toString(radix);
        }

        // Do several (6) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
            rem = this;
        var result = '';
        while (true) {
            var remDiv = rem.div(radixToPower),
                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
                digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero())
                return digits + result;
            else {
                while (digits.length < 6)
                    digits = '0' + digits;
                result = '' + digits + result;
            }
        }
    };

    /**
     * Gets the high 32 bits as a signed integer.
     * @returns {number} Signed high bits
     */
    LongPrototype.getHighBits = function getHighBits() {
        return this.high;
    };

    /**
     * Gets the high 32 bits as an unsigned integer.
     * @returns {number} Unsigned high bits
     */
    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
        return this.high >>> 0;
    };

    /**
     * Gets the low 32 bits as a signed integer.
     * @returns {number} Signed low bits
     */
    LongPrototype.getLowBits = function getLowBits() {
        return this.low;
    };

    /**
     * Gets the low 32 bits as an unsigned integer.
     * @returns {number} Unsigned low bits
     */
    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
        return this.low >>> 0;
    };

    /**
     * Gets the number of bits needed to represent the absolute value of this Long.
     * @returns {number}
     */
    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
        if (this.isNegative()) // Unsigned Longs are never negative
            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        var val = this.high != 0 ? this.high : this.low;
        for (var bit = 31; bit > 0; bit--)
            if ((val & (1 << bit)) != 0)
                break;
        return this.high != 0 ? bit + 33 : bit + 1;
    };

    /**
     * Tests if this Long's value equals zero.
     * @returns {boolean}
     */
    LongPrototype.isZero = function isZero() {
        return this.high === 0 && this.low === 0;
    };

    /**
     * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
     * @returns {boolean}
     */
    LongPrototype.eqz = LongPrototype.isZero;

    /**
     * Tests if this Long's value is negative.
     * @returns {boolean}
     */
    LongPrototype.isNegative = function isNegative() {
        return !this.unsigned && this.high < 0;
    };

    /**
     * Tests if this Long's value is positive.
     * @returns {boolean}
     */
    LongPrototype.isPositive = function isPositive() {
        return this.unsigned || this.high >= 0;
    };

    /**
     * Tests if this Long's value is odd.
     * @returns {boolean}
     */
    LongPrototype.isOdd = function isOdd() {
        return (this.low & 1) === 1;
    };

    /**
     * Tests if this Long's value is even.
     * @returns {boolean}
     */
    LongPrototype.isEven = function isEven() {
        return (this.low & 1) === 0;
    };

    /**
     * Tests if this Long's value equals the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.equals = function equals(other) {
        if (!isLong(other))
            other = fromValue(other);
        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
            return false;
        return this.high === other.high && this.low === other.low;
    };

    /**
     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.eq = LongPrototype.equals;

    /**
     * Tests if this Long's value differs from the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.notEquals = function notEquals(other) {
        return !this.eq(/* validates */ other);
    };

    /**
     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.neq = LongPrototype.notEquals;

    /**
     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.ne = LongPrototype.notEquals;

    /**
     * Tests if this Long's value is less than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lessThan = function lessThan(other) {
        return this.comp(/* validates */ other) < 0;
    };

    /**
     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lt = LongPrototype.lessThan;

    /**
     * Tests if this Long's value is less than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
        return this.comp(/* validates */ other) <= 0;
    };

    /**
     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.lte = LongPrototype.lessThanOrEqual;

    /**
     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.le = LongPrototype.lessThanOrEqual;

    /**
     * Tests if this Long's value is greater than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.greaterThan = function greaterThan(other) {
        return this.comp(/* validates */ other) > 0;
    };

    /**
     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.gt = LongPrototype.greaterThan;

    /**
     * Tests if this Long's value is greater than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
        return this.comp(/* validates */ other) >= 0;
    };

    /**
     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.gte = LongPrototype.greaterThanOrEqual;

    /**
     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */
    LongPrototype.ge = LongPrototype.greaterThanOrEqual;

    /**
     * Compares this Long's value with the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     */
    LongPrototype.compare = function compare(other) {
        if (!isLong(other))
            other = fromValue(other);
        if (this.eq(other))
            return 0;
        var thisNeg = this.isNegative(),
            otherNeg = other.isNegative();
        if (thisNeg && !otherNeg)
            return -1;
        if (!thisNeg && otherNeg)
            return 1;
        // At this point the sign bits are the same
        if (!this.unsigned)
            return this.sub(other).isNegative() ? -1 : 1;
        // Both are positive if at least one is unsigned
        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
    };

    /**
     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     */
    LongPrototype.comp = LongPrototype.compare;

    /**
     * Negates this Long's value.
     * @returns {!Long} Negated Long
     */
    LongPrototype.negate = function negate() {
        if (!this.unsigned && this.eq(MIN_VALUE))
            return MIN_VALUE;
        return this.not().add(ONE);
    };

    /**
     * Negates this Long's value. This is an alias of {@link Long#negate}.
     * @function
     * @returns {!Long} Negated Long
     */
    LongPrototype.neg = LongPrototype.negate;

    /**
     * Returns the sum of this and the specified Long.
     * @param {!Long|number|string} addend Addend
     * @returns {!Long} Sum
     */
    LongPrototype.add = function add(addend) {
        if (!isLong(addend))
            addend = fromValue(addend);

        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;

        var b48 = addend.high >>> 16;
        var b32 = addend.high & 0xFFFF;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 + b48;
        c48 &= 0xFFFF;
        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };

    /**
     * Returns the difference of this and the specified Long.
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     */
    LongPrototype.subtract = function subtract(subtrahend) {
        if (!isLong(subtrahend))
            subtrahend = fromValue(subtrahend);
        return this.add(subtrahend.neg());
    };

    /**
     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
     * @function
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     */
    LongPrototype.sub = LongPrototype.subtract;

    /**
     * Returns the product of this and the specified Long.
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     */
    LongPrototype.multiply = function multiply(multiplier) {
        if (this.isZero())
            return ZERO;
        if (!isLong(multiplier))
            multiplier = fromValue(multiplier);

        // use wasm support if present
        if (wasm) {
            var low = wasm.mul(this.low,
                               this.high,
                               multiplier.low,
                               multiplier.high);
            return fromBits(low, wasm.get_high(), this.unsigned);
        }

        if (multiplier.isZero())
            return ZERO;
        if (this.eq(MIN_VALUE))
            return multiplier.isOdd() ? MIN_VALUE : ZERO;
        if (multiplier.eq(MIN_VALUE))
            return this.isOdd() ? MIN_VALUE : ZERO;

        if (this.isNegative()) {
            if (multiplier.isNegative())
                return this.neg().mul(multiplier.neg());
            else
                return this.neg().mul(multiplier).neg();
        } else if (multiplier.isNegative())
            return this.mul(multiplier.neg()).neg();

        // If both longs are small, use float multiplication
        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
        // We can skip products that would overflow.

        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;

        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 0xFFFF;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 0xFFFF;

        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 0xFFFF;
        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };

    /**
     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
     * @function
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     */
    LongPrototype.mul = LongPrototype.multiply;

    /**
     * Returns this Long divided by the specified. The result is signed if this Long is signed or
     *  unsigned if this Long is unsigned.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     */
    LongPrototype.divide = function divide(divisor) {
        if (!isLong(divisor))
            divisor = fromValue(divisor);
        if (divisor.isZero())
            throw Error('division by zero');

        // use wasm support if present
        if (wasm) {
            // guard against signed division overflow: the largest
            // negative number / -1 would be 1 larger than the largest
            // positive number, due to two's complement.
            if (!this.unsigned &&
                this.high === -0x80000000 &&
                divisor.low === -1 && divisor.high === -1) {
                // be consistent with non-wasm code path
                return this;
            }
            var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
                this.low,
                this.high,
                divisor.low,
                divisor.high
            );
            return fromBits(low, wasm.get_high(), this.unsigned);
        }

        if (this.isZero())
            return this.unsigned ? UZERO : ZERO;
        var approx, rem, res;
        if (!this.unsigned) {
            // This section is only relevant for signed longs and is derived from the
            // closure library as a whole.
            if (this.eq(MIN_VALUE)) {
                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                    return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
                else if (divisor.eq(MIN_VALUE))
                    return ONE;
                else {
                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                    var halfThis = this.shr(1);
                    approx = halfThis.div(divisor).shl(1);
                    if (approx.eq(ZERO)) {
                        return divisor.isNegative() ? ONE : NEG_ONE;
                    } else {
                        rem = this.sub(divisor.mul(approx));
                        res = approx.add(rem.div(divisor));
                        return res;
                    }
                }
            } else if (divisor.eq(MIN_VALUE))
                return this.unsigned ? UZERO : ZERO;
            if (this.isNegative()) {
                if (divisor.isNegative())
                    return this.neg().div(divisor.neg());
                return this.neg().div(divisor).neg();
            } else if (divisor.isNegative())
                return this.div(divisor.neg()).neg();
            res = ZERO;
        } else {
            // The algorithm below has not been made for unsigned longs. It's therefore
            // required to take special care of the MSB prior to running it.
            if (!divisor.unsigned)
                divisor = divisor.toUnsigned();
            if (divisor.gt(this))
                return UZERO;
            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
                return UONE;
            res = UZERO;
        }

        // Repeat the following until the remainder is less than other:  find a
        // floating-point that approximates remainder / other *from below*, add this
        // into the result, and subtract it from the remainder.  It is critical that
        // the approximate value is less than or equal to the real value so that the
        // remainder never becomes negative.
        rem = this;
        while (rem.gte(divisor)) {
            // Approximate the result of division. This may be a little greater or
            // smaller than the actual value.
            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

            // We will tweak the approximate result by changing it in the 48-th digit or
            // the smallest non-fractional digit, whichever is larger.
            var log2 = Math.ceil(Math.log(approx) / Math.LN2),
                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

            // Decrease the approximation until it is smaller than the remainder.  Note
            // that if it is too large, the product overflows and is negative.
                approxRes = fromNumber(approx),
                approxRem = approxRes.mul(divisor);
            while (approxRem.isNegative() || approxRem.gt(rem)) {
                approx -= delta;
                approxRes = fromNumber(approx, this.unsigned);
                approxRem = approxRes.mul(divisor);
            }

            // We know the answer can't be zero... and actually, zero would cause
            // infinite recursion since we would make no progress.
            if (approxRes.isZero())
                approxRes = ONE;

            res = res.add(approxRes);
            rem = rem.sub(approxRem);
        }
        return res;
    };

    /**
     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     */
    LongPrototype.div = LongPrototype.divide;

    /**
     * Returns this Long modulo the specified.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */
    LongPrototype.modulo = function modulo(divisor) {
        if (!isLong(divisor))
            divisor = fromValue(divisor);

        // use wasm support if present
        if (wasm) {
            var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
                this.low,
                this.high,
                divisor.low,
                divisor.high
            );
            return fromBits(low, wasm.get_high(), this.unsigned);
        }

        return this.sub(this.div(divisor).mul(divisor));
    };

    /**
     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */
    LongPrototype.mod = LongPrototype.modulo;

    /**
     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */
    LongPrototype.rem = LongPrototype.modulo;

    /**
     * Returns the bitwise NOT of this Long.
     * @returns {!Long}
     */
    LongPrototype.not = function not() {
        return fromBits(~this.low, ~this.high, this.unsigned);
    };

    /**
     * Returns the bitwise AND of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */
    LongPrototype.and = function and(other) {
        if (!isLong(other))
            other = fromValue(other);
        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };

    /**
     * Returns the bitwise OR of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */
    LongPrototype.or = function or(other) {
        if (!isLong(other))
            other = fromValue(other);
        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };

    /**
     * Returns the bitwise XOR of this Long and the given one.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */
    LongPrototype.xor = function xor(other) {
        if (!isLong(other))
            other = fromValue(other);
        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };

    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shiftLeft = function shiftLeft(numBits) {
        if (isLong(numBits))
            numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
            return this;
        else if (numBits < 32)
            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
        else
            return fromBits(0, this.low << (numBits - 32), this.unsigned);
    };

    /**
     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shl = LongPrototype.shiftLeft;

    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shiftRight = function shiftRight(numBits) {
        if (isLong(numBits))
            numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
            return this;
        else if (numBits < 32)
            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
        else
            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
    };

    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shr = LongPrototype.shiftRight;

    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
        if (isLong(numBits))
            numBits = numBits.toInt();
        numBits &= 63;
        if (numBits === 0)
            return this;
        else {
            var high = this.high;
            if (numBits < 32) {
                var low = this.low;
                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
            } else if (numBits === 32)
                return fromBits(high, 0, this.unsigned);
            else
                return fromBits(high >>> (numBits - 32), 0, this.unsigned);
        }
    };

    /**
     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shru = LongPrototype.shiftRightUnsigned;

    /**
     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */
    LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

    /**
     * Converts this Long to signed.
     * @returns {!Long} Signed long
     */
    LongPrototype.toSigned = function toSigned() {
        if (!this.unsigned)
            return this;
        return fromBits(this.low, this.high, false);
    };

    /**
     * Converts this Long to unsigned.
     * @returns {!Long} Unsigned long
     */
    LongPrototype.toUnsigned = function toUnsigned() {
        if (this.unsigned)
            return this;
        return fromBits(this.low, this.high, true);
    };

    /**
     * Converts this Long to its byte representation.
     * @param {boolean=} le Whether little or big endian, defaults to big endian
     * @returns {!Array.<number>} Byte representation
     */
    LongPrototype.toBytes = function toBytes(le) {
        return le ? this.toBytesLE() : this.toBytesBE();
    };

    /**
     * Converts this Long to its little endian byte representation.
     * @returns {!Array.<number>} Little endian byte representation
     */
    LongPrototype.toBytesLE = function toBytesLE() {
        var hi = this.high,
            lo = this.low;
        return [
            lo        & 0xff,
            lo >>>  8 & 0xff,
            lo >>> 16 & 0xff,
            lo >>> 24       ,
            hi        & 0xff,
            hi >>>  8 & 0xff,
            hi >>> 16 & 0xff,
            hi >>> 24
        ];
    };

    /**
     * Converts this Long to its big endian byte representation.
     * @returns {!Array.<number>} Big endian byte representation
     */
    LongPrototype.toBytesBE = function toBytesBE() {
        var hi = this.high,
            lo = this.low;
        return [
            hi >>> 24       ,
            hi >>> 16 & 0xff,
            hi >>>  8 & 0xff,
            hi        & 0xff,
            lo >>> 24       ,
            lo >>> 16 & 0xff,
            lo >>>  8 & 0xff,
            lo        & 0xff
        ];
    };

    /**
     * Creates a Long from its byte representation.
     * @param {!Array.<number>} bytes Byte representation
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @param {boolean=} le Whether little or big endian, defaults to big endian
     * @returns {Long} The corresponding Long value
     */
    Long.fromBytes = function fromBytes(bytes, unsigned, le) {
        return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
    };

    /**
     * Creates a Long from its little endian byte representation.
     * @param {!Array.<number>} bytes Little endian byte representation
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {Long} The corresponding Long value
     */
    Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
        return new Long(
            bytes[0]       |
            bytes[1] <<  8 |
            bytes[2] << 16 |
            bytes[3] << 24,
            bytes[4]       |
            bytes[5] <<  8 |
            bytes[6] << 16 |
            bytes[7] << 24,
            unsigned
        );
    };

    /**
     * Creates a Long from its big endian byte representation.
     * @param {!Array.<number>} bytes Big endian byte representation
     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
     * @returns {Long} The corresponding Long value
     */
    Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
        return new Long(
            bytes[4] << 24 |
            bytes[5] << 16 |
            bytes[6] <<  8 |
            bytes[7],
            bytes[0] << 24 |
            bytes[1] << 16 |
            bytes[2] <<  8 |
            bytes[3],
            unsigned
        );
    };

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    	  path: basedir,
    	  exports: {},
    	  require: function (path, base) {
          return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
        }
    	}, fn(module, module.exports), module.exports;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var byteLength_1 = byteLength;
    var toByteArray_1 = toByteArray;
    var fromByteArray_1 = fromByteArray;

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;

    function getLens (b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;

      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4);

      return [validLen, placeHoldersLen]
    }

    // base64 is 4/3 + up to two characters of the original data
    function byteLength (b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function _byteLength (b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function toByteArray (b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];

      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

      var curByte = 0;

      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen;

      var i;
      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = (tmp >> 16) & 0xFF;
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] +
        lookup[num >> 12 & 0x3F] +
        lookup[num >> 6 & 0x3F] +
        lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(
          uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
        ));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(
          lookup[tmp >> 2] +
          lookup[(tmp << 4) & 0x3F] +
          '=='
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(
          lookup[tmp >> 10] +
          lookup[(tmp >> 4) & 0x3F] +
          lookup[(tmp << 2) & 0x3F] +
          '='
        );
      }

      return parts.join('')
    }

    var base64Js = {
    	byteLength: byteLength_1,
    	toByteArray: toByteArray_1,
    	fromByteArray: fromByteArray_1
    };

    var read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    };

    var write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = ((value * c) - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };

    var ieee754 = {
    	read: read,
    	write: write
    };

    var buffer = createCommonjsModule(function (module, exports) {



    var customInspectSymbol =
      (typeof Symbol === 'function' && typeof Symbol.for === 'function')
        ? Symbol.for('nodejs.util.inspect.custom')
        : null;

    exports.Buffer = Buffer;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;

    var K_MAX_LENGTH = 0x7fffffff;
    exports.kMaxLength = K_MAX_LENGTH;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Print warning and recommend using `buffer` v4.x which has an Object
     *               implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * We report that the browser does not support typed arrays if the are not subclassable
     * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
     * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
     * for __proto__ and has a buggy typed array implementation.
     */
    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
        typeof console.error === 'function') {
      console.error(
        'This browser lacks typed array (Uint8Array) support which is required by ' +
        '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
      );
    }

    function typedArraySupport () {
      // Can typed array instances can be augmented?
      try {
        var arr = new Uint8Array(1);
        var proto = { foo: function () { return 42 } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42
      } catch (e) {
        return false
      }
    }

    Object.defineProperty(Buffer.prototype, 'parent', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.buffer
      }
    });

    Object.defineProperty(Buffer.prototype, 'offset', {
      enumerable: true,
      get: function () {
        if (!Buffer.isBuffer(this)) return undefined
        return this.byteOffset
      }
    });

    function createBuffer (length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"')
      }
      // Return an augmented `Uint8Array` instance
      var buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer.prototype);
      return buf
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          )
        }
        return allocUnsafe(arg)
      }
      return from(arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    function from (value, encodingOrOffset, length) {
      if (typeof value === 'string') {
        return fromString(value, encodingOrOffset)
      }

      if (ArrayBuffer.isView(value)) {
        return fromArrayLike(value)
      }

      if (value == null) {
        throw new TypeError(
          'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
          'or Array-like Object. Received type ' + (typeof value)
        )
      }

      if (isInstance(value, ArrayBuffer) ||
          (value && isInstance(value.buffer, ArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }

      if (typeof SharedArrayBuffer !== 'undefined' &&
          (isInstance(value, SharedArrayBuffer) ||
          (value && isInstance(value.buffer, SharedArrayBuffer)))) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }

      if (typeof value === 'number') {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        )
      }

      var valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer.from(valueOf, encodingOrOffset, length)
      }

      var b = fromObject(value);
      if (b) return b

      if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
          typeof value[Symbol.toPrimitive] === 'function') {
        return Buffer.from(
          value[Symbol.toPrimitive]('string'), encodingOrOffset, length
        )
      }

      throw new TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
        'or Array-like Object. Received type ' + (typeof value)
      )
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length)
    };

    // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
    // https://github.com/feross/buffer/pull/148
    Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer, Uint8Array);

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be of type number')
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"')
      }
    }

    function alloc (size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(size).fill(fill, encoding)
          : createBuffer(size).fill(fill)
      }
      return createBuffer(size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(size, fill, encoding)
    };

    function allocUnsafe (size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0)
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(size)
    };

    function fromString (string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }

      var length = byteLength(string, encoding) | 0;
      var buf = createBuffer(length);

      var actual = buf.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual);
      }

      return buf
    }

    function fromArrayLike (array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(length);
      for (var i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf
    }

    function fromArrayBuffer (array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds')
      }

      var buf;
      if (byteOffset === undefined && length === undefined) {
        buf = new Uint8Array(array);
      } else if (length === undefined) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }

      // Return an augmented `Uint8Array` instance
      Object.setPrototypeOf(buf, Buffer.prototype);

      return buf
    }

    function fromObject (obj) {
      if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);

        if (buf.length === 0) {
          return buf
        }

        obj.copy(buf, 0, 0, len);
        return buf
      }

      if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
          return createBuffer(0)
        }
        return fromArrayLike(obj)
      }

      if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data)
      }
    }

    function checked (length) {
      // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= K_MAX_LENGTH) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer.alloc(+length)
    }

    Buffer.isBuffer = function isBuffer (b) {
      return b != null && b._isBuffer === true &&
        b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    };

    Buffer.compare = function compare (a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        )
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          buf = Buffer.from(buf);
        }
        if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
          'Received type ' + typeof string
        )
      }

      var len = string.length;
      var mustMatch = (arguments.length > 2 && arguments[2] === true);
      if (!mustMatch && len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            }
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
    // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
    // reliably in a browserify context because there could be multiple different
    // copies of the 'buffer' package in use. This method works even for Buffer
    // instances that were created from another copy of the `buffer` package.
    // See: https://github.com/feross/buffer/issues/154
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      var length = this.length;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.toLocaleString = Buffer.prototype.toString;

    Buffer.prototype.equals = function equals (b) {
      if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      var str = '';
      var max = exports.INSPECT_MAX_BYTES;
      str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
      if (this.length > max) str += ' ... ';
      return '<Buffer ' + str + '>'
    };
    if (customInspectSymbol) {
      Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
    }

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer.from(target, target.offset, target.byteLength);
      }
      if (!Buffer.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. ' +
          'Received type ' + (typeof target)
        )
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset; // Coerce to Number.
      if (numberIsNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      var strLen = string.length;

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64Js.fromByteArray(buf)
      } else {
        return base64Js.fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
            : (firstByte > 0xBF) ? 2
              : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf = this.subarray(start, end);
      // Return an augmented `Uint8Array` instance
      Object.setPrototypeOf(newBuf, Buffer.prototype);

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength = byteLength >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      return offset + 2
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
      return offset + 2
    };

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
      return offset + 4
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
      return offset + 4
    };

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, (8 * byteLength) - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;

      if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
        // Use built-in when available, missing from IE11
        this.copyWithin(targetStart, start, end);
      } else if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (var i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if ((encoding === 'utf8' && code < 128) ||
              encoding === 'latin1') {
            // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
          }
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      } else if (typeof val === 'boolean') {
        val = Number(val);
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = Buffer.isBuffer(val)
          ? val
          : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val +
            '" is invalid for argument "value"')
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node takes equal signs as end of the Base64 encoding
      str = str.split('=')[0];
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = str.trim().replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }

    function base64ToBytes (str) {
      return base64Js.toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
    // the `instanceof` check but they should be treated as of that type.
    // See: https://github.com/feross/buffer/issues/166
    function isInstance (obj, type) {
      return obj instanceof type ||
        (obj != null && obj.constructor != null && obj.constructor.name != null &&
          obj.constructor.name === type.name)
    }
    function numberIsNaN (obj) {
      // For IE11 support
      return obj !== obj // eslint-disable-line no-self-compare
    }

    // Create lookup table for `toString('hex')`
    // See: https://github.com/feross/buffer/issues/219
    var hexSliceLookupTable = (function () {
      var alphabet = '0123456789abcdef';
      var table = new Array(256);
      for (var i = 0; i < 16; ++i) {
        var i16 = i * 16;
        for (var j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table
    })();
    });

    var commonjsGlobal$1 = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule$1(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var map = createCommonjsModule$1(function (module) {

      if (typeof commonjsGlobal$1.Map !== 'undefined') {
        module.exports = commonjsGlobal$1.Map;
        module.exports.Map = commonjsGlobal$1.Map;
      } else {
        // We will return a polyfill
        var Map = function Map(array) {
          this._keys = [];
          this._values = {};

          for (var i = 0; i < array.length; i++) {
            if (array[i] == null) continue; // skip null and undefined

            var entry = array[i];
            var key = entry[0];
            var value = entry[1]; // Add the key to the list of keys in order

            this._keys.push(key); // Add the key and value to the values dictionary with a point
            // to the location in the ordered keys list


            this._values[key] = {
              v: value,
              i: this._keys.length - 1
            };
          }
        };

        Map.prototype.clear = function () {
          this._keys = [];
          this._values = {};
        };

        Map.prototype.delete = function (key) {
          var value = this._values[key];
          if (value == null) return false; // Delete entry

          delete this._values[key]; // Remove the key from the ordered keys list

          this._keys.splice(value.i, 1);

          return true;
        };

        Map.prototype.entries = function () {
          var self = this;
          var index = 0;
          return {
            next: function next() {
              var key = self._keys[index++];
              return {
                value: key !== undefined ? [key, self._values[key].v] : undefined,
                done: key !== undefined ? false : true
              };
            }
          };
        };

        Map.prototype.forEach = function (callback, self) {
          self = self || this;

          for (var i = 0; i < this._keys.length; i++) {
            var key = this._keys[i]; // Call the forEach callback

            callback.call(self, this._values[key].v, key, self);
          }
        };

        Map.prototype.get = function (key) {
          return this._values[key] ? this._values[key].v : undefined;
        };

        Map.prototype.has = function (key) {
          return this._values[key] != null;
        };

        Map.prototype.keys = function () {
          var self = this;
          var index = 0;
          return {
            next: function next() {
              var key = self._keys[index++];
              return {
                value: key !== undefined ? key : undefined,
                done: key !== undefined ? false : true
              };
            }
          };
        };

        Map.prototype.set = function (key, value) {
          if (this._values[key]) {
            this._values[key].v = value;
            return this;
          } // Add the key to the list of keys in order


          this._keys.push(key); // Add the key and value to the values dictionary with a point
          // to the location in the ordered keys list


          this._values[key] = {
            v: value,
            i: this._keys.length - 1
          };
          return this;
        };

        Map.prototype.values = function () {
          var self = this;
          var index = 0;
          return {
            next: function next() {
              var key = self._keys[index++];
              return {
                value: key !== undefined ? self._values[key].v : undefined,
                done: key !== undefined ? false : true
              };
            }
          };
        }; // Last ismaster


        Object.defineProperty(Map.prototype, 'size', {
          enumerable: true,
          get: function get() {
            return this._keys.length;
          }
        });
        module.exports = Map;
      }
    });
    var map_1 = map.Map;

    /**
     * @ignore
     */


    long_1.prototype.toExtendedJSON = function (options) {
      if (options && options.relaxed) return this.toNumber();
      return {
        $numberLong: this.toString()
      };
    };
    /**
     * @ignore
     */


    long_1.fromExtendedJSON = function (doc, options) {
      var result = long_1.fromString(doc.$numberLong);
      return options && options.relaxed ? result.toNumber() : result;
    };

    Object.defineProperty(long_1.prototype, '_bsontype', {
      value: 'Long'
    });
    var long_1$1 = long_1;

    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function (obj) {
          return typeof obj;
        };
      } else {
        _typeof = function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (typeof call === "object" || typeof call === "function")) {
        return call;
      }

      return _assertThisInitialized(self);
    }

    var Double =
    /*#__PURE__*/
    function () {
      /**
       * Create a Double type
       *
       * @param {number} value the number we want to represent as a double.
       * @return {Double}
       */
      function Double(value) {
        _classCallCheck(this, Double);

        this.value = value;
      }
      /**
       * Access the number value.
       *
       * @method
       * @return {number} returns the wrapped double number.
       */


      _createClass(Double, [{
        key: "valueOf",
        value: function valueOf() {
          return this.value;
        }
        /**
         * @ignore
         */

      }, {
        key: "toJSON",
        value: function toJSON() {
          return this.value;
        }
        /**
         * @ignore
         */

      }, {
        key: "toExtendedJSON",
        value: function toExtendedJSON(options) {
          if (options && options.relaxed && isFinite(this.value)) return this.value;
          return {
            $numberDouble: this.value.toString()
          };
        }
        /**
         * @ignore
         */

      }], [{
        key: "fromExtendedJSON",
        value: function fromExtendedJSON(doc, options) {
          return options && options.relaxed ? parseFloat(doc.$numberDouble) : new Double(parseFloat(doc.$numberDouble));
        }
      }]);

      return Double;
    }();

    Object.defineProperty(Double.prototype, '_bsontype', {
      value: 'Double'
    });
    var double_1 = Double;

    /**
     * @class
     * @param {number} low  the low (signed) 32 bits of the Timestamp.
     * @param {number} high the high (signed) 32 bits of the Timestamp.
     * @return {Timestamp}
     */


    var Timestamp =
    /*#__PURE__*/
    function (_Long) {
      _inherits(Timestamp, _Long);

      function Timestamp(low, high) {
        var _this;

        _classCallCheck(this, Timestamp);

        if (low instanceof long_1$1) {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(Timestamp).call(this, low.low, low.high));
        } else {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(Timestamp).call(this, low, high));
        }

        return _possibleConstructorReturn(_this);
      }
      /**
       * Return the JSON value.
       *
       * @method
       * @return {String} the JSON representation.
       */


      _createClass(Timestamp, [{
        key: "toJSON",
        value: function toJSON() {
          return {
            $timestamp: this.toString()
          };
        }
        /**
         * Returns a Timestamp represented by the given (32-bit) integer value.
         *
         * @method
         * @param {number} value the 32-bit integer in question.
         * @return {Timestamp} the timestamp.
         */

      }, {
        key: "toExtendedJSON",

        /**
         * @ignore
         */
        value: function toExtendedJSON() {
          return {
            $timestamp: {
              t: this.high,
              i: this.low
            }
          };
        }
        /**
         * @ignore
         */

      }], [{
        key: "fromInt",
        value: function fromInt(value) {
          return new Timestamp(long_1$1.fromInt(value));
        }
        /**
         * Returns a Timestamp representing the given number value, provided that it is a finite number. Otherwise, zero is returned.
         *
         * @method
         * @param {number} value the number in question.
         * @return {Timestamp} the timestamp.
         */

      }, {
        key: "fromNumber",
        value: function fromNumber(value) {
          return new Timestamp(long_1$1.fromNumber(value));
        }
        /**
         * Returns a Timestamp for the given high and low bits. Each is assumed to use 32 bits.
         *
         * @method
         * @param {number} lowBits the low 32-bits.
         * @param {number} highBits the high 32-bits.
         * @return {Timestamp} the timestamp.
         */

      }, {
        key: "fromBits",
        value: function fromBits(lowBits, highBits) {
          return new Timestamp(lowBits, highBits);
        }
        /**
         * Returns a Timestamp from the given string, optionally using the given radix.
         *
         * @method
         * @param {String} str the textual representation of the Timestamp.
         * @param {number} [opt_radix] the radix in which the text is written.
         * @return {Timestamp} the timestamp.
         */

      }, {
        key: "fromString",
        value: function fromString(str, opt_radix) {
          return new Timestamp(long_1$1.fromString(str, opt_radix));
        }
      }, {
        key: "fromExtendedJSON",
        value: function fromExtendedJSON(doc) {
          return new Timestamp(doc.$timestamp.i, doc.$timestamp.t);
        }
      }]);

      return Timestamp;
    }(long_1$1);

    Object.defineProperty(Timestamp.prototype, '_bsontype', {
      value: 'Timestamp'
    });
    var timestamp = Timestamp;

    var require$$0 = {};

    /* global window */

    /**
     * Normalizes our expected stringified form of a function across versions of node
     * @param {Function} fn The function to stringify
     */


    function normalizedFunctionString(fn) {
      return fn.toString().replace('function(', 'function (');
    }

    function insecureRandomBytes(size) {
      var result = new Uint8Array(size);

      for (var i = 0; i < size; ++i) {
        result[i] = Math.floor(Math.random() * 256);
      }

      return result;
    }

    var randomBytes = insecureRandomBytes;

    if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {
      randomBytes = function randomBytes(size) {
        return window.crypto.getRandomValues(new Uint8Array(size));
      };
    } else {
      try {
        randomBytes = require$$0.randomBytes;
      } catch (e) {} // keep the fallback
      // NOTE: in transpiled cases the above require might return null/undefined


      if (randomBytes == null) {
        randomBytes = insecureRandomBytes;
      }
    }

    var utils = {
      normalizedFunctionString: normalizedFunctionString,
      randomBytes: randomBytes
    };

    var Buffer$1 = buffer.Buffer;
    var randomBytes$1 = utils.randomBytes; // constants

    var PROCESS_UNIQUE = randomBytes$1(5); // Regular expression that checks for hex value

    var checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');
    var hasBufferType = false; // Check if buffer exists

    try {
      if (Buffer$1 && Buffer$1.from) hasBufferType = true;
    } catch (err) {
      hasBufferType = false;
    } // Precomputed hex table enables speedy hex string conversion


    var hexTable = [];

    for (var _i = 0; _i < 256; _i++) {
      hexTable[_i] = (_i <= 15 ? '0' : '') + _i.toString(16);
    } // Lookup tables


    var decodeLookup = [];
    var i$1 = 0;

    while (i$1 < 10) {
      decodeLookup[0x30 + i$1] = i$1++;
    }

    while (i$1 < 16) {
      decodeLookup[0x41 - 10 + i$1] = decodeLookup[0x61 - 10 + i$1] = i$1++;
    }

    var _Buffer = Buffer$1;

    function convertToHex(bytes) {
      return bytes.toString('hex');
    }

    function makeObjectIdError(invalidString, index) {
      var invalidCharacter = invalidString[index];
      return new TypeError("ObjectId string \"".concat(invalidString, "\" contains invalid character \"").concat(invalidCharacter, "\" with character code (").concat(invalidString.charCodeAt(index), "). All character codes for a non-hex string must be less than 256."));
    }
    /**
     * A class representation of the BSON ObjectId type.
     */


    var ObjectId =
    /*#__PURE__*/
    function () {
      /**
       * Create an ObjectId type
       *
       * @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.
       * @property {number} generationTime The generation time of this ObjectId instance
       * @return {ObjectId} instance of ObjectId.
       */
      function ObjectId(id) {
        _classCallCheck(this, ObjectId);

        // Duck-typing to support ObjectId from different npm packages
        if (id instanceof ObjectId) return id; // The most common usecase (blank id, new objectId instance)

        if (id == null || typeof id === 'number') {
          // Generate a new id
          this.id = this.generate(id); // If we are caching the hex string

          if (ObjectId.cacheHexString) this.__id = this.toString('hex'); // Return the object

          return;
        } // Check if the passed in id is valid


        var valid = ObjectId.isValid(id); // Throw an error if it's not a valid setup

        if (!valid && id != null) {
          throw new TypeError('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters');
        } else if (valid && typeof id === 'string' && id.length === 24 && hasBufferType) {
          return new ObjectId(Buffer$1.from(id, 'hex'));
        } else if (valid && typeof id === 'string' && id.length === 24) {
          return ObjectId.createFromHexString(id);
        } else if (id != null && id.length === 12) {
          // assume 12 byte string
          this.id = id;
        } else if (id != null && id.toHexString) {
          // Duck-typing to support ObjectId from different npm packages
          return id;
        } else {
          throw new TypeError('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters');
        }

        if (ObjectId.cacheHexString) this.__id = this.toString('hex');
      }
      /**
       * Return the ObjectId id as a 24 byte hex string representation
       *
       * @method
       * @return {string} return the 24 byte hex string representation.
       */


      _createClass(ObjectId, [{
        key: "toHexString",
        value: function toHexString() {
          if (ObjectId.cacheHexString && this.__id) return this.__id;
          var hexString = '';

          if (!this.id || !this.id.length) {
            throw new TypeError('invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' + JSON.stringify(this.id) + ']');
          }

          if (this.id instanceof _Buffer) {
            hexString = convertToHex(this.id);
            if (ObjectId.cacheHexString) this.__id = hexString;
            return hexString;
          }

          for (var _i2 = 0; _i2 < this.id.length; _i2++) {
            var hexChar = hexTable[this.id.charCodeAt(_i2)];

            if (typeof hexChar !== 'string') {
              throw makeObjectIdError(this.id, _i2);
            }

            hexString += hexChar;
          }

          if (ObjectId.cacheHexString) this.__id = hexString;
          return hexString;
        }
        /**
         * Update the ObjectId index used in generating new ObjectId's on the driver
         *
         * @method
         * @return {number} returns next index value.
         * @ignore
         */

      }, {
        key: "get_inc",
        value: function get_inc() {
          return ObjectId.index = (ObjectId.index + 1) % 0xffffff;
        }
        /**
         * Update the ObjectId index used in generating new ObjectId's on the driver
         *
         * @method
         * @return {number} returns next index value.
         * @ignore
         */

      }, {
        key: "getInc",
        value: function getInc() {
          return this.get_inc();
        }
        /**
         * Generate a 12 byte id buffer used in ObjectId's
         *
         * @method
         * @param {number} [time] optional parameter allowing to pass in a second based timestamp.
         * @return {Buffer} return the 12 byte id buffer string.
         */

      }, {
        key: "generate",
        value: function generate(time) {
          if ('number' !== typeof time) {
            time = ~~(Date.now() / 1000);
          }

          var inc = this.get_inc();
          var buffer$$1 = Buffer$1.alloc(12); // 4-byte timestamp

          buffer$$1[3] = time & 0xff;
          buffer$$1[2] = time >> 8 & 0xff;
          buffer$$1[1] = time >> 16 & 0xff;
          buffer$$1[0] = time >> 24 & 0xff; // 5-byte process unique

          buffer$$1[4] = PROCESS_UNIQUE[0];
          buffer$$1[5] = PROCESS_UNIQUE[1];
          buffer$$1[6] = PROCESS_UNIQUE[2];
          buffer$$1[7] = PROCESS_UNIQUE[3];
          buffer$$1[8] = PROCESS_UNIQUE[4]; // 3-byte counter

          buffer$$1[11] = inc & 0xff;
          buffer$$1[10] = inc >> 8 & 0xff;
          buffer$$1[9] = inc >> 16 & 0xff;
          return buffer$$1;
        }
        /**
         * Converts the id into a 24 byte hex string for printing
         *
         * @param {String} format The Buffer toString format parameter.
         * @return {String} return the 24 byte hex string representation.
         * @ignore
         */

      }, {
        key: "toString",
        value: function toString(format) {
          // Is the id a buffer then use the buffer toString method to return the format
          if (this.id && this.id.copy) {
            return this.id.toString(typeof format === 'string' ? format : 'hex');
          }

          return this.toHexString();
        }
        /**
         * Converts to its JSON representation.
         *
         * @return {String} return the 24 byte hex string representation.
         * @ignore
         */

      }, {
        key: "toJSON",
        value: function toJSON() {
          return this.toHexString();
        }
        /**
         * Compares the equality of this ObjectId with `otherID`.
         *
         * @method
         * @param {object} otherID ObjectId instance to compare against.
         * @return {boolean} the result of comparing two ObjectId's
         */

      }, {
        key: "equals",
        value: function equals(otherId) {
          if (otherId instanceof ObjectId) {
            return this.toString() === otherId.toString();
          }

          if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 12 && this.id instanceof _Buffer) {
            return otherId === this.id.toString('binary');
          }

          if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 24) {
            return otherId.toLowerCase() === this.toHexString();
          }

          if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 12) {
            return otherId === this.id;
          }

          if (otherId != null && (otherId instanceof ObjectId || otherId.toHexString)) {
            return otherId.toHexString() === this.toHexString();
          }

          return false;
        }
        /**
         * Returns the generation date (accurate up to the second) that this ID was generated.
         *
         * @method
         * @return {date} the generation date
         */

      }, {
        key: "getTimestamp",
        value: function getTimestamp() {
          var timestamp = new Date();
          var time = this.id[3] | this.id[2] << 8 | this.id[1] << 16 | this.id[0] << 24;
          timestamp.setTime(Math.floor(time) * 1000);
          return timestamp;
        }
        /**
         * @ignore
         */

      }, {
        key: "toExtendedJSON",

        /**
         * @ignore
         */
        value: function toExtendedJSON() {
          if (this.toHexString) return {
            $oid: this.toHexString()
          };
          return {
            $oid: this.toString('hex')
          };
        }
        /**
         * @ignore
         */

      }], [{
        key: "createPk",
        value: function createPk() {
          return new ObjectId();
        }
        /**
         * Creates an ObjectId from a second based number, with the rest of the ObjectId zeroed out. Used for comparisons or sorting the ObjectId.
         *
         * @method
         * @param {number} time an integer number representing a number of seconds.
         * @return {ObjectId} return the created ObjectId
         */

      }, {
        key: "createFromTime",
        value: function createFromTime(time) {
          var buffer$$1 = Buffer$1.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); // Encode time into first 4 bytes

          buffer$$1[3] = time & 0xff;
          buffer$$1[2] = time >> 8 & 0xff;
          buffer$$1[1] = time >> 16 & 0xff;
          buffer$$1[0] = time >> 24 & 0xff; // Return the new objectId

          return new ObjectId(buffer$$1);
        }
        /**
         * Creates an ObjectId from a hex string representation of an ObjectId.
         *
         * @method
         * @param {string} hexString create a ObjectId from a passed in 24 byte hexstring.
         * @return {ObjectId} return the created ObjectId
         */

      }, {
        key: "createFromHexString",
        value: function createFromHexString(string) {
          // Throw an error if it's not a valid setup
          if (typeof string === 'undefined' || string != null && string.length !== 24) {
            throw new TypeError('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters');
          } // Use Buffer.from method if available


          if (hasBufferType) return new ObjectId(Buffer$1.from(string, 'hex')); // Calculate lengths

          var array = new _Buffer(12);
          var n = 0;
          var i = 0;

          while (i < 24) {
            array[n++] = decodeLookup[string.charCodeAt(i++)] << 4 | decodeLookup[string.charCodeAt(i++)];
          }

          return new ObjectId(array);
        }
        /**
         * Checks if a value is a valid bson ObjectId
         *
         * @method
         * @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.
         */

      }, {
        key: "isValid",
        value: function isValid(id) {
          if (id == null) return false;

          if (typeof id === 'number') {
            return true;
          }

          if (typeof id === 'string') {
            return id.length === 12 || id.length === 24 && checkForHexRegExp.test(id);
          }

          if (id instanceof ObjectId) {
            return true;
          }

          if (id instanceof _Buffer && id.length === 12) {
            return true;
          } // Duck-Typing detection of ObjectId like objects


          if (id.toHexString) {
            return id.id.length === 12 || id.id.length === 24 && checkForHexRegExp.test(id.id);
          }

          return false;
        }
      }, {
        key: "fromExtendedJSON",
        value: function fromExtendedJSON(doc) {
          return new ObjectId(doc.$oid);
        }
      }]);

      return ObjectId;
    }();
    /**
     * @ignore
     */


    Object.defineProperty(ObjectId.prototype, 'generationTime', {
      enumerable: true,
      get: function get() {
        return this.id[3] | this.id[2] << 8 | this.id[1] << 16 | this.id[0] << 24;
      },
      set: function set(value) {
        // Encode time into first 4 bytes
        this.id[3] = value & 0xff;
        this.id[2] = value >> 8 & 0xff;
        this.id[1] = value >> 16 & 0xff;
        this.id[0] = value >> 24 & 0xff;
      }
    });
    /**
     * Converts to a string representation of this Id.
     *
     * @return {String} return the 24 byte hex string representation.
     * @ignore
     */

    ObjectId.prototype.inspect = ObjectId.prototype.toString;
    /**
     * @ignore
     */

    ObjectId.index = ~~(Math.random() * 0xffffff);
    Object.defineProperty(ObjectId.prototype, '_bsontype', {
      value: 'ObjectId'
    });
    var objectid = ObjectId;

    function alphabetize(str) {
      return str.split('').sort().join('');
    }
    /**
     * A class representation of the BSON RegExp type.
     */


    var BSONRegExp =
    /*#__PURE__*/
    function () {
      /**
       * Create a RegExp type
       *
       * @param {string} pattern The regular expression pattern to match
       * @param {string} options The regular expression options
       */
      function BSONRegExp(pattern, options) {
        _classCallCheck(this, BSONRegExp);

        // Execute
        this.pattern = pattern || '';
        this.options = options ? alphabetize(options) : ''; // Validate options

        for (var i = 0; i < this.options.length; i++) {
          if (!(this.options[i] === 'i' || this.options[i] === 'm' || this.options[i] === 'x' || this.options[i] === 'l' || this.options[i] === 's' || this.options[i] === 'u')) {
            throw new Error("The regular expression option [".concat(this.options[i], "] is not supported"));
          }
        }
      }
      /**
       * @ignore
       */


      _createClass(BSONRegExp, [{
        key: "toExtendedJSON",
        value: function toExtendedJSON() {
          return {
            $regularExpression: {
              pattern: this.pattern,
              options: this.options
            }
          };
        }
        /**
         * @ignore
         */

      }], [{
        key: "fromExtendedJSON",
        value: function fromExtendedJSON(doc) {
          return new BSONRegExp(doc.$regularExpression.pattern, doc.$regularExpression.options.split('').sort().join(''));
        }
      }]);

      return BSONRegExp;
    }();

    Object.defineProperty(BSONRegExp.prototype, '_bsontype', {
      value: 'BSONRegExp'
    });
    var regexp = BSONRegExp;

    var BSONSymbol =
    /*#__PURE__*/
    function () {
      /**
       * Create a Symbol type
       *
       * @param {string} value the string representing the symbol.
       */
      function BSONSymbol(value) {
        _classCallCheck(this, BSONSymbol);

        this.value = value;
      }
      /**
       * Access the wrapped string value.
       *
       * @method
       * @return {String} returns the wrapped string.
       */


      _createClass(BSONSymbol, [{
        key: "valueOf",
        value: function valueOf() {
          return this.value;
        }
        /**
         * @ignore
         */

      }, {
        key: "toString",
        value: function toString() {
          return this.value;
        }
        /**
         * @ignore
         */

      }, {
        key: "inspect",
        value: function inspect() {
          return this.value;
        }
        /**
         * @ignore
         */

      }, {
        key: "toJSON",
        value: function toJSON() {
          return this.value;
        }
        /**
         * @ignore
         */

      }, {
        key: "toExtendedJSON",
        value: function toExtendedJSON() {
          return {
            $symbol: this.value
          };
        }
        /**
         * @ignore
         */

      }], [{
        key: "fromExtendedJSON",
        value: function fromExtendedJSON(doc) {
          return new BSONSymbol(doc.$symbol);
        }
      }]);

      return BSONSymbol;
    }();

    Object.defineProperty(BSONSymbol.prototype, '_bsontype', {
      value: 'Symbol'
    });
    var symbol = BSONSymbol;

    var Int32 =
    /*#__PURE__*/
    function () {
      /**
       * Create an Int32 type
       *
       * @param {number} value the number we want to represent as an int32.
       * @return {Int32}
       */
      function Int32(value) {
        _classCallCheck(this, Int32);

        this.value = value;
      }
      /**
       * Access the number value.
       *
       * @method
       * @return {number} returns the wrapped int32 number.
       */


      _createClass(Int32, [{
        key: "valueOf",
        value: function valueOf() {
          return this.value;
        }
        /**
         * @ignore
         */

      }, {
        key: "toJSON",
        value: function toJSON() {
          return this.value;
        }
        /**
         * @ignore
         */

      }, {
        key: "toExtendedJSON",
        value: function toExtendedJSON(options) {
          if (options && options.relaxed) return this.value;
          return {
            $numberInt: this.value.toString()
          };
        }
        /**
         * @ignore
         */

      }], [{
        key: "fromExtendedJSON",
        value: function fromExtendedJSON(doc, options) {
          return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);
        }
      }]);

      return Int32;
    }();

    Object.defineProperty(Int32.prototype, '_bsontype', {
      value: 'Int32'
    });
    var int_32 = Int32;

    var Code =
    /*#__PURE__*/
    function () {
      /**
       * Create a Code type
       *
       * @param {(string|function)} code a string or function.
       * @param {Object} [scope] an optional scope for the function.
       * @return {Code}
       */
      function Code(code, scope) {
        _classCallCheck(this, Code);

        this.code = code;
        this.scope = scope;
      }
      /**
       * @ignore
       */


      _createClass(Code, [{
        key: "toJSON",
        value: function toJSON() {
          return {
            scope: this.scope,
            code: this.code
          };
        }
        /**
         * @ignore
         */

      }, {
        key: "toExtendedJSON",
        value: function toExtendedJSON() {
          if (this.scope) {
            return {
              $code: this.code,
              $scope: this.scope
            };
          }

          return {
            $code: this.code
          };
        }
        /**
         * @ignore
         */

      }], [{
        key: "fromExtendedJSON",
        value: function fromExtendedJSON(doc) {
          return new Code(doc.$code, doc.$scope);
        }
      }]);

      return Code;
    }();

    Object.defineProperty(Code.prototype, '_bsontype', {
      value: 'Code'
    });
    var code$1 = Code;

    var PARSE_STRING_REGEXP = /^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/;
    var PARSE_INF_REGEXP = /^(\+|-)?(Infinity|inf)$/i;
    var PARSE_NAN_REGEXP = /^(\+|-)?NaN$/i;
    var EXPONENT_MAX = 6111;
    var EXPONENT_MIN = -6176;
    var EXPONENT_BIAS = 6176;
    var MAX_DIGITS = 34; // Nan value bits as 32 bit values (due to lack of longs)

    var NAN_BUFFER = [0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse(); // Infinity value bits 32 bit values (due to lack of longs)

    var INF_NEGATIVE_BUFFER = [0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();
    var INF_POSITIVE_BUFFER = [0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse();
    var EXPONENT_REGEX = /^([-+])?(\d+)?$/; // Detect if the value is a digit

    function isDigit(value) {
      return !isNaN(parseInt(value, 10));
    } // Divide two uint128 values


    function divideu128(value) {
      var DIVISOR = long_1$1.fromNumber(1000 * 1000 * 1000);

      var _rem = long_1$1.fromNumber(0);

      if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {
        return {
          quotient: value,
          rem: _rem
        };
      }

      for (var i = 0; i <= 3; i++) {
        // Adjust remainder to match value of next dividend
        _rem = _rem.shiftLeft(32); // Add the divided to _rem

        _rem = _rem.add(new long_1$1(value.parts[i], 0));
        value.parts[i] = _rem.div(DIVISOR).low;
        _rem = _rem.modulo(DIVISOR);
      }

      return {
        quotient: value,
        rem: _rem
      };
    } // Multiply two Long values and return the 128 bit value


    function multiply64x2(left, right) {
      if (!left && !right) {
        return {
          high: long_1$1.fromNumber(0),
          low: long_1$1.fromNumber(0)
        };
      }

      var leftHigh = left.shiftRightUnsigned(32);
      var leftLow = new long_1$1(left.getLowBits(), 0);
      var rightHigh = right.shiftRightUnsigned(32);
      var rightLow = new long_1$1(right.getLowBits(), 0);
      var productHigh = leftHigh.multiply(rightHigh);
      var productMid = leftHigh.multiply(rightLow);
      var productMid2 = leftLow.multiply(rightHigh);
      var productLow = leftLow.multiply(rightLow);
      productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
      productMid = new long_1$1(productMid.getLowBits(), 0).add(productMid2).add(productLow.shiftRightUnsigned(32));
      productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
      productLow = productMid.shiftLeft(32).add(new long_1$1(productLow.getLowBits(), 0)); // Return the 128 bit result

      return {
        high: productHigh,
        low: productLow
      };
    }

    function lessThan(left, right) {
      // Make values unsigned
      var uhleft = left.high >>> 0;
      var uhright = right.high >>> 0; // Compare high bits first

      if (uhleft < uhright) {
        return true;
      } else if (uhleft === uhright) {
        var ulleft = left.low >>> 0;
        var ulright = right.low >>> 0;
        if (ulleft < ulright) return true;
      }

      return false;
    }

    function invalidErr(string, message) {
      throw new TypeError("\"".concat(string, "\" is not a valid Decimal128 string - ").concat(message));
    }
    /**
     * A class representation of the BSON Decimal128 type.
     *
     * @class
     * @param {Buffer} bytes a buffer containing the raw Decimal128 bytes.
     * @return {Double}
     */


    function Decimal128(bytes) {
      this.bytes = bytes;
    }
    /**
     * Create a Decimal128 instance from a string representation
     *
     * @method
     * @param {string} string a numeric string representation.
     * @return {Decimal128} returns a Decimal128 instance.
     */


    Decimal128.fromString = function (string) {
      // Parse state tracking
      var isNegative = false;
      var sawRadix = false;
      var foundNonZero = false; // Total number of significant digits (no leading or trailing zero)

      var significantDigits = 0; // Total number of significand digits read

      var nDigitsRead = 0; // Total number of digits (no leading zeros)

      var nDigits = 0; // The number of the digits after radix

      var radixPosition = 0; // The index of the first non-zero in *str*

      var firstNonZero = 0; // Digits Array

      var digits = [0]; // The number of digits in digits

      var nDigitsStored = 0; // Insertion pointer for digits

      var digitsInsert = 0; // The index of the first non-zero digit

      var firstDigit = 0; // The index of the last digit

      var lastDigit = 0; // Exponent

      var exponent = 0; // loop index over array

      var i = 0; // The high 17 digits of the significand

      var significandHigh = [0, 0]; // The low 17 digits of the significand

      var significandLow = [0, 0]; // The biased exponent

      var biasedExponent = 0; // Read index

      var index = 0; // Naively prevent against REDOS attacks.
      // TODO: implementing a custom parsing for this, or refactoring the regex would yield
      //       further gains.

      if (string.length >= 7000) {
        throw new TypeError('' + string + ' not a valid Decimal128 string');
      } // Results


      var stringMatch = string.match(PARSE_STRING_REGEXP);
      var infMatch = string.match(PARSE_INF_REGEXP);
      var nanMatch = string.match(PARSE_NAN_REGEXP); // Validate the string

      if (!stringMatch && !infMatch && !nanMatch || string.length === 0) {
        throw new TypeError('' + string + ' not a valid Decimal128 string');
      }

      if (stringMatch) {
        // full_match = stringMatch[0]
        // sign = stringMatch[1]
        var unsignedNumber = stringMatch[2]; // stringMatch[3] is undefined if a whole number (ex "1", 12")
        // but defined if a number w/ decimal in it (ex "1.0, 12.2")

        var e = stringMatch[4];
        var expSign = stringMatch[5];
        var expNumber = stringMatch[6]; // they provided e, but didn't give an exponent number. for ex "1e"

        if (e && expNumber === undefined) invalidErr(string, 'missing exponent power'); // they provided e, but didn't give a number before it. for ex "e1"

        if (e && unsignedNumber === undefined) invalidErr(string, 'missing exponent base');

        if (e === undefined && (expSign || expNumber)) {
          invalidErr(string, 'missing e before exponent');
        }
      } // Get the negative or positive sign


      if (string[index] === '+' || string[index] === '-') {
        isNegative = string[index++] === '-';
      } // Check if user passed Infinity or NaN


      if (!isDigit(string[index]) && string[index] !== '.') {
        if (string[index] === 'i' || string[index] === 'I') {
          return new Decimal128(Buffer.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
        } else if (string[index] === 'N') {
          return new Decimal128(Buffer.from(NAN_BUFFER));
        }
      } // Read all the digits


      while (isDigit(string[index]) || string[index] === '.') {
        if (string[index] === '.') {
          if (sawRadix) invalidErr(string, 'contains multiple periods');
          sawRadix = true;
          index = index + 1;
          continue;
        }

        if (nDigitsStored < 34) {
          if (string[index] !== '0' || foundNonZero) {
            if (!foundNonZero) {
              firstNonZero = nDigitsRead;
            }

            foundNonZero = true; // Only store 34 digits

            digits[digitsInsert++] = parseInt(string[index], 10);
            nDigitsStored = nDigitsStored + 1;
          }
        }

        if (foundNonZero) nDigits = nDigits + 1;
        if (sawRadix) radixPosition = radixPosition + 1;
        nDigitsRead = nDigitsRead + 1;
        index = index + 1;
      }

      if (sawRadix && !nDigitsRead) throw new TypeError('' + string + ' not a valid Decimal128 string'); // Read exponent if exists

      if (string[index] === 'e' || string[index] === 'E') {
        // Read exponent digits
        var match = string.substr(++index).match(EXPONENT_REGEX); // No digits read

        if (!match || !match[2]) return new Decimal128(Buffer.from(NAN_BUFFER)); // Get exponent

        exponent = parseInt(match[0], 10); // Adjust the index

        index = index + match[0].length;
      } // Return not a number


      if (string[index]) return new Decimal128(Buffer.from(NAN_BUFFER)); // Done reading input
      // Find first non-zero digit in digits

      firstDigit = 0;

      if (!nDigitsStored) {
        firstDigit = 0;
        lastDigit = 0;
        digits[0] = 0;
        nDigits = 1;
        nDigitsStored = 1;
        significantDigits = 0;
      } else {
        lastDigit = nDigitsStored - 1;
        significantDigits = nDigits;

        if (significantDigits !== 1) {
          while (string[firstNonZero + significantDigits - 1] === '0') {
            significantDigits = significantDigits - 1;
          }
        }
      } // Normalization of exponent
      // Correct exponent based on radix position, and shift significand as needed
      // to represent user input
      // Overflow prevention


      if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {
        exponent = EXPONENT_MIN;
      } else {
        exponent = exponent - radixPosition;
      } // Attempt to normalize the exponent


      while (exponent > EXPONENT_MAX) {
        // Shift exponent to significand and decrease
        lastDigit = lastDigit + 1;

        if (lastDigit - firstDigit > MAX_DIGITS) {
          // Check if we have a zero then just hard clamp, otherwise fail
          var digitsString = digits.join('');

          if (digitsString.match(/^0+$/)) {
            exponent = EXPONENT_MAX;
            break;
          }

          invalidErr(string, 'overflow');
        }

        exponent = exponent - 1;
      }

      while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {
        // Shift last digit. can only do this if < significant digits than # stored.
        if (lastDigit === 0 && significantDigits < nDigitsStored) {
          exponent = EXPONENT_MIN;
          significantDigits = 0;
          break;
        }

        if (nDigitsStored < nDigits) {
          // adjust to match digits not stored
          nDigits = nDigits - 1;
        } else {
          // adjust to round
          lastDigit = lastDigit - 1;
        }

        if (exponent < EXPONENT_MAX) {
          exponent = exponent + 1;
        } else {
          // Check if we have a zero then just hard clamp, otherwise fail
          var _digitsString = digits.join('');

          if (_digitsString.match(/^0+$/)) {
            exponent = EXPONENT_MAX;
            break;
          }

          invalidErr(string, 'overflow');
        }
      } // Round
      // We've normalized the exponent, but might still need to round.


      if (lastDigit - firstDigit + 1 < significantDigits) {
        var endOfString = nDigitsRead; // If we have seen a radix point, 'string' is 1 longer than we have
        // documented with ndigits_read, so inc the position of the first nonzero
        // digit and the position that digits are read to.

        if (sawRadix) {
          firstNonZero = firstNonZero + 1;
          endOfString = endOfString + 1;
        } // if negative, we need to increment again to account for - sign at start.


        if (isNegative) {
          firstNonZero = firstNonZero + 1;
          endOfString = endOfString + 1;
        }

        var roundDigit = parseInt(string[firstNonZero + lastDigit + 1], 10);
        var roundBit = 0;

        if (roundDigit >= 5) {
          roundBit = 1;

          if (roundDigit === 5) {
            roundBit = digits[lastDigit] % 2 === 1;

            for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {
              if (parseInt(string[i], 10)) {
                roundBit = 1;
                break;
              }
            }
          }
        }

        if (roundBit) {
          var dIdx = lastDigit;

          for (; dIdx >= 0; dIdx--) {
            if (++digits[dIdx] > 9) {
              digits[dIdx] = 0; // overflowed most significant digit

              if (dIdx === 0) {
                if (exponent < EXPONENT_MAX) {
                  exponent = exponent + 1;
                  digits[dIdx] = 1;
                } else {
                  return new Decimal128(Buffer.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
                }
              }
            }
          }
        }
      } // Encode significand
      // The high 17 digits of the significand


      significandHigh = long_1$1.fromNumber(0); // The low 17 digits of the significand

      significandLow = long_1$1.fromNumber(0); // read a zero

      if (significantDigits === 0) {
        significandHigh = long_1$1.fromNumber(0);
        significandLow = long_1$1.fromNumber(0);
      } else if (lastDigit - firstDigit < 17) {
        var _dIdx = firstDigit;
        significandLow = long_1$1.fromNumber(digits[_dIdx++]);
        significandHigh = new long_1$1(0, 0);

        for (; _dIdx <= lastDigit; _dIdx++) {
          significandLow = significandLow.multiply(long_1$1.fromNumber(10));
          significandLow = significandLow.add(long_1$1.fromNumber(digits[_dIdx]));
        }
      } else {
        var _dIdx2 = firstDigit;
        significandHigh = long_1$1.fromNumber(digits[_dIdx2++]);

        for (; _dIdx2 <= lastDigit - 17; _dIdx2++) {
          significandHigh = significandHigh.multiply(long_1$1.fromNumber(10));
          significandHigh = significandHigh.add(long_1$1.fromNumber(digits[_dIdx2]));
        }

        significandLow = long_1$1.fromNumber(digits[_dIdx2++]);

        for (; _dIdx2 <= lastDigit; _dIdx2++) {
          significandLow = significandLow.multiply(long_1$1.fromNumber(10));
          significandLow = significandLow.add(long_1$1.fromNumber(digits[_dIdx2]));
        }
      }

      var significand = multiply64x2(significandHigh, long_1$1.fromString('100000000000000000'));
      significand.low = significand.low.add(significandLow);

      if (lessThan(significand.low, significandLow)) {
        significand.high = significand.high.add(long_1$1.fromNumber(1));
      } // Biased exponent


      biasedExponent = exponent + EXPONENT_BIAS;
      var dec = {
        low: long_1$1.fromNumber(0),
        high: long_1$1.fromNumber(0)
      }; // Encode combination, exponent, and significand.

      if (significand.high.shiftRightUnsigned(49).and(long_1$1.fromNumber(1)).equals(long_1$1.fromNumber(1))) {
        // Encode '11' into bits 1 to 3
        dec.high = dec.high.or(long_1$1.fromNumber(0x3).shiftLeft(61));
        dec.high = dec.high.or(long_1$1.fromNumber(biasedExponent).and(long_1$1.fromNumber(0x3fff).shiftLeft(47)));
        dec.high = dec.high.or(significand.high.and(long_1$1.fromNumber(0x7fffffffffff)));
      } else {
        dec.high = dec.high.or(long_1$1.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));
        dec.high = dec.high.or(significand.high.and(long_1$1.fromNumber(0x1ffffffffffff)));
      }

      dec.low = significand.low; // Encode sign

      if (isNegative) {
        dec.high = dec.high.or(long_1$1.fromString('9223372036854775808'));
      } // Encode into a buffer


      var buffer$$1 = Buffer.alloc(16);
      index = 0; // Encode the low 64 bits of the decimal
      // Encode low bits

      buffer$$1[index++] = dec.low.low & 0xff;
      buffer$$1[index++] = dec.low.low >> 8 & 0xff;
      buffer$$1[index++] = dec.low.low >> 16 & 0xff;
      buffer$$1[index++] = dec.low.low >> 24 & 0xff; // Encode high bits

      buffer$$1[index++] = dec.low.high & 0xff;
      buffer$$1[index++] = dec.low.high >> 8 & 0xff;
      buffer$$1[index++] = dec.low.high >> 16 & 0xff;
      buffer$$1[index++] = dec.low.high >> 24 & 0xff; // Encode the high 64 bits of the decimal
      // Encode low bits

      buffer$$1[index++] = dec.high.low & 0xff;
      buffer$$1[index++] = dec.high.low >> 8 & 0xff;
      buffer$$1[index++] = dec.high.low >> 16 & 0xff;
      buffer$$1[index++] = dec.high.low >> 24 & 0xff; // Encode high bits

      buffer$$1[index++] = dec.high.high & 0xff;
      buffer$$1[index++] = dec.high.high >> 8 & 0xff;
      buffer$$1[index++] = dec.high.high >> 16 & 0xff;
      buffer$$1[index++] = dec.high.high >> 24 & 0xff; // Return the new Decimal128

      return new Decimal128(buffer$$1);
    }; // Extract least significant 5 bits


    var COMBINATION_MASK = 0x1f; // Extract least significant 14 bits

    var EXPONENT_MASK = 0x3fff; // Value of combination field for Inf

    var COMBINATION_INFINITY = 30; // Value of combination field for NaN

    var COMBINATION_NAN = 31;
    /**
     * Create a string representation of the raw Decimal128 value
     *
     * @method
     * @return {string} returns a Decimal128 string representation.
     */

    Decimal128.prototype.toString = function () {
      // Note: bits in this routine are referred to starting at 0,
      // from the sign bit, towards the coefficient.
      // bits 0 - 31
      var high; // bits 32 - 63

      var midh; // bits 64 - 95

      var midl; // bits 96 - 127

      var low; // bits 1 - 5

      var combination; // decoded biased exponent (14 bits)

      var biased_exponent; // the number of significand digits

      var significand_digits = 0; // the base-10 digits in the significand

      var significand = new Array(36);

      for (var i = 0; i < significand.length; i++) {
        significand[i] = 0;
      } // read pointer into significand


      var index = 0; // unbiased exponent

      var exponent; // the exponent if scientific notation is used

      var scientific_exponent; // true if the number is zero

      var is_zero = false; // the most signifcant significand bits (50-46)

      var significand_msb; // temporary storage for significand decoding

      var significand128 = {
        parts: new Array(4)
      }; // indexing variables

      var j, k; // Output string

      var string = []; // Unpack index

      index = 0; // Buffer reference

      var buffer$$1 = this.bytes; // Unpack the low 64bits into a long

      low = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;
      midl = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24; // Unpack the high 64bits into a long

      midh = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;
      high = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24; // Unpack index

      index = 0; // Create the state of the decimal

      var dec = {
        low: new long_1$1(low, midl),
        high: new long_1$1(midh, high)
      };

      if (dec.high.lessThan(long_1$1.ZERO)) {
        string.push('-');
      } // Decode combination field and exponent


      combination = high >> 26 & COMBINATION_MASK;

      if (combination >> 3 === 3) {
        // Check for 'special' values
        if (combination === COMBINATION_INFINITY) {
          return string.join('') + 'Infinity';
        } else if (combination === COMBINATION_NAN) {
          return 'NaN';
        } else {
          biased_exponent = high >> 15 & EXPONENT_MASK;
          significand_msb = 0x08 + (high >> 14 & 0x01);
        }
      } else {
        significand_msb = high >> 14 & 0x07;
        biased_exponent = high >> 17 & EXPONENT_MASK;
      }

      exponent = biased_exponent - EXPONENT_BIAS; // Create string of significand digits
      // Convert the 114-bit binary number represented by
      // (significand_high, significand_low) to at most 34 decimal
      // digits through modulo and division.

      significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);
      significand128.parts[1] = midh;
      significand128.parts[2] = midl;
      significand128.parts[3] = low;

      if (significand128.parts[0] === 0 && significand128.parts[1] === 0 && significand128.parts[2] === 0 && significand128.parts[3] === 0) {
        is_zero = true;
      } else {
        for (k = 3; k >= 0; k--) {
          var least_digits = 0; // Peform the divide

          var result = divideu128(significand128);
          significand128 = result.quotient;
          least_digits = result.rem.low; // We now have the 9 least significant digits (in base 2).
          // Convert and output to string.

          if (!least_digits) continue;

          for (j = 8; j >= 0; j--) {
            // significand[k * 9 + j] = Math.round(least_digits % 10);
            significand[k * 9 + j] = least_digits % 10; // least_digits = Math.round(least_digits / 10);

            least_digits = Math.floor(least_digits / 10);
          }
        }
      } // Output format options:
      // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd
      // Regular    - ddd.ddd


      if (is_zero) {
        significand_digits = 1;
        significand[index] = 0;
      } else {
        significand_digits = 36;

        while (!significand[index]) {
          significand_digits = significand_digits - 1;
          index = index + 1;
        }
      }

      scientific_exponent = significand_digits - 1 + exponent; // The scientific exponent checks are dictated by the string conversion
      // specification and are somewhat arbitrary cutoffs.
      //
      // We must check exponent > 0, because if this is the case, the number
      // has trailing zeros.  However, we *cannot* output these trailing zeros,
      // because doing so would change the precision of the value, and would
      // change stored data if the string converted number is round tripped.

      if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {
        // Scientific format
        // if there are too many significant digits, we should just be treating numbers
        // as + or - 0 and using the non-scientific exponent (this is for the "invalid
        // representation should be treated as 0/-0" spec cases in decimal128-1.json)
        if (significand_digits > 34) {
          string.push(0);
          if (exponent > 0) string.push('E+' + exponent);else if (exponent < 0) string.push('E' + exponent);
          return string.join('');
        }

        string.push(significand[index++]);
        significand_digits = significand_digits - 1;

        if (significand_digits) {
          string.push('.');
        }

        for (var _i = 0; _i < significand_digits; _i++) {
          string.push(significand[index++]);
        } // Exponent


        string.push('E');

        if (scientific_exponent > 0) {
          string.push('+' + scientific_exponent);
        } else {
          string.push(scientific_exponent);
        }
      } else {
        // Regular format with no decimal place
        if (exponent >= 0) {
          for (var _i2 = 0; _i2 < significand_digits; _i2++) {
            string.push(significand[index++]);
          }
        } else {
          var radix_position = significand_digits + exponent; // non-zero digits before radix

          if (radix_position > 0) {
            for (var _i3 = 0; _i3 < radix_position; _i3++) {
              string.push(significand[index++]);
            }
          } else {
            string.push('0');
          }

          string.push('.'); // add leading zeros after radix

          while (radix_position++ < 0) {
            string.push('0');
          }

          for (var _i4 = 0; _i4 < significand_digits - Math.max(radix_position - 1, 0); _i4++) {
            string.push(significand[index++]);
          }
        }
      }

      return string.join('');
    };

    Decimal128.prototype.toJSON = function () {
      return {
        $numberDecimal: this.toString()
      };
    };
    /**
     * @ignore
     */


    Decimal128.prototype.toExtendedJSON = function () {
      return {
        $numberDecimal: this.toString()
      };
    };
    /**
     * @ignore
     */


    Decimal128.fromExtendedJSON = function (doc) {
      return Decimal128.fromString(doc.$numberDecimal);
    };

    Object.defineProperty(Decimal128.prototype, '_bsontype', {
      value: 'Decimal128'
    });
    var decimal128 = Decimal128;

    var MinKey =
    /*#__PURE__*/
    function () {
      /**
       * Create a MinKey type
       *
       * @return {MinKey} A MinKey instance
       */
      function MinKey() {
        _classCallCheck(this, MinKey);
      }
      /**
       * @ignore
       */


      _createClass(MinKey, [{
        key: "toExtendedJSON",
        value: function toExtendedJSON() {
          return {
            $minKey: 1
          };
        }
        /**
         * @ignore
         */

      }], [{
        key: "fromExtendedJSON",
        value: function fromExtendedJSON() {
          return new MinKey();
        }
      }]);

      return MinKey;
    }();

    Object.defineProperty(MinKey.prototype, '_bsontype', {
      value: 'MinKey'
    });
    var min_key = MinKey;

    var MaxKey =
    /*#__PURE__*/
    function () {
      /**
       * Create a MaxKey type
       *
       * @return {MaxKey} A MaxKey instance
       */
      function MaxKey() {
        _classCallCheck(this, MaxKey);
      }
      /**
       * @ignore
       */


      _createClass(MaxKey, [{
        key: "toExtendedJSON",
        value: function toExtendedJSON() {
          return {
            $maxKey: 1
          };
        }
        /**
         * @ignore
         */

      }], [{
        key: "fromExtendedJSON",
        value: function fromExtendedJSON() {
          return new MaxKey();
        }
      }]);

      return MaxKey;
    }();

    Object.defineProperty(MaxKey.prototype, '_bsontype', {
      value: 'MaxKey'
    });
    var max_key = MaxKey;

    var DBRef =
    /*#__PURE__*/
    function () {
      /**
       * Create a DBRef type
       *
       * @param {string} collection the collection name.
       * @param {ObjectId} oid the reference ObjectId.
       * @param {string} [db] optional db name, if omitted the reference is local to the current db.
       * @return {DBRef}
       */
      function DBRef(collection, oid, db, fields) {
        _classCallCheck(this, DBRef);

        // check if namespace has been provided
        var parts = collection.split('.');

        if (parts.length === 2) {
          db = parts.shift();
          collection = parts.shift();
        }

        this.collection = collection;
        this.oid = oid;
        this.db = db;
        this.fields = fields || {};
      }
      /**
       * @ignore
       * @api private
       */


      _createClass(DBRef, [{
        key: "toJSON",
        value: function toJSON() {
          var o = Object.assign({
            $ref: this.collection,
            $id: this.oid
          }, this.fields);
          if (this.db != null) o.$db = this.db;
          return o;
        }
        /**
         * @ignore
         */

      }, {
        key: "toExtendedJSON",
        value: function toExtendedJSON() {
          var o = {
            $ref: this.collection,
            $id: this.oid
          };
          if (this.db) o.$db = this.db;
          o = Object.assign(o, this.fields);
          return o;
        }
        /**
         * @ignore
         */

      }], [{
        key: "fromExtendedJSON",
        value: function fromExtendedJSON(doc) {
          var copy = Object.assign({}, doc);
          ['$ref', '$id', '$db'].forEach(function (k) {
            return delete copy[k];
          });
          return new DBRef(doc.$ref, doc.$id, doc.$db, copy);
        }
      }]);

      return DBRef;
    }();

    Object.defineProperty(DBRef.prototype, '_bsontype', {
      value: 'DBRef'
    });
    var db_ref = DBRef;

    var Binary =
    /*#__PURE__*/
    function () {
      /**
       * Create a Binary type
       *
       * Sub types
       *  - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.
       *  - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.
       *  - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.
       *  - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.
       *  - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.
       *  - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.
       *
       * @param {Buffer} buffer a buffer object containing the binary data.
       * @param {Number} [subType] the option binary type.
       * @return {Binary}
       */
      function Binary(buffer$$1, subType) {
        _classCallCheck(this, Binary);

        if (buffer$$1 != null && !(typeof buffer$$1 === 'string') && !Buffer.isBuffer(buffer$$1) && !(buffer$$1 instanceof Uint8Array) && !Array.isArray(buffer$$1)) {
          throw new TypeError('only String, Buffer, Uint8Array or Array accepted');
        }

        this.sub_type = subType == null ? BSON_BINARY_SUBTYPE_DEFAULT : subType;
        this.position = 0;

        if (buffer$$1 != null && !(buffer$$1 instanceof Number)) {
          // Only accept Buffer, Uint8Array or Arrays
          if (typeof buffer$$1 === 'string') {
            // Different ways of writing the length of the string for the different types
            if (typeof Buffer !== 'undefined') {
              this.buffer = Buffer.from(buffer$$1);
            } else if (typeof Uint8Array !== 'undefined' || Array.isArray(buffer$$1)) {
              this.buffer = writeStringToArray(buffer$$1);
            } else {
              throw new TypeError('only String, Buffer, Uint8Array or Array accepted');
            }
          } else {
            this.buffer = buffer$$1;
          }

          this.position = buffer$$1.length;
        } else {
          if (typeof Buffer !== 'undefined') {
            this.buffer = Buffer.alloc(Binary.BUFFER_SIZE);
          } else if (typeof Uint8Array !== 'undefined') {
            this.buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE));
          } else {
            this.buffer = new Array(Binary.BUFFER_SIZE);
          }
        }
      }
      /**
       * Updates this binary with byte_value.
       *
       * @method
       * @param {string} byte_value a single byte we wish to write.
       */


      _createClass(Binary, [{
        key: "put",
        value: function put(byte_value) {
          // If it's a string and a has more than one character throw an error
          if (byte_value['length'] != null && typeof byte_value !== 'number' && byte_value.length !== 1) throw new TypeError('only accepts single character String, Uint8Array or Array');
          if (typeof byte_value !== 'number' && byte_value < 0 || byte_value > 255) throw new TypeError('only accepts number in a valid unsigned byte range 0-255'); // Decode the byte value once

          var decoded_byte = null;

          if (typeof byte_value === 'string') {
            decoded_byte = byte_value.charCodeAt(0);
          } else if (byte_value['length'] != null) {
            decoded_byte = byte_value[0];
          } else {
            decoded_byte = byte_value;
          }

          if (this.buffer.length > this.position) {
            this.buffer[this.position++] = decoded_byte;
          } else {
            if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {
              // Create additional overflow buffer
              var buffer$$1 = Buffer.alloc(Binary.BUFFER_SIZE + this.buffer.length); // Combine the two buffers together

              this.buffer.copy(buffer$$1, 0, 0, this.buffer.length);
              this.buffer = buffer$$1;
              this.buffer[this.position++] = decoded_byte;
            } else {
              var _buffer = null; // Create a new buffer (typed or normal array)

              if (isUint8Array(this.buffer)) {
                _buffer = new Uint8Array(new ArrayBuffer(Binary.BUFFER_SIZE + this.buffer.length));
              } else {
                _buffer = new Array(Binary.BUFFER_SIZE + this.buffer.length);
              } // We need to copy all the content to the new array


              for (var i = 0; i < this.buffer.length; i++) {
                _buffer[i] = this.buffer[i];
              } // Reassign the buffer


              this.buffer = _buffer; // Write the byte

              this.buffer[this.position++] = decoded_byte;
            }
          }
        }
        /**
         * Writes a buffer or string to the binary.
         *
         * @method
         * @param {(Buffer|string)} string a string or buffer to be written to the Binary BSON object.
         * @param {number} offset specify the binary of where to write the content.
         * @return {null}
         */

      }, {
        key: "write",
        value: function write(string, offset) {
          offset = typeof offset === 'number' ? offset : this.position; // If the buffer is to small let's extend the buffer

          if (this.buffer.length < offset + string.length) {
            var buffer$$1 = null; // If we are in node.js

            if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {
              buffer$$1 = Buffer.alloc(this.buffer.length + string.length);
              this.buffer.copy(buffer$$1, 0, 0, this.buffer.length);
            } else if (isUint8Array(this.buffer)) {
              // Create a new buffer
              buffer$$1 = new Uint8Array(new ArrayBuffer(this.buffer.length + string.length)); // Copy the content

              for (var i = 0; i < this.position; i++) {
                buffer$$1[i] = this.buffer[i];
              }
            } // Assign the new buffer


            this.buffer = buffer$$1;
          }

          if (typeof Buffer !== 'undefined' && Buffer.isBuffer(string) && Buffer.isBuffer(this.buffer)) {
            string.copy(this.buffer, offset, 0, string.length);
            this.position = offset + string.length > this.position ? offset + string.length : this.position; // offset = string.length
          } else if (typeof Buffer !== 'undefined' && typeof string === 'string' && Buffer.isBuffer(this.buffer)) {
            this.buffer.write(string, offset, 'binary');
            this.position = offset + string.length > this.position ? offset + string.length : this.position; // offset = string.length;
          } else if (isUint8Array(string) || Array.isArray(string) && typeof string !== 'string') {
            for (var _i = 0; _i < string.length; _i++) {
              this.buffer[offset++] = string[_i];
            }

            this.position = offset > this.position ? offset : this.position;
          } else if (typeof string === 'string') {
            for (var _i2 = 0; _i2 < string.length; _i2++) {
              this.buffer[offset++] = string.charCodeAt(_i2);
            }

            this.position = offset > this.position ? offset : this.position;
          }
        }
        /**
         * Reads **length** bytes starting at **position**.
         *
         * @method
         * @param {number} position read from the given position in the Binary.
         * @param {number} length the number of bytes to read.
         * @return {Buffer}
         */

      }, {
        key: "read",
        value: function read(position, length) {
          length = length && length > 0 ? length : this.position; // Let's return the data based on the type we have

          if (this.buffer['slice']) {
            return this.buffer.slice(position, position + length);
          } // Create a buffer to keep the result


          var buffer$$1 = typeof Uint8Array !== 'undefined' ? new Uint8Array(new ArrayBuffer(length)) : new Array(length);

          for (var i = 0; i < length; i++) {
            buffer$$1[i] = this.buffer[position++];
          } // Return the buffer


          return buffer$$1;
        }
        /**
         * Returns the value of this binary as a string.
         *
         * @method
         * @return {string}
         */

      }, {
        key: "value",
        value: function value(asRaw) {
          asRaw = asRaw == null ? false : asRaw; // Optimize to serialize for the situation where the data == size of buffer

          if (asRaw && typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer) && this.buffer.length === this.position) return this.buffer; // If it's a node.js buffer object

          if (typeof Buffer !== 'undefined' && Buffer.isBuffer(this.buffer)) {
            return asRaw ? this.buffer.slice(0, this.position) : this.buffer.toString('binary', 0, this.position);
          } else {
            if (asRaw) {
              // we support the slice command use it
              if (this.buffer['slice'] != null) {
                return this.buffer.slice(0, this.position);
              } else {
                // Create a new buffer to copy content to
                var newBuffer = isUint8Array(this.buffer) ? new Uint8Array(new ArrayBuffer(this.position)) : new Array(this.position); // Copy content

                for (var i = 0; i < this.position; i++) {
                  newBuffer[i] = this.buffer[i];
                } // Return the buffer


                return newBuffer;
              }
            } else {
              return convertArraytoUtf8BinaryString(this.buffer, 0, this.position);
            }
          }
        }
        /**
         * Length.
         *
         * @method
         * @return {number} the length of the binary.
         */

      }, {
        key: "length",
        value: function length() {
          return this.position;
        }
        /**
         * @ignore
         */

      }, {
        key: "toJSON",
        value: function toJSON() {
          return this.buffer != null ? this.buffer.toString('base64') : '';
        }
        /**
         * @ignore
         */

      }, {
        key: "toString",
        value: function toString(format) {
          return this.buffer != null ? this.buffer.slice(0, this.position).toString(format) : '';
        }
        /**
         * @ignore
         */

      }, {
        key: "toExtendedJSON",
        value: function toExtendedJSON() {
          var base64String = Buffer.isBuffer(this.buffer) ? this.buffer.toString('base64') : Buffer.from(this.buffer).toString('base64');
          var subType = Number(this.sub_type).toString(16);
          return {
            $binary: {
              base64: base64String,
              subType: subType.length === 1 ? '0' + subType : subType
            }
          };
        }
        /**
         * @ignore
         */

      }], [{
        key: "fromExtendedJSON",
        value: function fromExtendedJSON(doc) {
          var type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;
          var data = new Buffer(doc.$binary.base64, 'base64');
          return new Binary(data, type);
        }
      }]);

      return Binary;
    }();
    /**
     * Binary default subtype
     * @ignore
     */


    var BSON_BINARY_SUBTYPE_DEFAULT = 0;

    function isUint8Array(obj) {
      return Object.prototype.toString.call(obj) === '[object Uint8Array]';
    }
    /**
     * @ignore
     */


    function writeStringToArray(data) {
      // Create a buffer
      var buffer$$1 = typeof Uint8Array !== 'undefined' ? new Uint8Array(new ArrayBuffer(data.length)) : new Array(data.length); // Write the content to the buffer

      for (var i = 0; i < data.length; i++) {
        buffer$$1[i] = data.charCodeAt(i);
      } // Write the string to the buffer


      return buffer$$1;
    }
    /**
     * Convert Array ot Uint8Array to Binary String
     *
     * @ignore
     */


    function convertArraytoUtf8BinaryString(byteArray, startIndex, endIndex) {
      var result = '';

      for (var i = startIndex; i < endIndex; i++) {
        result = result + String.fromCharCode(byteArray[i]);
      }

      return result;
    }

    Binary.BUFFER_SIZE = 256;
    /**
     * Default BSON type
     *
     * @classconstant SUBTYPE_DEFAULT
     **/

    Binary.SUBTYPE_DEFAULT = 0;
    /**
     * Function BSON type
     *
     * @classconstant SUBTYPE_DEFAULT
     **/

    Binary.SUBTYPE_FUNCTION = 1;
    /**
     * Byte Array BSON type
     *
     * @classconstant SUBTYPE_DEFAULT
     **/

    Binary.SUBTYPE_BYTE_ARRAY = 2;
    /**
     * OLD UUID BSON type
     *
     * @classconstant SUBTYPE_DEFAULT
     **/

    Binary.SUBTYPE_UUID_OLD = 3;
    /**
     * UUID BSON type
     *
     * @classconstant SUBTYPE_DEFAULT
     **/

    Binary.SUBTYPE_UUID = 4;
    /**
     * MD5 BSON type
     *
     * @classconstant SUBTYPE_DEFAULT
     **/

    Binary.SUBTYPE_MD5 = 5;
    /**
     * User BSON type
     *
     * @classconstant SUBTYPE_DEFAULT
     **/

    Binary.SUBTYPE_USER_DEFINED = 128;
    Object.defineProperty(Binary.prototype, '_bsontype', {
      value: 'Binary'
    });
    var binary = Binary;

    var constants = {
      // BSON MAX VALUES
      BSON_INT32_MAX: 0x7fffffff,
      BSON_INT32_MIN: -0x80000000,
      BSON_INT64_MAX: Math.pow(2, 63) - 1,
      BSON_INT64_MIN: -Math.pow(2, 63),
      // JS MAX PRECISE VALUES
      JS_INT_MAX: 0x20000000000000,
      // Any integer up to 2^53 can be precisely represented by a double.
      JS_INT_MIN: -0x20000000000000,
      // Any integer down to -2^53 can be precisely represented by a double.

      /**
       * Number BSON Type
       *
       * @classconstant BSON_DATA_NUMBER
       **/
      BSON_DATA_NUMBER: 1,

      /**
       * String BSON Type
       *
       * @classconstant BSON_DATA_STRING
       **/
      BSON_DATA_STRING: 2,

      /**
       * Object BSON Type
       *
       * @classconstant BSON_DATA_OBJECT
       **/
      BSON_DATA_OBJECT: 3,

      /**
       * Array BSON Type
       *
       * @classconstant BSON_DATA_ARRAY
       **/
      BSON_DATA_ARRAY: 4,

      /**
       * Binary BSON Type
       *
       * @classconstant BSON_DATA_BINARY
       **/
      BSON_DATA_BINARY: 5,

      /**
       * Binary BSON Type
       *
       * @classconstant BSON_DATA_UNDEFINED
       **/
      BSON_DATA_UNDEFINED: 6,

      /**
       * ObjectId BSON Type
       *
       * @classconstant BSON_DATA_OID
       **/
      BSON_DATA_OID: 7,

      /**
       * Boolean BSON Type
       *
       * @classconstant BSON_DATA_BOOLEAN
       **/
      BSON_DATA_BOOLEAN: 8,

      /**
       * Date BSON Type
       *
       * @classconstant BSON_DATA_DATE
       **/
      BSON_DATA_DATE: 9,

      /**
       * null BSON Type
       *
       * @classconstant BSON_DATA_NULL
       **/
      BSON_DATA_NULL: 10,

      /**
       * RegExp BSON Type
       *
       * @classconstant BSON_DATA_REGEXP
       **/
      BSON_DATA_REGEXP: 11,

      /**
       * Code BSON Type
       *
       * @classconstant BSON_DATA_DBPOINTER
       **/
      BSON_DATA_DBPOINTER: 12,

      /**
       * Code BSON Type
       *
       * @classconstant BSON_DATA_CODE
       **/
      BSON_DATA_CODE: 13,

      /**
       * Symbol BSON Type
       *
       * @classconstant BSON_DATA_SYMBOL
       **/
      BSON_DATA_SYMBOL: 14,

      /**
       * Code with Scope BSON Type
       *
       * @classconstant BSON_DATA_CODE_W_SCOPE
       **/
      BSON_DATA_CODE_W_SCOPE: 15,

      /**
       * 32 bit Integer BSON Type
       *
       * @classconstant BSON_DATA_INT
       **/
      BSON_DATA_INT: 16,

      /**
       * Timestamp BSON Type
       *
       * @classconstant BSON_DATA_TIMESTAMP
       **/
      BSON_DATA_TIMESTAMP: 17,

      /**
       * Long BSON Type
       *
       * @classconstant BSON_DATA_LONG
       **/
      BSON_DATA_LONG: 18,

      /**
       * Long BSON Type
       *
       * @classconstant BSON_DATA_DECIMAL128
       **/
      BSON_DATA_DECIMAL128: 19,

      /**
       * MinKey BSON Type
       *
       * @classconstant BSON_DATA_MIN_KEY
       **/
      BSON_DATA_MIN_KEY: 0xff,

      /**
       * MaxKey BSON Type
       *
       * @classconstant BSON_DATA_MAX_KEY
       **/
      BSON_DATA_MAX_KEY: 0x7f,

      /**
       * Binary Default Type
       *
       * @classconstant BSON_BINARY_SUBTYPE_DEFAULT
       **/
      BSON_BINARY_SUBTYPE_DEFAULT: 0,

      /**
       * Binary Function Type
       *
       * @classconstant BSON_BINARY_SUBTYPE_FUNCTION
       **/
      BSON_BINARY_SUBTYPE_FUNCTION: 1,

      /**
       * Binary Byte Array Type
       *
       * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY
       **/
      BSON_BINARY_SUBTYPE_BYTE_ARRAY: 2,

      /**
       * Binary UUID Type
       *
       * @classconstant BSON_BINARY_SUBTYPE_UUID
       **/
      BSON_BINARY_SUBTYPE_UUID: 3,

      /**
       * Binary MD5 Type
       *
       * @classconstant BSON_BINARY_SUBTYPE_MD5
       **/
      BSON_BINARY_SUBTYPE_MD5: 4,

      /**
       * Binary User Defined Type
       *
       * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED
       **/
      BSON_BINARY_SUBTYPE_USER_DEFINED: 128
    };

    // const Map = require('./map');

    /**
     * @namespace EJSON
     */
    // all the types where we don't need to do any special processing and can just pass the EJSON
    //straight to type.fromExtendedJSON


    var keysToCodecs = {
      $oid: objectid,
      $binary: binary,
      $symbol: symbol,
      $numberInt: int_32,
      $numberDecimal: decimal128,
      $numberDouble: double_1,
      $numberLong: long_1$1,
      $minKey: min_key,
      $maxKey: max_key,
      $regularExpression: regexp,
      $timestamp: timestamp
    };

    function deserializeValue(self, key, value, options) {
      if (typeof value === 'number') {
        if (options.relaxed) {
          return value;
        } // if it's an integer, should interpret as smallest BSON integer
        // that can represent it exactly. (if out of range, interpret as double.)


        if (Math.floor(value) === value) {
          if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) return new int_32(value);
          if (value >= BSON_INT64_MIN && value <= BSON_INT64_MAX) return new long_1$1.fromNumber(value);
        } // If the number is a non-integer or out of integer range, should interpret as BSON Double.


        return new double_1(value);
      } // from here on out we're looking for bson types, so bail if its not an object


      if (value == null || _typeof(value) !== 'object') return value; // upgrade deprecated undefined to null

      if (value.$undefined) return null;
      var keys = Object.keys(value).filter(function (k) {
        return k.startsWith('$') && value[k] != null;
      });

      for (var i = 0; i < keys.length; i++) {
        var c = keysToCodecs[keys[i]];
        if (c) return c.fromExtendedJSON(value, options);
      }

      if (value.$date != null) {
        var d = value.$date;
        var date = new Date();
        if (typeof d === 'string') date.setTime(Date.parse(d));else if (d instanceof long_1$1) date.setTime(d.toNumber());else if (typeof d === 'number' && options.relaxed) date.setTime(d);
        return date;
      }

      if (value.$code != null) {
        var copy = Object.assign({}, value);

        if (value.$scope) {
          copy.$scope = deserializeValue(self, null, value.$scope);
        }

        return code$1.fromExtendedJSON(value);
      }

      if (value.$ref != null || value.$dbPointer != null) {
        var v = value.$ref ? value : value.$dbPointer; // we run into this in a "degenerate EJSON" case (with $id and $ref order flipped)
        // because of the order JSON.parse goes through the document

        if (v instanceof db_ref) return v;
        var dollarKeys = Object.keys(v).filter(function (k) {
          return k.startsWith('$');
        });
        var valid = true;
        dollarKeys.forEach(function (k) {
          if (['$ref', '$id', '$db'].indexOf(k) === -1) valid = false;
        }); // only make DBRef if $ keys are all valid

        if (valid) return db_ref.fromExtendedJSON(v);
      }

      return value;
    }
    /**
     * Parse an Extended JSON string, constructing the JavaScript value or object described by that
     * string.
     *
     * @memberof EJSON
     * @param {string} text
     * @param {object} [options] Optional settings
     * @param {boolean} [options.relaxed=true] Attempt to return native JS types where possible, rather than BSON types (if true)
     * @return {object}
     *
     * @example
     * const { EJSON } = require('bson');
     * const text = '{ "int32": { "$numberInt": "10" } }';
     *
     * // prints { int32: { [String: '10'] _bsontype: 'Int32', value: '10' } }
     * console.log(EJSON.parse(text, { relaxed: false }));
     *
     * // prints { int32: 10 }
     * console.log(EJSON.parse(text));
     */


    function parse(text, options) {
      var _this = this;

      options = Object.assign({}, {
        relaxed: true
      }, options); // relaxed implies not strict

      if (typeof options.relaxed === 'boolean') options.strict = !options.relaxed;
      if (typeof options.strict === 'boolean') options.relaxed = !options.strict;
      return JSON.parse(text, function (key, value) {
        return deserializeValue(_this, key, value, options);
      });
    } //
    // Serializer
    //
    // MAX INT32 boundaries


    var BSON_INT32_MAX = 0x7fffffff,
        BSON_INT32_MIN = -0x80000000,
        BSON_INT64_MAX = 0x7fffffffffffffff,
        BSON_INT64_MIN = -0x8000000000000000;
    /**
     * Converts a BSON document to an Extended JSON string, optionally replacing values if a replacer
     * function is specified or optionally including only the specified properties if a replacer array
     * is specified.
     *
     * @memberof EJSON
     * @param {object} value The value to convert to extended JSON
     * @param {function|array} [replacer] A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string
     * @param {string|number} [space] A String or Number object that's used to insert white space into the output JSON string for readability purposes.
     * @param {object} [options] Optional settings
     * @param {boolean} [options.relaxed=true] Enabled Extended JSON's `relaxed` mode
     * @returns {string}
     *
     * @example
     * const { EJSON } = require('bson');
     * const Int32 = require('mongodb').Int32;
     * const doc = { int32: new Int32(10) };
     *
     * // prints '{"int32":{"$numberInt":"10"}}'
     * console.log(EJSON.stringify(doc, { relaxed: false }));
     *
     * // prints '{"int32":10}'
     * console.log(EJSON.stringify(doc));
     */

    function stringify(value, replacer, space, options) {
      if (space != null && _typeof(space) === 'object') options = space, space = 0;
      if (replacer != null && _typeof(replacer) === 'object') options = replacer, replacer = null, space = 0;
      options = Object.assign({}, {
        relaxed: true
      }, options);
      var doc = Array.isArray(value) ? serializeArray(value, options) : serializeDocument(value, options);
      return JSON.stringify(doc, replacer, space);
    }
    /**
     * Serializes an object to an Extended JSON string, and reparse it as a JavaScript object.
     *
     * @memberof EJSON
     * @param {object} bson The object to serialize
     * @param {object} [options] Optional settings passed to the `stringify` function
     * @return {object}
     */


    function serialize(bson, options) {
      options = options || {};
      return JSON.parse(stringify(bson, options));
    }
    /**
     * Deserializes an Extended JSON object into a plain JavaScript object with native/BSON types
     *
     * @memberof EJSON
     * @param {object} ejson The Extended JSON object to deserialize
     * @param {object} [options] Optional settings passed to the parse method
     * @return {object}
     */


    function deserialize(ejson, options) {
      options = options || {};
      return parse(JSON.stringify(ejson), options);
    }

    function serializeArray(array, options) {
      return array.map(function (v) {
        return serializeValue(v, options);
      });
    }

    function getISOString(date) {
      var isoStr = date.toISOString(); // we should only show milliseconds in timestamp if they're non-zero

      return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + 'Z';
    }

    function serializeValue(value, options) {
      if (Array.isArray(value)) return serializeArray(value, options);
      if (value === undefined) return null;

      if (value instanceof Date) {
        var dateNum = value.getTime(),
            // is it in year range 1970-9999?
        inRange = dateNum > -1 && dateNum < 253402318800000;
        return options.relaxed && inRange ? {
          $date: getISOString(value)
        } : {
          $date: {
            $numberLong: value.getTime().toString()
          }
        };
      }

      if (typeof value === 'number' && !options.relaxed) {
        // it's an integer
        if (Math.floor(value) === value) {
          var int32Range = value >= BSON_INT32_MIN && value <= BSON_INT32_MAX,
              int64Range = value >= BSON_INT64_MIN && value <= BSON_INT64_MAX; // interpret as being of the smallest BSON integer type that can represent the number exactly

          if (int32Range) return {
            $numberInt: value.toString()
          };
          if (int64Range) return {
            $numberLong: value.toString()
          };
        }

        return {
          $numberDouble: value.toString()
        };
      }

      if (value != null && _typeof(value) === 'object') return serializeDocument(value, options);
      return value;
    }

    function serializeDocument(doc, options) {
      if (doc == null || _typeof(doc) !== 'object') throw new Error('not an object instance'); // the document itself is a BSON type

      if (doc._bsontype && typeof doc.toExtendedJSON === 'function') {
        if (doc._bsontype === 'Code' && doc.scope) {
          doc.scope = serializeDocument(doc.scope, options);
        } else if (doc._bsontype === 'DBRef' && doc.oid) {
          doc.oid = serializeDocument(doc.oid, options);
        }

        return doc.toExtendedJSON(options);
      } // the document is an object with nested BSON types


      var _doc = {};

      for (var name in doc) {
        var val = doc[name];

        if (Array.isArray(val)) {
          _doc[name] = serializeArray(val, options);
        } else if (val != null && typeof val.toExtendedJSON === 'function') {
          if (val._bsontype === 'Code' && val.scope) {
            val.scope = serializeDocument(val.scope, options);
          } else if (val._bsontype === 'DBRef' && val.oid) {
            val.oid = serializeDocument(val.oid, options);
          }

          _doc[name] = val.toExtendedJSON(options);
        } else if (val instanceof Date) {
          _doc[name] = serializeValue(val, options);
        } else if (val != null && _typeof(val) === 'object') {
          _doc[name] = serializeDocument(val, options);
        }

        _doc[name] = serializeValue(val, options);

        if (val instanceof RegExp) {
          var flags = val.flags;

          if (flags === undefined) {
            flags = val.toString().match(/[gimuy]*$/)[0];
          }

          var rx = new regexp(val.source, flags);
          _doc[name] = rx.toExtendedJSON();
        }
      }

      return _doc;
    }

    var extended_json = {
      parse: parse,
      deserialize: deserialize,
      serialize: serialize,
      stringify: stringify
    };

    var FIRST_BIT = 0x80;
    var FIRST_TWO_BITS = 0xc0;
    var FIRST_THREE_BITS = 0xe0;
    var FIRST_FOUR_BITS = 0xf0;
    var FIRST_FIVE_BITS = 0xf8;
    var TWO_BIT_CHAR = 0xc0;
    var THREE_BIT_CHAR = 0xe0;
    var FOUR_BIT_CHAR = 0xf0;
    var CONTINUING_CHAR = 0x80;
    /**
     * Determines if the passed in bytes are valid utf8
     * @param {Buffer|Uint8Array} bytes An array of 8-bit bytes. Must be indexable and have length property
     * @param {Number} start The index to start validating
     * @param {Number} end The index to end validating
     * @returns {boolean} True if valid utf8
     */

    function validateUtf8(bytes, start, end) {
      var continuation = 0;

      for (var i = start; i < end; i += 1) {
        var byte = bytes[i];

        if (continuation) {
          if ((byte & FIRST_TWO_BITS) !== CONTINUING_CHAR) {
            return false;
          }

          continuation -= 1;
        } else if (byte & FIRST_BIT) {
          if ((byte & FIRST_THREE_BITS) === TWO_BIT_CHAR) {
            continuation = 1;
          } else if ((byte & FIRST_FOUR_BITS) === THREE_BIT_CHAR) {
            continuation = 2;
          } else if ((byte & FIRST_FIVE_BITS) === FOUR_BIT_CHAR) {
            continuation = 3;
          } else {
            return false;
          }
        }
      }

      return !continuation;
    }

    var validateUtf8_1 = validateUtf8;
    var validate_utf8 = {
      validateUtf8: validateUtf8_1
    };

    var Buffer$2 = buffer.Buffer;
    var validateUtf8$1 = validate_utf8.validateUtf8; // Internal long versions

    var JS_INT_MAX_LONG = long_1$1.fromNumber(constants.JS_INT_MAX);
    var JS_INT_MIN_LONG = long_1$1.fromNumber(constants.JS_INT_MIN);
    var functionCache = {};

    function deserialize$1(buffer$$1, options, isArray) {
      options = options == null ? {} : options;
      var index = options && options.index ? options.index : 0; // Read the document size

      var size = buffer$$1[index] | buffer$$1[index + 1] << 8 | buffer$$1[index + 2] << 16 | buffer$$1[index + 3] << 24;

      if (size < 5) {
        throw new Error("bson size must be >= 5, is ".concat(size));
      }

      if (options.allowObjectSmallerThanBufferSize && buffer$$1.length < size) {
        throw new Error("buffer length ".concat(buffer$$1.length, " must be >= bson size ").concat(size));
      }

      if (!options.allowObjectSmallerThanBufferSize && buffer$$1.length !== size) {
        throw new Error("buffer length ".concat(buffer$$1.length, " must === bson size ").concat(size));
      }

      if (size + index > buffer$$1.length) {
        throw new Error("(bson size ".concat(size, " + options.index ").concat(index, " must be <= buffer length ").concat(Buffer$2.byteLength(buffer$$1), ")"));
      } // Illegal end value


      if (buffer$$1[index + size - 1] !== 0) {
        throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");
      } // Start deserializtion


      return deserializeObject(buffer$$1, index, options, isArray);
    }

    function deserializeObject(buffer$$1, index, options, isArray) {
      var evalFunctions = options['evalFunctions'] == null ? false : options['evalFunctions'];
      var cacheFunctions = options['cacheFunctions'] == null ? false : options['cacheFunctions'];
      var cacheFunctionsCrc32 = options['cacheFunctionsCrc32'] == null ? false : options['cacheFunctionsCrc32'];
      if (!cacheFunctionsCrc32) var crc32 = null;
      var fieldsAsRaw = options['fieldsAsRaw'] == null ? null : options['fieldsAsRaw']; // Return raw bson buffer instead of parsing it

      var raw = options['raw'] == null ? false : options['raw']; // Return BSONRegExp objects instead of native regular expressions

      var bsonRegExp = typeof options['bsonRegExp'] === 'boolean' ? options['bsonRegExp'] : false; // Controls the promotion of values vs wrapper classes

      var promoteBuffers = options['promoteBuffers'] == null ? false : options['promoteBuffers'];
      var promoteLongs = options['promoteLongs'] == null ? true : options['promoteLongs'];
      var promoteValues = options['promoteValues'] == null ? true : options['promoteValues']; // Set the start index

      var startIndex = index; // Validate that we have at least 4 bytes of buffer

      if (buffer$$1.length < 5) throw new Error('corrupt bson message < 5 bytes long'); // Read the document size

      var size = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24; // Ensure buffer is valid size

      if (size < 5 || size > buffer$$1.length) throw new Error('corrupt bson message'); // Create holding object

      var object = isArray ? [] : {}; // Used for arrays to skip having to perform utf8 decoding

      var arrayIndex = 0;
      var done = false; // While we have more left data left keep parsing

      while (!done) {
        // Read the type
        var elementType = buffer$$1[index++]; // If we get a zero it's the last byte, exit

        if (elementType === 0) break; // Get the start search index

        var i = index; // Locate the end of the c string

        while (buffer$$1[i] !== 0x00 && i < buffer$$1.length) {
          i++;
        } // If are at the end of the buffer there is a problem with the document


        if (i >= Buffer$2.byteLength(buffer$$1)) throw new Error('Bad BSON Document: illegal CString');
        var name = isArray ? arrayIndex++ : buffer$$1.toString('utf8', index, i);
        index = i + 1;

        if (elementType === constants.BSON_DATA_STRING) {
          var stringSize = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;
          if (stringSize <= 0 || stringSize > buffer$$1.length - index || buffer$$1[index + stringSize - 1] !== 0) throw new Error('bad string length in bson');

          if (!validateUtf8$1(buffer$$1, index, index + stringSize - 1)) {
            throw new Error('Invalid UTF-8 string in BSON document');
          }

          var s = buffer$$1.toString('utf8', index, index + stringSize - 1);
          object[name] = s;
          index = index + stringSize;
        } else if (elementType === constants.BSON_DATA_OID) {
          var oid = Buffer$2.alloc(12);
          buffer$$1.copy(oid, 0, index, index + 12);
          object[name] = new objectid(oid);
          index = index + 12;
        } else if (elementType === constants.BSON_DATA_INT && promoteValues === false) {
          object[name] = new int_32(buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24);
        } else if (elementType === constants.BSON_DATA_INT) {
          object[name] = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;
        } else if (elementType === constants.BSON_DATA_NUMBER && promoteValues === false) {
          object[name] = new double_1(buffer$$1.readDoubleLE(index));
          index = index + 8;
        } else if (elementType === constants.BSON_DATA_NUMBER) {
          object[name] = buffer$$1.readDoubleLE(index);
          index = index + 8;
        } else if (elementType === constants.BSON_DATA_DATE) {
          var lowBits = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;
          var highBits = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;
          object[name] = new Date(new long_1$1(lowBits, highBits).toNumber());
        } else if (elementType === constants.BSON_DATA_BOOLEAN) {
          if (buffer$$1[index] !== 0 && buffer$$1[index] !== 1) throw new Error('illegal boolean type value');
          object[name] = buffer$$1[index++] === 1;
        } else if (elementType === constants.BSON_DATA_OBJECT) {
          var _index = index;
          var objectSize = buffer$$1[index] | buffer$$1[index + 1] << 8 | buffer$$1[index + 2] << 16 | buffer$$1[index + 3] << 24;
          if (objectSize <= 0 || objectSize > buffer$$1.length - index) throw new Error('bad embedded document length in bson'); // We have a raw value

          if (raw) {
            object[name] = buffer$$1.slice(index, index + objectSize);
          } else {
            object[name] = deserializeObject(buffer$$1, _index, options, false);
          }

          index = index + objectSize;
        } else if (elementType === constants.BSON_DATA_ARRAY) {
          var _index2 = index;

          var _objectSize = buffer$$1[index] | buffer$$1[index + 1] << 8 | buffer$$1[index + 2] << 16 | buffer$$1[index + 3] << 24;

          var arrayOptions = options; // Stop index

          var stopIndex = index + _objectSize; // All elements of array to be returned as raw bson

          if (fieldsAsRaw && fieldsAsRaw[name]) {
            arrayOptions = {};

            for (var n in options) {
              arrayOptions[n] = options[n];
            }

            arrayOptions['raw'] = true;
          }

          object[name] = deserializeObject(buffer$$1, _index2, arrayOptions, true);
          index = index + _objectSize;
          if (buffer$$1[index - 1] !== 0) throw new Error('invalid array terminator byte');
          if (index !== stopIndex) throw new Error('corrupted array bson');
        } else if (elementType === constants.BSON_DATA_UNDEFINED) {
          object[name] = undefined;
        } else if (elementType === constants.BSON_DATA_NULL) {
          object[name] = null;
        } else if (elementType === constants.BSON_DATA_LONG) {
          // Unpack the low and high bits
          var _lowBits = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;

          var _highBits = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;

          var long$$1 = new long_1$1(_lowBits, _highBits); // Promote the long if possible

          if (promoteLongs && promoteValues === true) {
            object[name] = long$$1.lessThanOrEqual(JS_INT_MAX_LONG) && long$$1.greaterThanOrEqual(JS_INT_MIN_LONG) ? long$$1.toNumber() : long$$1;
          } else {
            object[name] = long$$1;
          }
        } else if (elementType === constants.BSON_DATA_DECIMAL128) {
          // Buffer to contain the decimal bytes
          var bytes = Buffer$2.alloc(16); // Copy the next 16 bytes into the bytes buffer

          buffer$$1.copy(bytes, 0, index, index + 16); // Update index

          index = index + 16; // Assign the new Decimal128 value

          var decimal128$$1 = new decimal128(bytes); // If we have an alternative mapper use that

          object[name] = decimal128$$1.toObject ? decimal128$$1.toObject() : decimal128$$1;
        } else if (elementType === constants.BSON_DATA_BINARY) {
          var binarySize = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;
          var totalBinarySize = binarySize;
          var subType = buffer$$1[index++]; // Did we have a negative binary size, throw

          if (binarySize < 0) throw new Error('Negative binary type element size found'); // Is the length longer than the document

          if (binarySize > Buffer$2.byteLength(buffer$$1)) throw new Error('Binary type size larger than document size'); // Decode as raw Buffer object if options specifies it

          if (buffer$$1['slice'] != null) {
            // If we have subtype 2 skip the 4 bytes for the size
            if (subType === binary.SUBTYPE_BYTE_ARRAY) {
              binarySize = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;
              if (binarySize < 0) throw new Error('Negative binary type element size found for subtype 0x02');
              if (binarySize > totalBinarySize - 4) throw new Error('Binary type with subtype 0x02 contains to long binary size');
              if (binarySize < totalBinarySize - 4) throw new Error('Binary type with subtype 0x02 contains to short binary size');
            }

            if (promoteBuffers && promoteValues) {
              object[name] = buffer$$1.slice(index, index + binarySize);
            } else {
              object[name] = new binary(buffer$$1.slice(index, index + binarySize), subType);
            }
          } else {
            var _buffer = typeof Uint8Array !== 'undefined' ? new Uint8Array(new ArrayBuffer(binarySize)) : new Array(binarySize); // If we have subtype 2 skip the 4 bytes for the size


            if (subType === binary.SUBTYPE_BYTE_ARRAY) {
              binarySize = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;
              if (binarySize < 0) throw new Error('Negative binary type element size found for subtype 0x02');
              if (binarySize > totalBinarySize - 4) throw new Error('Binary type with subtype 0x02 contains to long binary size');
              if (binarySize < totalBinarySize - 4) throw new Error('Binary type with subtype 0x02 contains to short binary size');
            } // Copy the data


            for (i = 0; i < binarySize; i++) {
              _buffer[i] = buffer$$1[index + i];
            }

            if (promoteBuffers && promoteValues) {
              object[name] = _buffer;
            } else {
              object[name] = new binary(_buffer, subType);
            }
          } // Update the index


          index = index + binarySize;
        } else if (elementType === constants.BSON_DATA_REGEXP && bsonRegExp === false) {
          // Get the start search index
          i = index; // Locate the end of the c string

          while (buffer$$1[i] !== 0x00 && i < buffer$$1.length) {
            i++;
          } // If are at the end of the buffer there is a problem with the document


          if (i >= buffer$$1.length) throw new Error('Bad BSON Document: illegal CString'); // Return the C string

          var source = buffer$$1.toString('utf8', index, i); // Create the regexp

          index = i + 1; // Get the start search index

          i = index; // Locate the end of the c string

          while (buffer$$1[i] !== 0x00 && i < buffer$$1.length) {
            i++;
          } // If are at the end of the buffer there is a problem with the document


          if (i >= buffer$$1.length) throw new Error('Bad BSON Document: illegal CString'); // Return the C string

          var regExpOptions = buffer$$1.toString('utf8', index, i);
          index = i + 1; // For each option add the corresponding one for javascript

          var optionsArray = new Array(regExpOptions.length); // Parse options

          for (i = 0; i < regExpOptions.length; i++) {
            switch (regExpOptions[i]) {
              case 'm':
                optionsArray[i] = 'm';
                break;

              case 's':
                optionsArray[i] = 'g';
                break;

              case 'i':
                optionsArray[i] = 'i';
                break;
            }
          }

          object[name] = new RegExp(source, optionsArray.join(''));
        } else if (elementType === constants.BSON_DATA_REGEXP && bsonRegExp === true) {
          // Get the start search index
          i = index; // Locate the end of the c string

          while (buffer$$1[i] !== 0x00 && i < buffer$$1.length) {
            i++;
          } // If are at the end of the buffer there is a problem with the document


          if (i >= buffer$$1.length) throw new Error('Bad BSON Document: illegal CString'); // Return the C string

          var _source = buffer$$1.toString('utf8', index, i);

          index = i + 1; // Get the start search index

          i = index; // Locate the end of the c string

          while (buffer$$1[i] !== 0x00 && i < buffer$$1.length) {
            i++;
          } // If are at the end of the buffer there is a problem with the document


          if (i >= buffer$$1.length) throw new Error('Bad BSON Document: illegal CString'); // Return the C string

          var _regExpOptions = buffer$$1.toString('utf8', index, i);

          index = i + 1; // Set the object

          object[name] = new regexp(_source, _regExpOptions);
        } else if (elementType === constants.BSON_DATA_SYMBOL) {
          var _stringSize = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;

          if (_stringSize <= 0 || _stringSize > buffer$$1.length - index || buffer$$1[index + _stringSize - 1] !== 0) throw new Error('bad string length in bson'); // symbol is deprecated - upgrade to string.

          object[name] = buffer$$1.toString('utf8', index, index + _stringSize - 1);
          index = index + _stringSize;
        } else if (elementType === constants.BSON_DATA_TIMESTAMP) {
          var _lowBits2 = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;

          var _highBits2 = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;

          object[name] = new timestamp(_lowBits2, _highBits2);
        } else if (elementType === constants.BSON_DATA_MIN_KEY) {
          object[name] = new min_key();
        } else if (elementType === constants.BSON_DATA_MAX_KEY) {
          object[name] = new max_key();
        } else if (elementType === constants.BSON_DATA_CODE) {
          var _stringSize2 = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24;

          if (_stringSize2 <= 0 || _stringSize2 > buffer$$1.length - index || buffer$$1[index + _stringSize2 - 1] !== 0) throw new Error('bad string length in bson');
          var functionString = buffer$$1.toString('utf8', index, index + _stringSize2 - 1); // If we are evaluating the functions

          if (evalFunctions) {
            // If we have cache enabled let's look for the md5 of the function in the cache
            if (cacheFunctions) {
              var hash = cacheFunctionsCrc32 ? crc32(functionString) : functionString; // Got to do this to avoid V8 deoptimizing the call due to finding eval

              object[name] = isolateEvalWithHash(functionCache, hash, functionString, object);
            } else {
              object[name] = isolateEval(functionString);
            }
          } else {
            object[name] = new code$1(functionString);
          } // Update parse index position


          index = index + _stringSize2;
        } else if (elementType === constants.BSON_DATA_CODE_W_SCOPE) {
          var totalSize = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24; // Element cannot be shorter than totalSize + stringSize + documentSize + terminator

          if (totalSize < 4 + 4 + 4 + 1) {
            throw new Error('code_w_scope total size shorter minimum expected length');
          } // Get the code string size


          var _stringSize3 = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24; // Check if we have a valid string


          if (_stringSize3 <= 0 || _stringSize3 > buffer$$1.length - index || buffer$$1[index + _stringSize3 - 1] !== 0) throw new Error('bad string length in bson'); // Javascript function

          var _functionString = buffer$$1.toString('utf8', index, index + _stringSize3 - 1); // Update parse index position


          index = index + _stringSize3; // Parse the element

          var _index3 = index; // Decode the size of the object document

          var _objectSize2 = buffer$$1[index] | buffer$$1[index + 1] << 8 | buffer$$1[index + 2] << 16 | buffer$$1[index + 3] << 24; // Decode the scope object


          var scopeObject = deserializeObject(buffer$$1, _index3, options, false); // Adjust the index

          index = index + _objectSize2; // Check if field length is to short

          if (totalSize < 4 + 4 + _objectSize2 + _stringSize3) {
            throw new Error('code_w_scope total size is to short, truncating scope');
          } // Check if totalSize field is to long


          if (totalSize > 4 + 4 + _objectSize2 + _stringSize3) {
            throw new Error('code_w_scope total size is to long, clips outer document');
          } // If we are evaluating the functions


          if (evalFunctions) {
            // If we have cache enabled let's look for the md5 of the function in the cache
            if (cacheFunctions) {
              var _hash = cacheFunctionsCrc32 ? crc32(_functionString) : _functionString; // Got to do this to avoid V8 deoptimizing the call due to finding eval


              object[name] = isolateEvalWithHash(functionCache, _hash, _functionString, object);
            } else {
              object[name] = isolateEval(_functionString);
            }

            object[name].scope = scopeObject;
          } else {
            object[name] = new code$1(_functionString, scopeObject);
          }
        } else if (elementType === constants.BSON_DATA_DBPOINTER) {
          // Get the code string size
          var _stringSize4 = buffer$$1[index++] | buffer$$1[index++] << 8 | buffer$$1[index++] << 16 | buffer$$1[index++] << 24; // Check if we have a valid string


          if (_stringSize4 <= 0 || _stringSize4 > buffer$$1.length - index || buffer$$1[index + _stringSize4 - 1] !== 0) throw new Error('bad string length in bson'); // Namespace

          if (!validateUtf8$1(buffer$$1, index, index + _stringSize4 - 1)) {
            throw new Error('Invalid UTF-8 string in BSON document');
          }

          var namespace = buffer$$1.toString('utf8', index, index + _stringSize4 - 1); // Update parse index position

          index = index + _stringSize4; // Read the oid

          var oidBuffer = Buffer$2.alloc(12);
          buffer$$1.copy(oidBuffer, 0, index, index + 12);

          var _oid = new objectid(oidBuffer); // Update the index


          index = index + 12; // Upgrade to DBRef type

          object[name] = new db_ref(namespace, _oid);
        } else {
          throw new Error('Detected unknown BSON type ' + elementType.toString(16) + ' for fieldname "' + name + '", are you using the latest BSON parser?');
        }
      } // Check if the deserialization was against a valid array/object


      if (size !== index - startIndex) {
        if (isArray) throw new Error('corrupt array bson');
        throw new Error('corrupt object bson');
      } // check if object's $ keys are those of a DBRef


      var dollarKeys = Object.keys(object).filter(function (k) {
        return k.startsWith('$');
      });
      var valid = true;
      dollarKeys.forEach(function (k) {
        if (['$ref', '$id', '$db'].indexOf(k) === -1) valid = false;
      }); // if a $key not in "$ref", "$id", "$db", don't make a DBRef

      if (!valid) return object;

      if (object['$id'] != null && object['$ref'] != null) {
        var copy = Object.assign({}, object);
        delete copy.$ref;
        delete copy.$id;
        delete copy.$db;
        return new db_ref(object.$ref, object.$id, object.$db || null, copy);
      }

      return object;
    }
    /**
     * Ensure eval is isolated.
     *
     * @ignore
     * @api private
     */


    function isolateEvalWithHash(functionCache, hash, functionString, object) {
      // Contains the value we are going to set
      var value = null; // Check for cache hit, eval if missing and return cached function

      if (functionCache[hash] == null) {
        eval('value = ' + functionString);
        functionCache[hash] = value;
      } // Set the object


      return functionCache[hash].bind(object);
    }
    /**
     * Ensure eval is isolated.
     *
     * @ignore
     * @api private
     */


    function isolateEval(functionString) {
      // Contains the value we are going to set
      var value = null; // Eval the function

      eval('value = ' + functionString);
      return value;
    }

    var deserializer = deserialize$1;

    // All rights reserved.
    //
    // Redistribution and use in source and binary forms, with or without
    // modification, are permitted provided that the following conditions are met:
    //
    //  * Redistributions of source code must retain the above copyright notice,
    //    this list of conditions and the following disclaimer.
    //
    //  * Redistributions in binary form must reproduce the above copyright notice,
    //    this list of conditions and the following disclaimer in the documentation
    //    and/or other materials provided with the distribution.
    //
    //  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors
    //    may be used to endorse or promote products derived from this software
    //    without specific prior written permission.
    //
    // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    // ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
    // LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    // CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    // SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    // INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    // CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    // POSSIBILITY OF SUCH DAMAGE.
    //
    //
    // Modifications to writeIEEE754 to support negative zeroes made by Brian White

    function readIEEE754(buffer$$1, offset, endian, mLen, nBytes) {
      var e,
          m,
          bBE = endian === 'big',
          eLen = nBytes * 8 - mLen - 1,
          eMax = (1 << eLen) - 1,
          eBias = eMax >> 1,
          nBits = -7,
          i = bBE ? 0 : nBytes - 1,
          d = bBE ? 1 : -1,
          s = buffer$$1[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;

      for (; nBits > 0; e = e * 256 + buffer$$1[offset + i], i += d, nBits -= 8) {
      }

      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;

      for (; nBits > 0; m = m * 256 + buffer$$1[offset + i], i += d, nBits -= 8) {
      }

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }

      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    }

    function writeIEEE754(buffer$$1, value, offset, endian, mLen, nBytes) {
      var e,
          m,
          c,
          bBE = endian === 'big',
          eLen = nBytes * 8 - mLen - 1,
          eMax = (1 << eLen) - 1,
          eBias = eMax >> 1,
          rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
          i = bBE ? nBytes - 1 : 0,
          d = bBE ? -1 : 1,
          s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);

        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }

        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }

        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      if (isNaN(value)) m = 0;

      while (mLen >= 8) {
        buffer$$1[offset + i] = m & 0xff;
        i += d;
        m /= 256;
        mLen -= 8;
      }

      e = e << mLen | m;
      if (isNaN(value)) e += 8;
      eLen += mLen;

      while (eLen > 0) {
        buffer$$1[offset + i] = e & 0xff;
        i += d;
        e /= 256;
        eLen -= 8;
      }

      buffer$$1[offset + i - d] |= s * 128;
    }

    var float_parser = {
      readIEEE754: readIEEE754,
      writeIEEE754: writeIEEE754
    };

    var Buffer$3 = buffer.Buffer;
    var writeIEEE754$1 = float_parser.writeIEEE754;
    var normalizedFunctionString$1 = utils.normalizedFunctionString;
    var regexp$1 = /\x00/; // eslint-disable-line no-control-regex

    var ignoreKeys = new Set(['$db', '$ref', '$id', '$clusterTime']); // To ensure that 0.4 of node works correctly

    var isDate = function isDate(d) {
      return _typeof(d) === 'object' && Object.prototype.toString.call(d) === '[object Date]';
    };

    var isRegExp = function isRegExp(d) {
      return Object.prototype.toString.call(d) === '[object RegExp]';
    };

    function serializeString(buffer$$1, key, value, index, isArray) {
      // Encode String type
      buffer$$1[index++] = constants.BSON_DATA_STRING; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes + 1;
      buffer$$1[index - 1] = 0; // Write the string

      var size = buffer$$1.write(value, index + 4, 'utf8'); // Write the size of the string to buffer

      buffer$$1[index + 3] = size + 1 >> 24 & 0xff;
      buffer$$1[index + 2] = size + 1 >> 16 & 0xff;
      buffer$$1[index + 1] = size + 1 >> 8 & 0xff;
      buffer$$1[index] = size + 1 & 0xff; // Update index

      index = index + 4 + size; // Write zero

      buffer$$1[index++] = 0;
      return index;
    }

    function serializeNumber(buffer$$1, key, value, index, isArray) {
      // We have an integer value
      if (Math.floor(value) === value && value >= constants.JS_INT_MIN && value <= constants.JS_INT_MAX) {
        // If the value fits in 32 bits encode as int, if it fits in a double
        // encode it as a double, otherwise long
        if (value >= constants.BSON_INT32_MIN && value <= constants.BSON_INT32_MAX) {
          // Set int type 32 bits or less
          buffer$$1[index++] = constants.BSON_DATA_INT; // Number of written bytes

          var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

          index = index + numberOfWrittenBytes;
          buffer$$1[index++] = 0; // Write the int value

          buffer$$1[index++] = value & 0xff;
          buffer$$1[index++] = value >> 8 & 0xff;
          buffer$$1[index++] = value >> 16 & 0xff;
          buffer$$1[index++] = value >> 24 & 0xff;
        } else if (value >= constants.JS_INT_MIN && value <= constants.JS_INT_MAX) {
          // Encode as double
          buffer$$1[index++] = constants.BSON_DATA_NUMBER; // Number of written bytes

          var _numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name


          index = index + _numberOfWrittenBytes;
          buffer$$1[index++] = 0; // Write float

          writeIEEE754$1(buffer$$1, value, index, 'little', 52, 8); // Ajust index

          index = index + 8;
        } else {
          // Set long type
          buffer$$1[index++] = constants.BSON_DATA_LONG; // Number of written bytes

          var _numberOfWrittenBytes2 = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name


          index = index + _numberOfWrittenBytes2;
          buffer$$1[index++] = 0;
          var longVal = long_1$1.fromNumber(value);
          var lowBits = longVal.getLowBits();
          var highBits = longVal.getHighBits(); // Encode low bits

          buffer$$1[index++] = lowBits & 0xff;
          buffer$$1[index++] = lowBits >> 8 & 0xff;
          buffer$$1[index++] = lowBits >> 16 & 0xff;
          buffer$$1[index++] = lowBits >> 24 & 0xff; // Encode high bits

          buffer$$1[index++] = highBits & 0xff;
          buffer$$1[index++] = highBits >> 8 & 0xff;
          buffer$$1[index++] = highBits >> 16 & 0xff;
          buffer$$1[index++] = highBits >> 24 & 0xff;
        }
      } else {
        // Encode as double
        buffer$$1[index++] = constants.BSON_DATA_NUMBER; // Number of written bytes

        var _numberOfWrittenBytes3 = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name


        index = index + _numberOfWrittenBytes3;
        buffer$$1[index++] = 0; // Write float

        writeIEEE754$1(buffer$$1, value, index, 'little', 52, 8); // Ajust index

        index = index + 8;
      }

      return index;
    }

    function serializeNull(buffer$$1, key, value, index, isArray) {
      // Set long type
      buffer$$1[index++] = constants.BSON_DATA_NULL; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0;
      return index;
    }

    function serializeBoolean(buffer$$1, key, value, index, isArray) {
      // Write the type
      buffer$$1[index++] = constants.BSON_DATA_BOOLEAN; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0; // Encode the boolean value

      buffer$$1[index++] = value ? 1 : 0;
      return index;
    }

    function serializeDate(buffer$$1, key, value, index, isArray) {
      // Write the type
      buffer$$1[index++] = constants.BSON_DATA_DATE; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0; // Write the date

      var dateInMilis = long_1$1.fromNumber(value.getTime());
      var lowBits = dateInMilis.getLowBits();
      var highBits = dateInMilis.getHighBits(); // Encode low bits

      buffer$$1[index++] = lowBits & 0xff;
      buffer$$1[index++] = lowBits >> 8 & 0xff;
      buffer$$1[index++] = lowBits >> 16 & 0xff;
      buffer$$1[index++] = lowBits >> 24 & 0xff; // Encode high bits

      buffer$$1[index++] = highBits & 0xff;
      buffer$$1[index++] = highBits >> 8 & 0xff;
      buffer$$1[index++] = highBits >> 16 & 0xff;
      buffer$$1[index++] = highBits >> 24 & 0xff;
      return index;
    }

    function serializeRegExp(buffer$$1, key, value, index, isArray) {
      // Write the type
      buffer$$1[index++] = constants.BSON_DATA_REGEXP; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0;

      if (value.source && value.source.match(regexp$1) != null) {
        throw Error('value ' + value.source + ' must not contain null bytes');
      } // Adjust the index


      index = index + buffer$$1.write(value.source, index, 'utf8'); // Write zero

      buffer$$1[index++] = 0x00; // Write the parameters

      if (value.ignoreCase) buffer$$1[index++] = 0x69; // i

      if (value.global) buffer$$1[index++] = 0x73; // s

      if (value.multiline) buffer$$1[index++] = 0x6d; // m
      // Add ending zero

      buffer$$1[index++] = 0x00;
      return index;
    }

    function serializeBSONRegExp(buffer$$1, key, value, index, isArray) {
      // Write the type
      buffer$$1[index++] = constants.BSON_DATA_REGEXP; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0; // Check the pattern for 0 bytes

      if (value.pattern.match(regexp$1) != null) {
        // The BSON spec doesn't allow keys with null bytes because keys are
        // null-terminated.
        throw Error('pattern ' + value.pattern + ' must not contain null bytes');
      } // Adjust the index


      index = index + buffer$$1.write(value.pattern, index, 'utf8'); // Write zero

      buffer$$1[index++] = 0x00; // Write the options

      index = index + buffer$$1.write(value.options.split('').sort().join(''), index, 'utf8'); // Add ending zero

      buffer$$1[index++] = 0x00;
      return index;
    }

    function serializeMinMax(buffer$$1, key, value, index, isArray) {
      console.log({
        value: value,
        MinKey: min_key,
        isMinKey: value instanceof min_key
      }); // Write the type of either min or max key

      if (value === null) {
        buffer$$1[index++] = constants.BSON_DATA_NULL;
      } else if (value instanceof min_key) {
        buffer$$1[index++] = constants.BSON_DATA_MIN_KEY;
      } else {
        buffer$$1[index++] = constants.BSON_DATA_MAX_KEY;
      } // Number of written bytes


      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0;
      return index;
    }

    function serializeObjectId(buffer$$1, key, value, index, isArray) {
      // Write the type
      buffer$$1[index++] = constants.BSON_DATA_OID; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0; // Write the objectId into the shared buffer

      if (typeof value.id === 'string') {
        buffer$$1.write(value.id, index, 'binary');
      } else if (value.id && value.id.copy) {
        value.id.copy(buffer$$1, index, 0, 12);
      } else {
        throw new TypeError('object [' + JSON.stringify(value) + '] is not a valid ObjectId');
      } // Ajust index


      return index + 12;
    }

    function serializeBuffer(buffer$$1, key, value, index, isArray) {
      // Write the type
      buffer$$1[index++] = constants.BSON_DATA_BINARY; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0; // Get size of the buffer (current write point)

      var size = value.length; // Write the size of the string to buffer

      buffer$$1[index++] = size & 0xff;
      buffer$$1[index++] = size >> 8 & 0xff;
      buffer$$1[index++] = size >> 16 & 0xff;
      buffer$$1[index++] = size >> 24 & 0xff; // Write the default subtype

      buffer$$1[index++] = constants.BSON_BINARY_SUBTYPE_DEFAULT; // Copy the content form the binary field to the buffer

      value.copy(buffer$$1, index, 0, size); // Adjust the index

      index = index + size;
      return index;
    }

    function serializeObject(buffer$$1, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray, path) {
      for (var i = 0; i < path.length; i++) {
        if (path[i] === value) throw new Error('cyclic dependency detected');
      } // Push value to stack


      path.push(value); // Write the type

      buffer$$1[index++] = Array.isArray(value) ? constants.BSON_DATA_ARRAY : constants.BSON_DATA_OBJECT; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0;
      var endIndex = serializeInto(buffer$$1, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path); // Pop stack

      path.pop();
      return endIndex;
    }

    function serializeDecimal128(buffer$$1, key, value, index, isArray) {
      buffer$$1[index++] = constants.BSON_DATA_DECIMAL128; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0; // Write the data from the value

      value.bytes.copy(buffer$$1, index, 0, 16);
      return index + 16;
    }

    function serializeLong(buffer$$1, key, value, index, isArray) {
      // Write the type
      buffer$$1[index++] = value._bsontype === 'Long' ? constants.BSON_DATA_LONG : constants.BSON_DATA_TIMESTAMP; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0; // Write the date

      var lowBits = value.getLowBits();
      var highBits = value.getHighBits(); // Encode low bits

      buffer$$1[index++] = lowBits & 0xff;
      buffer$$1[index++] = lowBits >> 8 & 0xff;
      buffer$$1[index++] = lowBits >> 16 & 0xff;
      buffer$$1[index++] = lowBits >> 24 & 0xff; // Encode high bits

      buffer$$1[index++] = highBits & 0xff;
      buffer$$1[index++] = highBits >> 8 & 0xff;
      buffer$$1[index++] = highBits >> 16 & 0xff;
      buffer$$1[index++] = highBits >> 24 & 0xff;
      return index;
    }

    function serializeInt32(buffer$$1, key, value, index, isArray) {
      // Set int type 32 bits or less
      buffer$$1[index++] = constants.BSON_DATA_INT; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0; // Write the int value

      buffer$$1[index++] = value & 0xff;
      buffer$$1[index++] = value >> 8 & 0xff;
      buffer$$1[index++] = value >> 16 & 0xff;
      buffer$$1[index++] = value >> 24 & 0xff;
      return index;
    }

    function serializeDouble(buffer$$1, key, value, index, isArray) {
      // Encode as double
      buffer$$1[index++] = constants.BSON_DATA_NUMBER; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0; // Write float

      writeIEEE754$1(buffer$$1, value.value, index, 'little', 52, 8); // Adjust index

      index = index + 8;
      return index;
    }

    function serializeFunction(buffer$$1, key, value, index, checkKeys, depth, isArray) {
      buffer$$1[index++] = constants.BSON_DATA_CODE; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0; // Function string

      var functionString = normalizedFunctionString$1(value); // Write the string

      var size = buffer$$1.write(functionString, index + 4, 'utf8') + 1; // Write the size of the string to buffer

      buffer$$1[index] = size & 0xff;
      buffer$$1[index + 1] = size >> 8 & 0xff;
      buffer$$1[index + 2] = size >> 16 & 0xff;
      buffer$$1[index + 3] = size >> 24 & 0xff; // Update index

      index = index + 4 + size - 1; // Write zero

      buffer$$1[index++] = 0;
      return index;
    }

    function serializeCode(buffer$$1, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray) {
      if (value.scope && _typeof(value.scope) === 'object') {
        // Write the type
        buffer$$1[index++] = constants.BSON_DATA_CODE_W_SCOPE; // Number of written bytes

        var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

        index = index + numberOfWrittenBytes;
        buffer$$1[index++] = 0; // Starting index

        var startIndex = index; // Serialize the function
        // Get the function string

        var functionString = typeof value.code === 'string' ? value.code : value.code.toString(); // Index adjustment

        index = index + 4; // Write string into buffer

        var codeSize = buffer$$1.write(functionString, index + 4, 'utf8') + 1; // Write the size of the string to buffer

        buffer$$1[index] = codeSize & 0xff;
        buffer$$1[index + 1] = codeSize >> 8 & 0xff;
        buffer$$1[index + 2] = codeSize >> 16 & 0xff;
        buffer$$1[index + 3] = codeSize >> 24 & 0xff; // Write end 0

        buffer$$1[index + 4 + codeSize - 1] = 0; // Write the

        index = index + codeSize + 4; //
        // Serialize the scope value

        var endIndex = serializeInto(buffer$$1, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined);
        index = endIndex - 1; // Writ the total

        var totalSize = endIndex - startIndex; // Write the total size of the object

        buffer$$1[startIndex++] = totalSize & 0xff;
        buffer$$1[startIndex++] = totalSize >> 8 & 0xff;
        buffer$$1[startIndex++] = totalSize >> 16 & 0xff;
        buffer$$1[startIndex++] = totalSize >> 24 & 0xff; // Write trailing zero

        buffer$$1[index++] = 0;
      } else {
        buffer$$1[index++] = constants.BSON_DATA_CODE; // Number of written bytes

        var _numberOfWrittenBytes4 = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name


        index = index + _numberOfWrittenBytes4;
        buffer$$1[index++] = 0; // Function string

        var _functionString = value.code.toString(); // Write the string


        var size = buffer$$1.write(_functionString, index + 4, 'utf8') + 1; // Write the size of the string to buffer

        buffer$$1[index] = size & 0xff;
        buffer$$1[index + 1] = size >> 8 & 0xff;
        buffer$$1[index + 2] = size >> 16 & 0xff;
        buffer$$1[index + 3] = size >> 24 & 0xff; // Update index

        index = index + 4 + size - 1; // Write zero

        buffer$$1[index++] = 0;
      }

      return index;
    }

    function serializeBinary(buffer$$1, key, value, index, isArray) {
      // Write the type
      buffer$$1[index++] = constants.BSON_DATA_BINARY; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0; // Extract the buffer

      var data = value.value(true); // Calculate size

      var size = value.position; // Add the deprecated 02 type 4 bytes of size to total

      if (value.sub_type === binary.SUBTYPE_BYTE_ARRAY) size = size + 4; // Write the size of the string to buffer

      buffer$$1[index++] = size & 0xff;
      buffer$$1[index++] = size >> 8 & 0xff;
      buffer$$1[index++] = size >> 16 & 0xff;
      buffer$$1[index++] = size >> 24 & 0xff; // Write the subtype to the buffer

      buffer$$1[index++] = value.sub_type; // If we have binary type 2 the 4 first bytes are the size

      if (value.sub_type === binary.SUBTYPE_BYTE_ARRAY) {
        size = size - 4;
        buffer$$1[index++] = size & 0xff;
        buffer$$1[index++] = size >> 8 & 0xff;
        buffer$$1[index++] = size >> 16 & 0xff;
        buffer$$1[index++] = size >> 24 & 0xff;
      } // Write the data to the object


      data.copy(buffer$$1, index, 0, value.position); // Adjust the index

      index = index + value.position;
      return index;
    }

    function serializeSymbol(buffer$$1, key, value, index, isArray) {
      // Write the type
      buffer$$1[index++] = constants.BSON_DATA_SYMBOL; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0; // Write the string

      var size = buffer$$1.write(value.value, index + 4, 'utf8') + 1; // Write the size of the string to buffer

      buffer$$1[index] = size & 0xff;
      buffer$$1[index + 1] = size >> 8 & 0xff;
      buffer$$1[index + 2] = size >> 16 & 0xff;
      buffer$$1[index + 3] = size >> 24 & 0xff; // Update index

      index = index + 4 + size - 1; // Write zero

      buffer$$1[index++] = 0x00;
      return index;
    }

    function serializeDBRef(buffer$$1, key, value, index, depth, serializeFunctions, isArray) {
      // Write the type
      buffer$$1[index++] = constants.BSON_DATA_OBJECT; // Number of written bytes

      var numberOfWrittenBytes = !isArray ? buffer$$1.write(key, index, 'utf8') : buffer$$1.write(key, index, 'ascii'); // Encode the name

      index = index + numberOfWrittenBytes;
      buffer$$1[index++] = 0;
      var startIndex = index;
      var endIndex;
      var output = {
        $ref: value.collection,
        $id: value.oid
      };
      if (value.db != null) output.$db = value.db;
      output = Object.assign(output, value.fields);
      endIndex = serializeInto(buffer$$1, output, false, index, depth + 1, serializeFunctions); // Calculate object size

      var size = endIndex - startIndex; // Write the size

      buffer$$1[startIndex++] = size & 0xff;
      buffer$$1[startIndex++] = size >> 8 & 0xff;
      buffer$$1[startIndex++] = size >> 16 & 0xff;
      buffer$$1[startIndex++] = size >> 24 & 0xff; // Set index

      return endIndex;
    }

    function serializeInto(buffer$$1, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined, path) {
      startingIndex = startingIndex || 0;
      path = path || []; // Push the object to the path

      path.push(object); // Start place to serialize into

      var index = startingIndex + 4; // Special case isArray

      if (Array.isArray(object)) {
        // Get object keys
        for (var i = 0; i < object.length; i++) {
          var key = '' + i;
          var value = object[i]; // Is there an override value

          if (value && value.toBSON) {
            if (typeof value.toBSON !== 'function') throw new TypeError('toBSON is not a function');
            value = value.toBSON();
          }

          var type = _typeof(value);

          if (type === 'string') {
            index = serializeString(buffer$$1, key, value, index, true);
          } else if (type === 'number') {
            index = serializeNumber(buffer$$1, key, value, index, true);
          } else if (type === 'boolean') {
            index = serializeBoolean(buffer$$1, key, value, index, true);
          } else if (value instanceof Date || isDate(value)) {
            index = serializeDate(buffer$$1, key, value, index, true);
          } else if (value === undefined) {
            index = serializeNull(buffer$$1, key, value, index, true);
          } else if (value === null) {
            index = serializeNull(buffer$$1, key, value, index, true);
          } else if (value['_bsontype'] === 'ObjectId') {
            index = serializeObjectId(buffer$$1, key, value, index, true);
          } else if (Buffer$3.isBuffer(value)) {
            index = serializeBuffer(buffer$$1, key, value, index, true);
          } else if (value instanceof RegExp || isRegExp(value)) {
            index = serializeRegExp(buffer$$1, key, value, index, true);
          } else if (type === 'object' && value['_bsontype'] == null) {
            index = serializeObject(buffer$$1, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true, path);
          } else if (type === 'object' && value['_bsontype'] === 'Decimal128') {
            index = serializeDecimal128(buffer$$1, key, value, index, true);
          } else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {
            index = serializeLong(buffer$$1, key, value, index, true);
          } else if (value['_bsontype'] === 'Double') {
            index = serializeDouble(buffer$$1, key, value, index, true);
          } else if (typeof value === 'function' && serializeFunctions) {
            index = serializeFunction(buffer$$1, key, value, index, checkKeys, depth, serializeFunctions);
          } else if (value['_bsontype'] === 'Code') {
            index = serializeCode(buffer$$1, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true);
          } else if (value['_bsontype'] === 'Binary') {
            index = serializeBinary(buffer$$1, key, value, index, true);
          } else if (value['_bsontype'] === 'Symbol') {
            index = serializeSymbol(buffer$$1, key, value, index, true);
          } else if (value['_bsontype'] === 'DBRef') {
            index = serializeDBRef(buffer$$1, key, value, index, depth, serializeFunctions, true);
          } else if (value['_bsontype'] === 'BSONRegExp') {
            index = serializeBSONRegExp(buffer$$1, key, value, index, true);
          } else if (value['_bsontype'] === 'Int32') {
            index = serializeInt32(buffer$$1, key, value, index, true);
          } else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {
            index = serializeMinMax(buffer$$1, key, value, index, true);
          }
        }
      } else if (object instanceof map) {
        var iterator = object.entries();
        var done = false;

        while (!done) {
          // Unpack the next entry
          var entry = iterator.next();
          done = entry.done; // Are we done, then skip and terminate

          if (done) continue; // Get the entry values

          var _key = entry.value[0];
          var _value = entry.value[1]; // Check the type of the value

          var _type = _typeof(_value); // Check the key and throw error if it's illegal


          if (typeof _key === 'string' && !ignoreKeys.has(_key)) {
            if (_key.match(regexp$1) != null) {
              // The BSON spec doesn't allow keys with null bytes because keys are
              // null-terminated.
              throw Error('key ' + _key + ' must not contain null bytes');
            }

            if (checkKeys) {
              if ('$' === _key[0]) {
                throw Error('key ' + _key + " must not start with '$'");
              } else if (~_key.indexOf('.')) {
                throw Error('key ' + _key + " must not contain '.'");
              }
            }
          }

          if (_type === 'string') {
            index = serializeString(buffer$$1, _key, _value, index);
          } else if (_type === 'number') {
            index = serializeNumber(buffer$$1, _key, _value, index);
          } else if (_type === 'boolean') {
            index = serializeBoolean(buffer$$1, _key, _value, index);
          } else if (_value instanceof Date || isDate(_value)) {
            index = serializeDate(buffer$$1, _key, _value, index);
          } else if (_value === null || _value === undefined && ignoreUndefined === false) {
            index = serializeNull(buffer$$1, _key, _value, index);
          } else if (_value['_bsontype'] === 'ObjectId') {
            index = serializeObjectId(buffer$$1, _key, _value, index);
          } else if (Buffer$3.isBuffer(_value)) {
            index = serializeBuffer(buffer$$1, _key, _value, index);
          } else if (_value instanceof RegExp || isRegExp(_value)) {
            index = serializeRegExp(buffer$$1, _key, _value, index);
          } else if (_type === 'object' && _value['_bsontype'] == null) {
            index = serializeObject(buffer$$1, _key, _value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);
          } else if (_type === 'object' && _value['_bsontype'] === 'Decimal128') {
            index = serializeDecimal128(buffer$$1, _key, _value, index);
          } else if (_value['_bsontype'] === 'Long' || _value['_bsontype'] === 'Timestamp') {
            index = serializeLong(buffer$$1, _key, _value, index);
          } else if (_value['_bsontype'] === 'Double') {
            index = serializeDouble(buffer$$1, _key, _value, index);
          } else if (_value['_bsontype'] === 'Code') {
            index = serializeCode(buffer$$1, _key, _value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);
          } else if (typeof _value === 'function' && serializeFunctions) {
            index = serializeFunction(buffer$$1, _key, _value, index, checkKeys, depth, serializeFunctions);
          } else if (_value['_bsontype'] === 'Binary') {
            index = serializeBinary(buffer$$1, _key, _value, index);
          } else if (_value['_bsontype'] === 'Symbol') {
            index = serializeSymbol(buffer$$1, _key, _value, index);
          } else if (_value['_bsontype'] === 'DBRef') {
            index = serializeDBRef(buffer$$1, _key, _value, index, depth, serializeFunctions);
          } else if (_value['_bsontype'] === 'BSONRegExp') {
            index = serializeBSONRegExp(buffer$$1, _key, _value, index);
          } else if (_value['_bsontype'] === 'Int32') {
            index = serializeInt32(buffer$$1, _key, _value, index);
          } else if (_value['_bsontype'] === 'MinKey' || _value['_bsontype'] === 'MaxKey') {
            index = serializeMinMax(buffer$$1, _key, _value, index);
          }
        }
      } else {
        // Did we provide a custom serialization method
        if (object.toBSON) {
          if (typeof object.toBSON !== 'function') throw new TypeError('toBSON is not a function');
          object = object.toBSON();
          if (object != null && _typeof(object) !== 'object') throw new TypeError('toBSON function did not return an object');
        } // Iterate over all the keys


        for (var _key2 in object) {
          var _value2 = object[_key2]; // Is there an override value

          if (_value2 && _value2.toBSON) {
            if (typeof _value2.toBSON !== 'function') throw new TypeError('toBSON is not a function');
            _value2 = _value2.toBSON();
          } // Check the type of the value


          var _type2 = _typeof(_value2); // Check the key and throw error if it's illegal


          if (typeof _key2 === 'string' && !ignoreKeys.has(_key2)) {
            if (_key2.match(regexp$1) != null) {
              // The BSON spec doesn't allow keys with null bytes because keys are
              // null-terminated.
              throw Error('key ' + _key2 + ' must not contain null bytes');
            }

            if (checkKeys) {
              if ('$' === _key2[0]) {
                throw Error('key ' + _key2 + " must not start with '$'");
              } else if (~_key2.indexOf('.')) {
                throw Error('key ' + _key2 + " must not contain '.'");
              }
            }
          }

          if (_type2 === 'string') {
            index = serializeString(buffer$$1, _key2, _value2, index);
          } else if (_type2 === 'number') {
            index = serializeNumber(buffer$$1, _key2, _value2, index);
          } else if (_type2 === 'boolean') {
            index = serializeBoolean(buffer$$1, _key2, _value2, index);
          } else if (_value2 instanceof Date || isDate(_value2)) {
            index = serializeDate(buffer$$1, _key2, _value2, index);
          } else if (_value2 === undefined) {
            if (ignoreUndefined === false) index = serializeNull(buffer$$1, _key2, _value2, index);
          } else if (_value2 === null) {
            index = serializeNull(buffer$$1, _key2, _value2, index);
          } else if (_value2['_bsontype'] === 'ObjectId') {
            index = serializeObjectId(buffer$$1, _key2, _value2, index);
          } else if (Buffer$3.isBuffer(_value2)) {
            index = serializeBuffer(buffer$$1, _key2, _value2, index);
          } else if (_value2 instanceof RegExp || isRegExp(_value2)) {
            index = serializeRegExp(buffer$$1, _key2, _value2, index);
          } else if (_type2 === 'object' && _value2['_bsontype'] == null) {
            index = serializeObject(buffer$$1, _key2, _value2, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);
          } else if (_type2 === 'object' && _value2['_bsontype'] === 'Decimal128') {
            index = serializeDecimal128(buffer$$1, _key2, _value2, index);
          } else if (_value2['_bsontype'] === 'Long' || _value2['_bsontype'] === 'Timestamp') {
            index = serializeLong(buffer$$1, _key2, _value2, index);
          } else if (_value2['_bsontype'] === 'Double') {
            index = serializeDouble(buffer$$1, _key2, _value2, index);
          } else if (_value2['_bsontype'] === 'Code') {
            index = serializeCode(buffer$$1, _key2, _value2, index, checkKeys, depth, serializeFunctions, ignoreUndefined);
          } else if (typeof _value2 === 'function' && serializeFunctions) {
            index = serializeFunction(buffer$$1, _key2, _value2, index, checkKeys, depth, serializeFunctions);
          } else if (_value2['_bsontype'] === 'Binary') {
            index = serializeBinary(buffer$$1, _key2, _value2, index);
          } else if (_value2['_bsontype'] === 'Symbol') {
            index = serializeSymbol(buffer$$1, _key2, _value2, index);
          } else if (_value2['_bsontype'] === 'DBRef') {
            index = serializeDBRef(buffer$$1, _key2, _value2, index, depth, serializeFunctions);
          } else if (_value2['_bsontype'] === 'BSONRegExp') {
            index = serializeBSONRegExp(buffer$$1, _key2, _value2, index);
          } else if (_value2['_bsontype'] === 'Int32') {
            index = serializeInt32(buffer$$1, _key2, _value2, index);
          } else if (_value2['_bsontype'] === 'MinKey' || _value2['_bsontype'] === 'MaxKey') {
            index = serializeMinMax(buffer$$1, _key2, _value2, index);
          }
        }
      } // Remove the path


      path.pop(); // Final padding byte for object

      buffer$$1[index++] = 0x00; // Final size

      var size = index - startingIndex; // Write the size of the object

      buffer$$1[startingIndex++] = size & 0xff;
      buffer$$1[startingIndex++] = size >> 8 & 0xff;
      buffer$$1[startingIndex++] = size >> 16 & 0xff;
      buffer$$1[startingIndex++] = size >> 24 & 0xff;
      return index;
    }

    var serializer = serializeInto;

    var Buffer$4 = buffer.Buffer;
    var normalizedFunctionString$2 = utils.normalizedFunctionString; // To ensure that 0.4 of node works correctly

    function isDate$1(d) {
      return _typeof(d) === 'object' && Object.prototype.toString.call(d) === '[object Date]';
    }

    function calculateObjectSize(object, serializeFunctions, ignoreUndefined) {
      var totalLength = 4 + 1;

      if (Array.isArray(object)) {
        for (var i = 0; i < object.length; i++) {
          totalLength += calculateElement(i.toString(), object[i], serializeFunctions, true, ignoreUndefined);
        }
      } else {
        // If we have toBSON defined, override the current object
        if (object.toBSON) {
          object = object.toBSON();
        } // Calculate size


        for (var key in object) {
          totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);
        }
      }

      return totalLength;
    }
    /**
     * @ignore
     * @api private
     */


    function calculateElement(name, value, serializeFunctions, isArray, ignoreUndefined) {
      // If we have toBSON defined, override the current object
      if (value && value.toBSON) {
        value = value.toBSON();
      }

      switch (_typeof(value)) {
        case 'string':
          return 1 + Buffer$4.byteLength(name, 'utf8') + 1 + 4 + Buffer$4.byteLength(value, 'utf8') + 1;

        case 'number':
          if (Math.floor(value) === value && value >= constants.JS_INT_MIN && value <= constants.JS_INT_MAX) {
            if (value >= constants.BSON_INT32_MIN && value <= constants.BSON_INT32_MAX) {
              // 32 bit
              return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + (4 + 1);
            } else {
              return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);
            }
          } else {
            // 64 bit
            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);
          }

        case 'undefined':
          if (isArray || !ignoreUndefined) return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + 1;
          return 0;

        case 'boolean':
          return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + (1 + 1);

        case 'object':
          if (value == null || value instanceof min_key || value instanceof max_key || value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {
            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + 1;
          } else if (value instanceof objectid || value['_bsontype'] === 'ObjectId') {
            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + (12 + 1);
          } else if (value instanceof Date || isDate$1(value)) {
            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);
          } else if (typeof Buffer$4 !== 'undefined' && Buffer$4.isBuffer(value)) {
            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + (1 + 4 + 1) + value.length;
          } else if (value instanceof long_1$1 || value instanceof double_1 || value instanceof timestamp || value['_bsontype'] === 'Long' || value['_bsontype'] === 'Double' || value['_bsontype'] === 'Timestamp') {
            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);
          } else if (value instanceof decimal128 || value['_bsontype'] === 'Decimal128') {
            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + (16 + 1);
          } else if (value instanceof code$1 || value['_bsontype'] === 'Code') {
            // Calculate size depending on the availability of a scope
            if (value.scope != null && Object.keys(value.scope).length > 0) {
              return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + 1 + 4 + 4 + Buffer$4.byteLength(value.code.toString(), 'utf8') + 1 + calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined);
            } else {
              return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + 1 + 4 + Buffer$4.byteLength(value.code.toString(), 'utf8') + 1;
            }
          } else if (value instanceof binary || value['_bsontype'] === 'Binary') {
            // Check what kind of subtype we have
            if (value.sub_type === binary.SUBTYPE_BYTE_ARRAY) {
              return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + (value.position + 1 + 4 + 1 + 4);
            } else {
              return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + (value.position + 1 + 4 + 1);
            }
          } else if (value instanceof symbol || value['_bsontype'] === 'Symbol') {
            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + Buffer$4.byteLength(value.value, 'utf8') + 4 + 1 + 1;
          } else if (value instanceof db_ref || value['_bsontype'] === 'DBRef') {
            // Set up correct object for serialization
            var ordered_values = Object.assign({
              $ref: value.collection,
              $id: value.oid
            }, value.fields); // Add db reference if it exists

            if (value.db != null) {
              ordered_values['$db'] = value.db;
            }

            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + 1 + calculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined);
          } else if (value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]') {
            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + 1 + Buffer$4.byteLength(value.source, 'utf8') + 1 + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1;
          } else if (value instanceof regexp || value['_bsontype'] === 'BSONRegExp') {
            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + 1 + Buffer$4.byteLength(value.pattern, 'utf8') + 1 + Buffer$4.byteLength(value.options, 'utf8') + 1;
          } else {
            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + calculateObjectSize(value, serializeFunctions, ignoreUndefined) + 1;
          }

        case 'function':
          // WTF for 0.4.X where typeof /someregexp/ === 'function'
          if (value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]' || String.call(value) === '[object RegExp]') {
            return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + 1 + Buffer$4.byteLength(value.source, 'utf8') + 1 + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1;
          } else {
            if (serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {
              return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + 1 + 4 + 4 + Buffer$4.byteLength(normalizedFunctionString$2(value), 'utf8') + 1 + calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined);
            } else if (serializeFunctions) {
              return (name != null ? Buffer$4.byteLength(name, 'utf8') + 1 : 0) + 1 + 4 + Buffer$4.byteLength(normalizedFunctionString$2(value), 'utf8') + 1;
            }
          }

      }

      return 0;
    }

    var calculate_size = calculateObjectSize;

    var Buffer$5 = buffer.Buffer;
    /**
     * Makes sure that, if a Uint8Array is passed in, it is wrapped in a Buffer.
     *
     * @param {Buffer|Uint8Array} potentialBuffer The potential buffer
     * @returns {Buffer} the input if potentialBuffer is a buffer, or a buffer that
     * wraps a passed in Uint8Array
     * @throws {TypeError} If anything other than a Buffer or Uint8Array is passed in
     */

    var ensure_buffer = function ensureBuffer(potentialBuffer) {
      if (potentialBuffer instanceof Buffer$5) {
        return potentialBuffer;
      }

      if (potentialBuffer instanceof Uint8Array) {
        return Buffer$5.from(potentialBuffer.buffer);
      }

      throw new TypeError('Must use either Buffer or Uint8Array');
    };

    var Buffer$6 = buffer.Buffer; // Parts of the parser

    /**
     * @ignore
     */
    // Default Max Size

    var MAXSIZE = 1024 * 1024 * 17; // Current Internal Temporary Serialization Buffer

    var buffer$1 = Buffer$6.alloc(MAXSIZE);
    /**
     * Sets the size of the internal serialization buffer.
     *
     * @method
     * @param {number} size The desired size for the internal serialization buffer
     */

    function setInternalBufferSize(size) {
      // Resize the internal serialization buffer if needed
      if (buffer$1.length < size) {
        buffer$1 = Buffer$6.alloc(size);
      }
    }
    /**
     * Serialize a Javascript object.
     *
     * @param {Object} object the Javascript object to serialize.
     * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.
     * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.
     * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.
     * @return {Buffer} returns the Buffer object containing the serialized object.
     */


    function serialize$1(object, options) {
      options = options || {}; // Unpack the options

      var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;
      var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
      var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;
      var minInternalBufferSize = typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE; // Resize the internal serialization buffer if needed

      if (buffer$1.length < minInternalBufferSize) {
        buffer$1 = Buffer$6.alloc(minInternalBufferSize);
      } // Attempt to serialize


      var serializationIndex = serializer(buffer$1, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, []); // Create the final buffer

      var finishedBuffer = Buffer$6.alloc(serializationIndex); // Copy into the finished buffer

      buffer$1.copy(finishedBuffer, 0, 0, finishedBuffer.length); // Return the buffer

      return finishedBuffer;
    }
    /**
     * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.
     *
     * @param {Object} object the Javascript object to serialize.
     * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.
     * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.
     * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.
     * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.
     * @param {Number} [options.index] the index in the buffer where we wish to start serializing into.
     * @return {Number} returns the index pointing to the last written byte in the buffer.
     */


    function serializeWithBufferAndIndex(object, finalBuffer, options) {
      options = options || {}; // Unpack the options

      var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;
      var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
      var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;
      var startIndex = typeof options.index === 'number' ? options.index : 0; // Attempt to serialize

      var serializationIndex = serializer(buffer$1, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined);
      buffer$1.copy(finalBuffer, startIndex, 0, serializationIndex); // Return the index

      return startIndex + serializationIndex - 1;
    }
    /**
     * Deserialize data as BSON.
     *
     * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.
     * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.
     * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.
     * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.
     * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits
     * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.
     * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.
     * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.
     * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.
     * @param {boolean} [options.allowObjectSmallerThanBufferSize=false] allows the buffer to be larger than the parsed BSON object
     * @return {Object} returns the deserialized Javascript Object.
     */


    function deserialize$2(buffer$$1, options) {
      buffer$$1 = ensure_buffer(buffer$$1);
      return deserializer(buffer$$1, options);
    }
    /**
     * Calculate the bson size for a passed in Javascript object.
     *
     * @param {Object} object the Javascript object to calculate the BSON byte size for.
     * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.
     * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.
     * @return {Number} returns the number of bytes the BSON object will take up.
     */


    function calculateObjectSize$1(object, options) {
      options = options || {};
      var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
      var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;
      return calculate_size(object, serializeFunctions, ignoreUndefined);
    }
    /**
     * Deserialize stream data as BSON documents.
     *
     * @param {Buffer} data the buffer containing the serialized set of BSON documents.
     * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.
     * @param {Number} numberOfDocuments number of documents to deserialize.
     * @param {Array} documents an array where to store the deserialized documents.
     * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.
     * @param {Object} [options] additional options used for the deserialization.
     * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.
     * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.
     * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.
     * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits
     * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.
     * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.
     * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.
     * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.
     * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.
     */


    function deserializeStream(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {
      options = Object.assign({
        allowObjectSmallerThanBufferSize: true
      }, options);
      data = ensure_buffer(data);
      var index = startIndex; // Loop over all documents

      for (var i = 0; i < numberOfDocuments; i++) {
        // Find size of the document
        var size = data[index] | data[index + 1] << 8 | data[index + 2] << 16 | data[index + 3] << 24; // Update options with index

        options.index = index; // Parse the document at this point

        documents[docStartIndex + i] = deserializer(data, options); // Adjust index by the document size

        index = index + size;
      } // Return object containing end index of parsing and list of documents


      return index;
    }

    var bson = {
      // constants
      // NOTE: this is done this way because rollup can't resolve an `Object.assign`ed export
      BSON_INT32_MAX: constants.BSON_INT32_MAX,
      BSON_INT32_MIN: constants.BSON_INT32_MIN,
      BSON_INT64_MAX: constants.BSON_INT64_MAX,
      BSON_INT64_MIN: constants.BSON_INT64_MIN,
      JS_INT_MAX: constants.JS_INT_MAX,
      JS_INT_MIN: constants.JS_INT_MIN,
      BSON_DATA_NUMBER: constants.BSON_DATA_NUMBER,
      BSON_DATA_STRING: constants.BSON_DATA_STRING,
      BSON_DATA_OBJECT: constants.BSON_DATA_OBJECT,
      BSON_DATA_ARRAY: constants.BSON_DATA_ARRAY,
      BSON_DATA_BINARY: constants.BSON_DATA_BINARY,
      BSON_DATA_UNDEFINED: constants.BSON_DATA_UNDEFINED,
      BSON_DATA_OID: constants.BSON_DATA_OID,
      BSON_DATA_BOOLEAN: constants.BSON_DATA_BOOLEAN,
      BSON_DATA_DATE: constants.BSON_DATA_DATE,
      BSON_DATA_NULL: constants.BSON_DATA_NULL,
      BSON_DATA_REGEXP: constants.BSON_DATA_REGEXP,
      BSON_DATA_DBPOINTER: constants.BSON_DATA_DBPOINTER,
      BSON_DATA_CODE: constants.BSON_DATA_CODE,
      BSON_DATA_SYMBOL: constants.BSON_DATA_SYMBOL,
      BSON_DATA_CODE_W_SCOPE: constants.BSON_DATA_CODE_W_SCOPE,
      BSON_DATA_INT: constants.BSON_DATA_INT,
      BSON_DATA_TIMESTAMP: constants.BSON_DATA_TIMESTAMP,
      BSON_DATA_LONG: constants.BSON_DATA_LONG,
      BSON_DATA_DECIMAL128: constants.BSON_DATA_DECIMAL128,
      BSON_DATA_MIN_KEY: constants.BSON_DATA_MIN_KEY,
      BSON_DATA_MAX_KEY: constants.BSON_DATA_MAX_KEY,
      BSON_BINARY_SUBTYPE_DEFAULT: constants.BSON_BINARY_SUBTYPE_DEFAULT,
      BSON_BINARY_SUBTYPE_FUNCTION: constants.BSON_BINARY_SUBTYPE_FUNCTION,
      BSON_BINARY_SUBTYPE_BYTE_ARRAY: constants.BSON_BINARY_SUBTYPE_BYTE_ARRAY,
      BSON_BINARY_SUBTYPE_UUID: constants.BSON_BINARY_SUBTYPE_UUID,
      BSON_BINARY_SUBTYPE_MD5: constants.BSON_BINARY_SUBTYPE_MD5,
      BSON_BINARY_SUBTYPE_USER_DEFINED: constants.BSON_BINARY_SUBTYPE_USER_DEFINED,
      // wrapped types
      Code: code$1,
      Map: map,
      BSONSymbol: symbol,
      DBRef: db_ref,
      Binary: binary,
      ObjectId: objectid,
      Long: long_1$1,
      Timestamp: timestamp,
      Double: double_1,
      Int32: int_32,
      MinKey: min_key,
      MaxKey: max_key,
      BSONRegExp: regexp,
      Decimal128: decimal128,
      // methods
      serialize: serialize$1,
      serializeWithBufferAndIndex: serializeWithBufferAndIndex,
      deserialize: deserialize$2,
      calculateObjectSize: calculateObjectSize$1,
      deserializeStream: deserializeStream,
      setInternalBufferSize: setInternalBufferSize,
      // legacy support
      ObjectID: objectid,
      // Extended JSON
      EJSON: extended_json
    };
    var bson_38 = bson.ObjectId;
    var bson_54 = bson.EJSON;

    var base64 = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
         module.exports = factory(global)
            ;
    }((
        typeof self !== 'undefined' ? self
            : typeof window !== 'undefined' ? window
            : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal
    : commonjsGlobal
    ), function(global) {
        // existing version for noConflict()
        global = global || {};
        var _Base64 = global.Base64;
        var version = "2.6.4";
        // constants
        var b64chars
            = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        var b64tab = function(bin) {
            var t = {};
            for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
            return t;
        }(b64chars);
        var fromCharCode = String.fromCharCode;
        // encoder stuff
        var cb_utob = function(c) {
            if (c.length < 2) {
                var cc = c.charCodeAt(0);
                return cc < 0x80 ? c
                    : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))
                                    + fromCharCode(0x80 | (cc & 0x3f)))
                    : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))
                        + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                        + fromCharCode(0x80 | ( cc         & 0x3f)));
            } else {
                var cc = 0x10000
                    + (c.charCodeAt(0) - 0xD800) * 0x400
                    + (c.charCodeAt(1) - 0xDC00);
                return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
                        + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
                        + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                        + fromCharCode(0x80 | ( cc         & 0x3f)));
            }
        };
        var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
        var utob = function(u) {
            return u.replace(re_utob, cb_utob);
        };
        var cb_encode = function(ccc) {
            var padlen = [0, 2, 1][ccc.length % 3],
            ord = ccc.charCodeAt(0) << 16
                | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
                | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
            chars = [
                b64chars.charAt( ord >>> 18),
                b64chars.charAt((ord >>> 12) & 63),
                padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
                padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
            ];
            return chars.join('');
        };
        var btoa = global.btoa && typeof global.btoa == 'function'
            ? function(b){ return global.btoa(b) } : function(b) {
            if (b.match(/[^\x00-\xFF]/)) throw new RangeError(
                'The string contains invalid characters.'
            );
            return b.replace(/[\s\S]{1,3}/g, cb_encode);
        };
        var _encode = function(u) {
            return btoa(utob(String(u)));
        };
        var mkUriSafe = function (b64) {
            return b64.replace(/[+\/]/g, function(m0) {
                return m0 == '+' ? '-' : '_';
            }).replace(/=/g, '');
        };
        var encode = function(u, urisafe) {
            return urisafe ? mkUriSafe(_encode(u)) : _encode(u);
        };
        var encodeURI = function(u) { return encode(u, true) };
        var fromUint8Array;
        if (global.Uint8Array) fromUint8Array = function(a, urisafe) {
            // return btoa(fromCharCode.apply(null, a));
            var b64 = '';
            for (var i = 0, l = a.length; i < l; i += 3) {
                var a0 = a[i], a1 = a[i+1], a2 = a[i+2];
                var ord = a0 << 16 | a1 << 8 | a2;
                b64 +=    b64chars.charAt( ord >>> 18)
                    +     b64chars.charAt((ord >>> 12) & 63)
                    + ( typeof a1 != 'undefined'
                        ? b64chars.charAt((ord >>>  6) & 63) : '=')
                    + ( typeof a2 != 'undefined'
                        ? b64chars.charAt( ord         & 63) : '=');
            }
            return urisafe ? mkUriSafe(b64) : b64;
        };
        // decoder stuff
        var re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
        var cb_btou = function(cccc) {
            switch(cccc.length) {
            case 4:
                var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
                    |    ((0x3f & cccc.charCodeAt(1)) << 12)
                    |    ((0x3f & cccc.charCodeAt(2)) <<  6)
                    |     (0x3f & cccc.charCodeAt(3)),
                offset = cp - 0x10000;
                return (fromCharCode((offset  >>> 10) + 0xD800)
                        + fromCharCode((offset & 0x3FF) + 0xDC00));
            case 3:
                return fromCharCode(
                    ((0x0f & cccc.charCodeAt(0)) << 12)
                        | ((0x3f & cccc.charCodeAt(1)) << 6)
                        |  (0x3f & cccc.charCodeAt(2))
                );
            default:
                return  fromCharCode(
                    ((0x1f & cccc.charCodeAt(0)) << 6)
                        |  (0x3f & cccc.charCodeAt(1))
                );
            }
        };
        var btou = function(b) {
            return b.replace(re_btou, cb_btou);
        };
        var cb_decode = function(cccc) {
            var len = cccc.length,
            padlen = len % 4,
            n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)
                | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)
                | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)
                | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),
            chars = [
                fromCharCode( n >>> 16),
                fromCharCode((n >>>  8) & 0xff),
                fromCharCode( n         & 0xff)
            ];
            chars.length -= [0, 0, 2, 1][padlen];
            return chars.join('');
        };
        var _atob = global.atob && typeof global.atob == 'function'
            ? function(a){ return global.atob(a) } : function(a){
            return a.replace(/\S{1,4}/g, cb_decode);
        };
        var atob = function(a) {
            return _atob(String(a).replace(/[^A-Za-z0-9\+\/]/g, ''));
        };
        var _decode = function(a) { return btou(_atob(a)) };
        var _fromURI = function(a) {
            return String(a).replace(/[-_]/g, function(m0) {
                return m0 == '-' ? '+' : '/'
            }).replace(/[^A-Za-z0-9\+\/]/g, '');
        };
        var decode = function(a){
            return _decode(_fromURI(a));
        };
        var toUint8Array;
        if (global.Uint8Array) toUint8Array = function(a) {
            return Uint8Array.from(atob(_fromURI(a)), function(c) {
                return c.charCodeAt(0);
            });
        };
        var noConflict = function() {
            var Base64 = global.Base64;
            global.Base64 = _Base64;
            return Base64;
        };
        // export Base64
        global.Base64 = {
            VERSION: version,
            atob: atob,
            btoa: btoa,
            fromBase64: decode,
            toBase64: encode,
            utob: utob,
            encode: encode,
            encodeURI: encodeURI,
            btou: btou,
            decode: decode,
            noConflict: noConflict,
            fromUint8Array: fromUint8Array,
            toUint8Array: toUint8Array
        };
        // if ES5 is available, make Base64.extendString() available
        if (typeof Object.defineProperty === 'function') {
            var noEnum = function(v){
                return {value:v,enumerable:false,writable:true,configurable:true};
            };
            global.Base64.extendString = function () {
                Object.defineProperty(
                    String.prototype, 'fromBase64', noEnum(function () {
                        return decode(this)
                    }));
                Object.defineProperty(
                    String.prototype, 'toBase64', noEnum(function (urisafe) {
                        return encode(this, urisafe)
                    }));
                Object.defineProperty(
                    String.prototype, 'toBase64URI', noEnum(function () {
                        return encode(this, true)
                    }));
            };
        }
        //
        // export Base64 to the namespace
        //
        if (global['Meteor']) { // Meteor.js
            Base64 = global.Base64;
        }
        // module.exports and AMD are mutually exclusive.
        // module.exports has precedence.
        if ( module.exports) {
            module.exports.Base64 = global.Base64;
        }
        // that's it!
        return {Base64: global.Base64}
    }));
    });

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    /**
     * The type of a user.
     */
    var UserType;
    (function (UserType) {
        /**
         * A normal end-user created this user.
         */
        UserType["Normal"] = "normal";
        /**
         * The user was created by the server.
         */
        UserType["Server"] = "server";
    })(UserType || (UserType = {}));
    /** @ignore */
    var DataKey;
    (function (DataKey) {
        /** @ignore */
        DataKey["NAME"] = "name";
        /** @ignore */
        DataKey["EMAIL"] = "email";
        /** @ignore */
        DataKey["PICTURE"] = "picture";
        /** @ignore */
        DataKey["FIRST_NAME"] = "first_name";
        /** @ignore */
        DataKey["LAST_NAME"] = "last_name";
        /** @ignore */
        DataKey["GENDER"] = "gender";
        /** @ignore */
        DataKey["BIRTHDAY"] = "birthday";
        /** @ignore */
        DataKey["MIN_AGE"] = "min_age";
        /** @ignore */
        DataKey["MAX_AGE"] = "max_age";
    })(DataKey || (DataKey = {}));
    const DATA_MAPPING = {
        [DataKey.NAME]: "name",
        [DataKey.EMAIL]: "email",
        [DataKey.PICTURE]: "pictureUrl",
        [DataKey.FIRST_NAME]: "firstName",
        [DataKey.LAST_NAME]: "lastName",
        [DataKey.GENDER]: "gender",
        [DataKey.BIRTHDAY]: "birthday",
        [DataKey.MIN_AGE]: "minAge",
        [DataKey.MAX_AGE]: "maxAge",
    };
    /** @inheritdoc */
    class UserProfile {
        /**
         * @param response The response of a call fetching the users profile.
         */
        constructor(response) {
            /** @inheritdoc */
            this.type = UserType.Normal;
            /** @inheritdoc */
            this.identities = [];
            if (response) {
                if (typeof response.type === "string") {
                    this.type = response.type;
                }
                else {
                    throw new Error("Expected 'type' in the response body");
                }
                if (Array.isArray(response.identities)) {
                    this.identities = response.identities.map((identity) => {
                        return {
                            id: identity.id,
                            providerId: identity["provider_id"],
                            providerType: identity["provider_type"],
                        };
                    });
                }
                else {
                    throw new Error("Expected 'identities' in the response body");
                }
                const { data } = response;
                if (typeof data === "object") {
                    for (const key in DATA_MAPPING) {
                        const value = data[key];
                        const propertyName = DATA_MAPPING[key];
                        if (typeof value === "string" &&
                            propertyName !== "identities" &&
                            propertyName !== "type") {
                            this[propertyName] = value;
                        }
                    }
                }
                else {
                    throw new Error("Expected 'data' in the response body");
                }
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    /**
     * A `Storage` which will prefix a key part to every operation.
     */
    class PrefixedStorage {
        /**
         * Construct a `Storage` which will prefix a key part to every operation.
         *
         * @param storage The underlying storage to use for operations.
         * @param keyPart The part of the key to prefix when performing operations.
         */
        constructor(storage, keyPart) {
            this.storage = storage;
            this.keyPart = keyPart;
        }
        /** @inheritdoc */
        get(key) {
            return this.storage.get(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);
        }
        /** @inheritdoc */
        set(key, value) {
            return this.storage.set(this.keyPart + PrefixedStorage.PART_SEPARATOR + key, value);
        }
        /** @inheritdoc */
        remove(key) {
            return this.storage.remove(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);
        }
        /** @inheritdoc */
        prefix(keyPart) {
            return new PrefixedStorage(this, keyPart);
        }
        /** @inheritdoc */
        clear(prefix = "") {
            return this.storage.clear(this.keyPart + PrefixedStorage.PART_SEPARATOR + prefix);
        }
        /** @inheritdoc */
        addListener(listener) {
            return this.storage.addListener(listener);
        }
        /** @inheritdoc */
        removeListener(listener) {
            return this.storage.addListener(listener);
        }
    }
    /**
     * The string separating two parts.
     */
    PrefixedStorage.PART_SEPARATOR = ":";

    ////////////////////////////////////////////////////////////////////////////
    const ACCESS_TOKEN_STORAGE_KEY = "accessToken";
    const REFRESH_TOKEN_STORAGE_KEY = "refreshToken";
    const PROFILE_STORAGE_KEY = "profile";
    /**
     * Storage specific to the app.
     */
    class UserStorage extends PrefixedStorage {
        /**
         * Construct a storage for a `User`.
         *
         * @param storage The underlying storage to wrap.
         * @param userId The id of the user.
         */
        constructor(storage, userId) {
            super(storage, `user(${userId})`);
        }
        /**
         * Get the access token from storage.
         *
         * @returns Access token (null if unknown).
         */
        get accessToken() {
            return this.get(ACCESS_TOKEN_STORAGE_KEY);
        }
        /**
         * Set the access token in storage.
         *
         * @param value Access token (null if unknown).
         */
        set accessToken(value) {
            if (value === null) {
                this.remove(ACCESS_TOKEN_STORAGE_KEY);
            }
            else {
                this.set(ACCESS_TOKEN_STORAGE_KEY, value);
            }
        }
        /**
         * Get the refresh token from storage.
         *
         * @returns Refresh token (null if unknown and user is logged out).
         */
        get refreshToken() {
            return this.get(REFRESH_TOKEN_STORAGE_KEY);
        }
        /**
         * Set the refresh token in storage.
         *
         * @param value Refresh token (null if unknown and user is logged out).
         */
        set refreshToken(value) {
            if (value === null) {
                this.remove(REFRESH_TOKEN_STORAGE_KEY);
            }
            else {
                this.set(REFRESH_TOKEN_STORAGE_KEY, value);
            }
        }
        /**
         * Get the user profile from storage.
         *
         * @returns User profile (undefined if its unknown).
         */
        get profile() {
            const value = this.get(PROFILE_STORAGE_KEY);
            if (value) {
                const profile = new UserProfile();
                // Patch in the values
                Object.assign(profile, JSON.parse(value));
                return profile;
            }
        }
        /**
         * Set the user profile in storage.
         *
         * @param value User profile (undefined if its unknown).
         */
        set profile(value) {
            if (!value) {
                this.remove(PROFILE_STORAGE_KEY);
            }
            else {
                this.set(PROFILE_STORAGE_KEY, JSON.stringify(value));
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    const SERIALIZATION_OPTIONS = {
        relaxed: false,
    };
    /**
     * Serialize an object containing BSON types into extended-JSON.
     *
     * @param obj The object containing BSON types.
     * @returns The document in extended-JSON format.
     */
    function serialize$2(obj) {
        return bson_54.serialize(obj, SERIALIZATION_OPTIONS);
    }
    /**
     * De-serialize an object or an array of object from extended-JSON into an object or an array of object with BSON types.
     *
     * @param obj The object or array of objects in extended-JSON format.
     * @returns The object or array of objects with inflated BSON types.
     */
    function deserialize$3(obj) {
        if (Array.isArray(obj)) {
            return obj.map(doc => bson_54.deserialize(doc));
        }
        else {
            return bson_54.deserialize(obj);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    /**
     * @param obj The object to remove keys (and undefined values from)
     * @returns A new object without the keys where the value is undefined.
     */
    function removeKeysWithUndefinedValues(obj) {
        return Object.fromEntries(Object.entries(obj).filter(entry => typeof entry[1] !== "undefined"));
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * Generate a random sequence of characters.
     *
     * @param length The length of the string.
     * @param alphabet The alphabet of characters to pick from.
     * @returns A string of characters picked randomly from `alphabet`.
     */
    function generateRandomString(length, alphabet) {
        let result = "";
        for (let i = 0; i < length; i++) {
            result += alphabet[Math.floor(Math.random() * alphabet.length)];
        }
        return result;
    }
    /**
     * Encode an object mapping from string to string, into a query string to be appended a URL.
     *
     * @param params The parameters to include in the string.
     * @param prefixed Should the "?" prefix be added if values exists?
     * @returns A URL encoded representation of the parameters (omitting a "?" prefix).
     */
    function encodeQueryString(params, prefixed = true) {
        // Filter out undefined values
        const cleanedParams = removeKeysWithUndefinedValues(params);
        // Determine if a prefixed "?" is appropreate
        const prefix = prefixed && Object.keys(cleanedParams).length > 0 ? "?" : "";
        // Transform keys and values to a query string
        return (prefix +
            Object.entries(cleanedParams)
                .map(([k, v]) => `${k}=${encodeURIComponent(v)}`)
                .join("&"));
    }
    /**
     * Decodes a query string into an object.
     *
     * @param str The query string to decode.
     * @returns The decoded query string.
     */
    function decodeQueryString(str) {
        const cleanStr = str[0] === "?" ? str.substr(1) : str;
        return Object.fromEntries(cleanStr
            .split("&")
            .filter(s => s.length > 0)
            .map(kvp => kvp.split("="))
            .map(([k, v]) => [k, decodeURIComponent(v)]));
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * A list of names that functions cannot have to be callable through the functions proxy.
     */
    const RESERVED_NAMES = [
        "inspect",
        "callFunction",
        "callFunctionStreaming",
        // Methods defined on the Object.prototype might be "typeof probed" and called by libraries and runtime environments.
        ...Object.getOwnPropertyNames(Object.prototype),
    ];
    /**
     * Remove the key for any fields with undefined values.
     *
     * @param args The arguments to clean.
     * @returns The cleaned arguments.
     */
    function cleanArgs(args) {
        for (const arg of args) {
            if (typeof arg === "object") {
                for (const [key, value] of Object.entries(arg)) {
                    if (value === undefined) {
                        delete arg[key];
                    }
                }
            }
        }
        return args;
    }
    /**
     * Remove keys for any undefined values and serialize to EJSON.
     *
     * @param args The arguments to clean and serialize.
     * @returns The cleaned and serialized arguments.
     */
    function cleanArgsAndSerialize(args) {
        const cleaned = cleanArgs(args);
        return cleaned.map(arg => (typeof arg === "object" ? serialize$2(arg) : arg));
    }
    /**
     * Defines how functions are called.
     */
    class FunctionsFactory {
        /**
         * @param fetcher The underlying fetcher to use when sending requests.
         * @param config Additional configuration parameters.
         */
        constructor(fetcher, config = {}) {
            this.fetcher = fetcher;
            this.serviceName = config.serviceName;
            this.argsTransformation =
                config.argsTransformation || cleanArgsAndSerialize;
        }
        /**
         * Create a factory of functions, wrapped in a Proxy that returns bound copies of `callFunction` on any property.
         *
         * @param fetcher The underlying fetcher to use when requesting.
         * @param config Additional configuration parameters.
         * @returns The newly created factory of functions.
         */
        static create(fetcher, config = {}) {
            // Create a proxy, wrapping a simple object returning methods that calls functions
            // TODO: Lazily fetch available functions and return these from the ownKeys() trap
            const factory = new FunctionsFactory(fetcher, config);
            // Wrap the factory in a proxy that calls the internal call method
            return new Proxy(factory, {
                get(target, p, receiver) {
                    if (typeof p === "string" && RESERVED_NAMES.indexOf(p) === -1) {
                        return target.callFunction.bind(target, p);
                    }
                    else {
                        const prop = Reflect.get(target, p, receiver);
                        return typeof prop === "function"
                            ? prop.bind(target)
                            : prop;
                    }
                },
            });
        }
        /**
         * Call a remote function by it's name.
         *
         * @param name Name of the remote function.
         * @param args Arguments to pass to the remote function.
         * @returns A promise of the value returned when executing the remote function.
         */
        async callFunction(name, ...args) {
            // See https://github.com/mongodb/stitch-js-sdk/blob/master/packages/core/sdk/src/services/internal/CoreStitchServiceClientImpl.ts
            const body = {
                name,
                arguments: this.argsTransformation
                    ? this.argsTransformation(args)
                    : args,
            };
            if (this.serviceName) {
                body.service = this.serviceName;
            }
            const appRoute = this.fetcher.appRoute;
            return this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.functionsCall().path,
                body,
            });
        }
        /**
         * Call a remote function by it's name.
         *
         * @param name Name of the remote function.
         * @param args Arguments to pass to the remote function.
         * @returns A promise of the value returned when executing the remote function.
         */
        callFunctionStreaming(name, ...args) {
            const body = {
                name,
                arguments: this.argsTransformation
                    ? this.argsTransformation(args)
                    : args,
            };
            if (this.serviceName) {
                body.service = this.serviceName;
            }
            const appRoute = this.fetcher.appRoute;
            const qs = encodeQueryString({
                ["baas_request"]: Base64.encode(JSON.stringify(body)),
            });
            return this.fetcher.fetchStream({
                method: "GET",
                path: appRoute.functionsCall().path + qs,
            });
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    /** @inheritdoc */
    class EmailPasswordAuth {
        /**
         * Construct an interface to the email / password authentication provider.
         *
         * @param fetcher The underlying fetcher used to request the services.
         * @param providerName Optional custom name of the authentication provider.
         */
        constructor(fetcher, providerName = "local-userpass") {
            this.fetcher = fetcher;
            this.providerName = providerName;
        }
        /** @inheritdoc */
        async registerUser(email, password) {
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).register().path,
                body: { email, password },
            });
        }
        /** @inheritdoc */
        async confirmUser(token, tokenId) {
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).confirm().path,
                body: { token, tokenId },
            });
        }
        /** @inheritdoc */
        async resendConfirmationEmail(email) {
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).confirmSend()
                    .path,
                body: { email },
            });
        }
        /** @inheritdoc */
        async resetPassword(token, tokenId, password) {
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).reset().path,
                body: { token, tokenId, password },
            });
        }
        /** @inheritdoc */
        async sendResetPasswordEmail(email) {
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).resetSend()
                    .path,
                body: { email },
            });
        }
        /** @inheritdoc */
        async callResetPasswordFunction(email, password, ...args) {
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).resetCall()
                    .path,
                body: { email, password, arguments: args },
            });
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    /**
     * @returns The base api route.
     */
    function api() {
        return {
            path: "/api/client/v2.0",
            /**
             * @param appId The id of the app.
             * @returns The URL of the app endpoint.
             */
            app(appId) {
                return {
                    path: this.path + `/app/${appId}`,
                    /**
                     * @returns The URL of the app location endpoint.
                     */
                    location() {
                        return {
                            path: this.path + "/location",
                        };
                    },
                    /**
                     * @param providerName The name of the provider.
                     * @returns The app url concatinated with the /auth/providers/{providerName}
                     */
                    authProvider(providerName) {
                        return {
                            path: this.path + `/auth/providers/${providerName}`,
                            /**
                             * @returns Get the URL of an authentication provider.
                             */
                            login() {
                                return { path: this.path + "/login" };
                            },
                        };
                    },
                    /**
                     * @param providerName The name of the provider.
                     * @returns The app url concatinated with the /auth/providers/{providerName}
                     */
                    emailPasswordAuth(providerName) {
                        const authProviderRoutes = this.authProvider(providerName);
                        return {
                            ...authProviderRoutes,
                            register() {
                                return { path: this.path + "/register" };
                            },
                            confirm() {
                                return { path: this.path + "/confirm" };
                            },
                            confirmSend() {
                                return { path: this.path + "/confirm/send" };
                            },
                            reset() {
                                return { path: this.path + "/reset" };
                            },
                            resetSend() {
                                return { path: this.path + "/reset/send" };
                            },
                            resetCall() {
                                return { path: this.path + "/reset/call" };
                            },
                        };
                    },
                    functionsCall() {
                        return {
                            path: this.path + "/functions/call",
                        };
                    },
                };
            },
            auth() {
                return {
                    path: this.path + "/auth",
                    apiKeys() {
                        return {
                            path: this.path + "/api_keys",
                            key(id) {
                                return {
                                    path: this.path + `/${id}`,
                                    enable() {
                                        return { path: this.path + "/enable" };
                                    },
                                    disable() {
                                        return { path: this.path + "/disable" };
                                    },
                                };
                            },
                        };
                    },
                    profile() {
                        return { path: this.path + "/profile" };
                    },
                    session() {
                        return { path: this.path + "/session" };
                    },
                };
            },
        };
    }
    var routes = { api };

    ////////////////////////////////////////////////////////////////////////////
    /** @inheritdoc */
    class ApiKeyAuth {
        /**
         * Construct an interface to the API-key authentication provider.
         *
         * @param fetcher The fetcher used to send requests to services.
         * @param providerName Optional custom name of the authentication provider.
         */
        constructor(fetcher, providerName = "api-key") {
            this.fetcher = fetcher;
        }
        /** @inheritdoc */
        create(name) {
            return this.fetcher.fetchJSON({
                method: "POST",
                body: { name },
                path: routes.api().auth().apiKeys().path,
                tokenType: "refresh",
            });
        }
        /** @inheritdoc */
        fetch(keyId) {
            return this.fetcher.fetchJSON({
                method: "GET",
                path: routes.api().auth().apiKeys().key(keyId).path,
                tokenType: "refresh",
            });
        }
        /** @inheritdoc */
        fetchAll() {
            return this.fetcher.fetchJSON({
                method: "GET",
                tokenType: "refresh",
                path: routes.api().auth().apiKeys().path,
            });
        }
        /** @inheritdoc */
        async delete(keyId) {
            await this.fetcher.fetchJSON({
                method: "DELETE",
                path: routes.api().auth().apiKeys().key(keyId).path,
                tokenType: "refresh",
            });
        }
        /** @inheritdoc */
        async enable(keyId) {
            await this.fetcher.fetchJSON({
                method: "PUT",
                path: routes.api().auth().apiKeys().key(keyId).enable().path,
                tokenType: "refresh",
            });
        }
        /** @inheritdoc */
        async disable(keyId) {
            await this.fetcher.fetchJSON({
                method: "PUT",
                path: routes.api().auth().apiKeys().key(keyId).disable().path,
                tokenType: "refresh",
            });
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    let environment = null;
    /**
     * Set the environment of execution.
     * Note: This should be called as the first thing before executing any code which calls getEnvironment()
     *
     * @param e An object containing environment specific implementations.
     */
    function setEnvironment(e) {
        environment = e;
    }
    /**
     * Get the environment of execution.
     *
     * @returns An object containing environment specific implementations.
     */
    function getEnvironment() {
        if (environment) {
            return environment;
        }
        else {
            throw new Error("Cannot get environment before it's set");
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    /**
     * An error occured during the parsing of a watch stream.
     */
    class WatchError extends Error {
        constructor({ message, code }) {
            super(message);
            /**
             * The name of this type of error
             */
            this.name = "WatchError";
            this.code = code;
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    // NOTE: this is a fully processed event, not a single "data: foo" line!
    /**
     * The state of a WatchStream.
     */
    var WatchStreamState;
    (function (WatchStreamState) {
        /**
         * Need to call one of the feed functions.
         */
        WatchStreamState["NEED_DATA"] = "NEED_DATA";
        /**
         * Call nextEvent() to consume an event.
         */
        WatchStreamState["HAVE_EVENT"] = "HAVE_EVENT";
        /**
         * Call error().
         */
        WatchStreamState["HAVE_ERROR"] = "HAVE_ERROR";
    })(WatchStreamState || (WatchStreamState = {}));
    /**
     * Represents a stream of events
     */
    class WatchStream {
        constructor() {
            this._state = WatchStreamState.NEED_DATA;
            this._error = null;
            // Used by feedBuffer to construct lines
            this._textDecoder = new (getEnvironment().TextDecoder)();
            this._buffer = "";
            this._bufferOffset = 0;
            // Used by feedLine for building the next SSE
            this._eventType = "";
            this._dataBuffer = "";
        }
        // Call these when you have data, in whatever shape is easiest for your SDK to get.
        // Pick one, mixing and matching on a single instance isn't supported.
        // These can only be called in NEED_DATA state, which is the initial state.
        feedBuffer(buffer) {
            this.assertState(WatchStreamState.NEED_DATA);
            this._buffer += this._textDecoder.decode(buffer, { stream: true });
            this.advanceBufferState();
        }
        feedLine(line) {
            this.assertState(WatchStreamState.NEED_DATA);
            // This is an implementation of the algorithm described at
            // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation.
            // Currently the server does not use id or retry lines, so that processing isn't implemented.
            // ignore trailing LF if not removed by SDK.
            if (line.endsWith("\n"))
                line = line.substr(0, line.length - 1);
            // ignore trailing CR from CRLF
            if (line.endsWith("\r"))
                line = line.substr(0, line.length - 1);
            if (line.length === 0) {
                // This is the "dispatch the event" portion of the algorithm.
                if (this._dataBuffer.length === 0) {
                    this._eventType = "";
                    return;
                }
                if (this._dataBuffer.endsWith("\n"))
                    this._dataBuffer = this._dataBuffer.substr(0, this._dataBuffer.length - 1);
                this.feedSse({
                    data: this._dataBuffer,
                    eventType: this._eventType,
                });
                this._dataBuffer = "";
                this._eventType = "";
            }
            if (line[0] === ":")
                return;
            const colon = line.indexOf(":");
            const field = line.substr(0, colon);
            let value = colon === -1 ? "" : line.substr(colon + 1);
            if (value.startsWith(" "))
                value = value.substr(1);
            if (field === "event") {
                this._eventType = value;
            }
            else if (field === "data") {
                this._dataBuffer += value;
                this._dataBuffer += "\n";
            }
            else ;
        }
        feedSse(sse) {
            this.assertState(WatchStreamState.NEED_DATA);
            const firstPercentIndex = sse.data.indexOf("%");
            if (firstPercentIndex !== -1) {
                // For some reason, the stich server decided to add percent-encoding for '%', '\n', and '\r' to its
                // event-stream replies. But it isn't real urlencoding, since most characters pass through, so we can't use
                // uri_percent_decode() here.
                let buffer = "";
                let start = 0;
                for (let percentIndex = firstPercentIndex; percentIndex !== -1; percentIndex = sse.data.indexOf("%", start)) {
                    buffer += sse.data.substr(start, percentIndex - start);
                    const encoded = sse.data.substr(percentIndex, 3); // may be smaller than 3 if string ends with %
                    if (encoded === "%25") {
                        buffer += "%";
                    }
                    else if (encoded === "%0A") {
                        buffer += "\x0A"; // '\n'
                    }
                    else if (encoded === "%0D") {
                        buffer += "\x0D"; // '\r'
                    }
                    else {
                        buffer += encoded; // propagate as-is
                    }
                    start = percentIndex + encoded.length;
                }
                // Advance the buffer with the last part
                buffer += sse.data.substr(start);
                sse.data = buffer;
            }
            if (!sse.eventType || sse.eventType === "message") {
                try {
                    const parsed = bson_54.parse(sse.data);
                    if (typeof parsed === "object") {
                        // ???
                        this._nextEvent = parsed;
                        this._state = WatchStreamState.HAVE_EVENT;
                        return;
                    }
                }
                catch {
                    // fallthrough to same handling as for non-document value.
                }
                this._state = WatchStreamState.HAVE_ERROR;
                this._error = new WatchError({
                    message: "server returned malformed event: " + sse.data,
                    code: "bad bson parse",
                });
            }
            else if (sse.eventType === "error") {
                this._state = WatchStreamState.HAVE_ERROR;
                // default error message if we have issues parsing the reply.
                this._error = new WatchError({
                    message: sse.data,
                    code: "unknown",
                });
                try {
                    const { error_code: errorCode, error } = bson_54.parse(sse.data);
                    if (typeof errorCode !== "string")
                        return;
                    if (typeof error !== "string")
                        return;
                    // XXX in realm-js, object-store will error if the error_code is not one of the known
                    // error code enum values.
                    this._error = new WatchError({
                        message: error,
                        code: errorCode,
                    });
                }
                catch {
                    return; // Use the default state.
                }
            }
            else ;
        }
        get state() {
            return this._state;
        }
        // Consumes the returned event. If you used feedBuffer(), there may be another event or error after this one,
        // so you need to call state() again to see what to do next.
        nextEvent() {
            this.assertState(WatchStreamState.HAVE_EVENT);
            // We can use "as ChangeEvent<T>" since we just asserted the state.
            const out = this._nextEvent;
            this._state = WatchStreamState.NEED_DATA;
            this.advanceBufferState();
            return out;
        }
        // Once this enters the error state, it stays that way. You should not feed any more data.
        get error() {
            return this._error;
        }
        ////////////////////////////////////////////
        advanceBufferState() {
            this.assertState(WatchStreamState.NEED_DATA);
            while (this.state === WatchStreamState.NEED_DATA) {
                if (this._bufferOffset === this._buffer.length) {
                    this._buffer = "";
                    this._bufferOffset = 0;
                    return;
                }
                // NOTE not supporting CR-only newlines, just LF and CRLF.
                const nextNewlineIndex = this._buffer.indexOf("\n", this._bufferOffset);
                if (nextNewlineIndex === -1) {
                    // We have a partial line.
                    if (this._bufferOffset !== 0) {
                        // Slide the partial line down to the front of the buffer.
                        this._buffer = this._buffer.substr(this._bufferOffset, this._buffer.length - this._bufferOffset);
                        this._bufferOffset = 0;
                    }
                    return;
                }
                this.feedLine(this._buffer.substr(this._bufferOffset, nextNewlineIndex - this._bufferOffset));
                this._bufferOffset = nextNewlineIndex + 1; // Advance past this line, including its newline.
            }
        }
        assertState(state) {
            if (this._state !== state) {
                throw Error(`Expected WatchStream to be in state ${state}, but in state ${this._state}`);
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * A remote collection of documents.
     */
    class MongoDBCollection {
        /**
         * Construct a remote collection of documents.
         *
         * @param fetcher The fetcher to use when requesting the service.
         * @param serviceName The name of the remote service.
         * @param databaseName The name of the database.
         * @param collectionName The name of the remote collection.
         */
        constructor(fetcher, serviceName, databaseName, collectionName) {
            this.functions = FunctionsFactory.create(fetcher, {
                serviceName,
            });
            this.databaseName = databaseName;
            this.collectionName = collectionName;
            this.serviceName = serviceName;
            this.fetcher = fetcher;
        }
        /** @inheritdoc */
        find(filter = {}, options = {}) {
            return this.functions.find({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
                project: options.projection,
                sort: options.sort,
                limit: options.limit,
            });
        }
        /** @inheritdoc */
        findOne(filter = {}, options = {}) {
            return this.functions.findOne({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
                project: options.projection,
                sort: options.sort,
            });
        }
        /** @inheritdoc */
        findOneAndUpdate(filter = {}, update, options = {}) {
            return this.functions.findOneAndUpdate({
                database: this.databaseName,
                collection: this.collectionName,
                filter,
                update,
                sort: options.sort,
                projection: options.projection,
                upsert: options.upsert,
                returnNewDocument: options.returnNewDocument,
            });
        }
        /** @inheritdoc */
        findOneAndReplace(filter = {}, replacement, options = {}) {
            return this.functions.findOneAndReplace({
                database: this.databaseName,
                collection: this.collectionName,
                filter: filter,
                update: replacement,
                sort: options.sort,
                projection: options.projection,
                upsert: options.upsert,
                returnNewDocument: options.returnNewDocument,
            });
        }
        /** @inheritdoc */
        findOneAndDelete(filter = {}, options = {}) {
            return this.functions.findOneAndReplace({
                database: this.databaseName,
                collection: this.collectionName,
                filter,
                sort: options.sort,
                projection: options.projection,
            });
        }
        /** @inheritdoc */
        aggregate(pipeline) {
            return this.functions.aggregate({
                database: this.databaseName,
                collection: this.collectionName,
                pipeline,
            });
        }
        /** @inheritdoc */
        count(filter = {}, options = {}) {
            return this.functions.count({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
                limit: options.limit,
            });
        }
        /** @inheritdoc */
        insertOne(document) {
            return this.functions.insertOne({
                database: this.databaseName,
                collection: this.collectionName,
                document,
            });
        }
        /** @inheritdoc */
        insertMany(documents) {
            return this.functions.insertMany({
                database: this.databaseName,
                collection: this.collectionName,
                documents,
            });
        }
        /** @inheritdoc */
        deleteOne(filter = {}) {
            return this.functions.deleteOne({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
            });
        }
        /** @inheritdoc */
        deleteMany(filter = {}) {
            return this.functions.deleteMany({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
            });
        }
        /** @inheritdoc */
        updateOne(filter, update, options = {}) {
            return this.functions.updateOne({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
                update,
                upsert: options.upsert,
            });
        }
        /** @inheritdoc */
        updateMany(filter, update, options = {}) {
            return this.functions.updateMany({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
                update,
                upsert: options.upsert,
            });
        }
        async *watch({ ids, filter, } = {}) {
            const iterator = await this.functions.callFunctionStreaming("watch", {
                database: this.databaseName,
                collection: this.collectionName,
                ids,
                filter,
            });
            const watchStream = new WatchStream();
            for await (const chunk of iterator) {
                if (!chunk)
                    continue;
                watchStream.feedBuffer(chunk);
                while (watchStream.state == WatchStreamState.HAVE_EVENT) {
                    yield watchStream.nextEvent();
                }
                if (watchStream.state == WatchStreamState.HAVE_ERROR)
                    // XXX this is just throwing an error like {error_code: "BadRequest, error: "message"},
                    // which matches realm-js, but is different from how errors are handled in realm-web
                    throw watchStream.error;
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * Creates an Remote MongoDB Collection.
     * Note: This method exists to enable function binding.
     *
     * @param fetcher The underlying fetcher.
     * @param serviceName A service name.
     * @param databaseName A database name.
     * @param collectionName A collection name.
     * @returns The collection.
     */
    function createCollection(fetcher, serviceName, databaseName, collectionName) {
        return new MongoDBCollection(fetcher, serviceName, databaseName, collectionName);
    }
    /**
     * Creates a Remote MongoDB Database.
     * Note: This method exists to enable function binding.
     *
     * @param fetcher The underlying fetcher
     * @param serviceName A service name
     * @param databaseName A database name
     * @returns The database.
     */
    function createDatabase(fetcher, serviceName, databaseName) {
        return {
            collection: createCollection.bind(null, fetcher, serviceName, databaseName),
        };
    }
    /**
     * Creates a Remote MongoDB Service.
     * Note: This method exists to enable function binding.
     *
     * @param fetcher The underlying fetcher.
     * @param serviceName An optional service name.
     * @returns The service.
     */
    function createService(fetcher, serviceName = "mongo-db") {
        return { db: createDatabase.bind(null, fetcher, serviceName) };
    }

    ////////////////////////////////////////////////////////////////////////////
    const DEFAULT_DEVICE_ID = "000000000000000000000000";
    (function (UserState) {
        /** Active, with both access and refresh tokens */
        UserState["Active"] = "active";
        /** Logged out, but there might still be data persisted about the user, in the browser. */
        UserState["LoggedOut"] = "logged-out";
        /** Logged out and all data about the user has been removed. */
        UserState["Removed"] = "removed";
    })(exports.UserState || (exports.UserState = {}));
    (function (UserType) {
        /** Created by the user itself. */
        UserType["Normal"] = "normal";
        /** Created by an administrator of the app. */
        UserType["Server"] = "server";
    })(exports.UserType || (exports.UserType = {}));
    /**
     * Representation of an authenticated user of an app.
     */
    class User {
        /**
         * @param parameters Parameters of the user.
         */
        constructor({ app, id, accessToken, refreshToken }) {
            this.app = app;
            this._id = id;
            this._accessToken = accessToken;
            this._refreshToken = refreshToken;
            this.fetcher = app.fetcher.clone({
                userContext: { currentUser: this },
            });
            this.apiKeys = new ApiKeyAuth(this.fetcher);
            this.functions = FunctionsFactory.create(this.fetcher);
            this.storage = new UserStorage(app.storage, id);
            // Store tokens in storage for later hydration
            if (accessToken) {
                this.storage.accessToken = accessToken;
            }
            if (refreshToken) {
                this.storage.refreshToken = refreshToken;
            }
        }
        /**
         * Creates a user from the data stored in the storage of an `App` instance.
         *
         * @param app The app that the user was logged into.
         * @param userId The id of the user to restore.
         * @returns The user created from values retrieved from storage.
         */
        static hydrate(app, userId) {
            const user = new User({
                app,
                id: userId,
                accessToken: null,
                refreshToken: null,
            });
            user.hydrate();
            return user;
        }
        /**
         * @returns The automatically-generated internal id of the user in the MongoDB Realm database.
         */
        get id() {
            return this._id;
        }
        /**
         * @returns The access token used to authenticate the user towards MongoDB Realm.
         */
        get accessToken() {
            return this._accessToken;
        }
        /**
         * @param token The new access token.
         */
        set accessToken(token) {
            this._accessToken = token;
            this.storage.accessToken = token;
        }
        /**
         * @returns The refresh token used to issue new access tokens.
         */
        get refreshToken() {
            return this._refreshToken;
        }
        /**
         * @param token The new refresh token.
         */
        set refreshToken(token) {
            this._refreshToken = token;
            this.storage.refreshToken = token;
        }
        /**
         * @returns The current state of the user.
         */
        get state() {
            if (this.id in this.app.allUsers) {
                return this.refreshToken === null
                    ? exports.UserState.LoggedOut
                    : exports.UserState.Active;
            }
            else {
                return exports.UserState.Removed;
            }
        }
        /**
         * @returns The logged in state of the user.
         */
        get isLoggedIn() {
            return this.state === exports.UserState.Active;
        }
        get customData() {
            if (this.accessToken) {
                const decodedToken = this.decodeAccessToken();
                return decodedToken.userData;
            }
            else {
                throw new Error("Cannot read custom data without an access token");
            }
        }
        /**
         * @returns Profile containing detailed information about the user.
         */
        get profile() {
            if (this._profile) {
                return this._profile;
            }
            else {
                throw new Error("A profile was never fetched for this user");
            }
        }
        get identities() {
            if (this._profile) {
                return this._profile.identities;
            }
            else {
                throw new Error("A profile was never fetched for this user");
            }
        }
        get providerType() {
            throw new Error("Not yet implemented");
        }
        get deviceId() {
            if (this.accessToken) {
                const payload = this.accessToken.split(".")[1];
                if (payload) {
                    const parsedPayload = JSON.parse(base64.Base64.decode(payload));
                    const deviceId = parsedPayload["baas_device_id"];
                    if (typeof deviceId === "string" &&
                        deviceId !== DEFAULT_DEVICE_ID) {
                        return deviceId;
                    }
                }
            }
            return null;
        }
        /**
         * Refresh the users profile data.
         */
        async refreshProfile() {
            // Fetch the latest profile
            const response = await this.fetcher.fetchJSON({
                method: "GET",
                path: routes.api().auth().profile().path,
            });
            // Create a profile instance
            this._profile = new UserProfile(response);
            // Store this for later hydration
            this.storage.profile = this._profile;
        }
        /**
         * Log out the user, invalidating the session (and its refresh token).
         */
        async logOut() {
            // Invalidate the refresh token
            try {
                if (this._refreshToken !== null) {
                    await this.fetcher.fetchJSON({
                        method: "DELETE",
                        path: routes.api().auth().session().path,
                        tokenType: "refresh",
                    });
                }
            }
            finally {
                // Forget the access and refresh token
                this.accessToken = null;
                this.refreshToken = null;
            }
        }
        /** @inheritdoc */
        async linkCredentials(credentials) {
            const response = await this.app.authenticator.authenticate(credentials, this);
            // Sanity check the response
            if (this.id !== response.userId) {
                const details = `got user id ${response.userId} expected ${this.id}`;
                throw new Error(`Link response ment for another user (${details})`);
            }
            // Update the access token
            this.accessToken = response.accessToken;
            // Refresh the profile to include the new identity
            await this.refreshProfile();
        }
        /**
         * Request a new access token, using the refresh token.
         */
        async refreshAccessToken() {
            const response = await this.fetcher.fetchJSON({
                method: "POST",
                path: routes.api().auth().session().path,
                tokenType: "refresh",
            });
            const { access_token: accessToken } = response;
            if (typeof accessToken === "string") {
                this.accessToken = accessToken;
            }
            else {
                throw new Error("Expected an 'access_token' in the response");
            }
        }
        /** @inheritdoc */
        async refreshCustomData() {
            await this.refreshAccessToken();
            return this.customData;
        }
        /** @inheritdoc */
        callFunction(name, ...args) {
            return this.functions.callFunction(name, ...args);
        }
        /**
         * Restore a user from the data stored in the storage of an `App` instance.
         */
        hydrate() {
            // Hydrate tokens
            const accessToken = this.storage.accessToken;
            const refreshToken = this.storage.refreshToken;
            const profile = this.storage.profile;
            if (typeof accessToken === "string") {
                this.accessToken = accessToken;
            }
            if (typeof refreshToken === "string") {
                this.refreshToken = refreshToken;
            }
            if (typeof profile === "object") {
                this._profile = profile;
            }
        }
        /**
         * @returns A plain ol' JavaScript object representation of the user.
         */
        toJSON() {
            return {
                id: this.id,
                accessToken: this.accessToken,
                refreshToken: this.refreshToken,
                profile: this._profile,
                state: this.state,
                customData: this.customData,
            };
        }
        /** @inheritdoc */
        push(serviceName = "") {
            throw new Error("Not yet implemented");
        }
        /** @inheritdoc */
        mongoClient(serviceName) {
            return createService(this.fetcher, serviceName);
        }
        decodeAccessToken() {
            if (this.accessToken) {
                // Decode and spread the token
                const parts = this.accessToken.split(".");
                if (parts.length !== 3) {
                    throw new Error("Expected an access token with three parts");
                }
                // Decode the payload
                const encodedPayload = parts[1];
                const decodedPayload = base64.Base64.decode(encodedPayload);
                const parsedPayload = JSON.parse(decodedPayload);
                const { exp: expires, iat: issuedAt, sub: subject, user_data: userData = {}, } = parsedPayload;
                // Validate the types
                if (typeof expires !== "number") {
                    throw new Error("Failed to decode access token 'exp'");
                }
                else if (typeof issuedAt !== "number") {
                    throw new Error("Failed to decode access token 'iat'");
                }
                return { expires, issuedAt, subject, userData };
            }
            else {
                throw new Error("Missing an access token");
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    // TODO: Ensure the static interface of the Credentials class implements the static interface of Realm.Credentials
    // See https://stackoverflow.com/a/43484801
    /**
     * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.
     */
    class Credentials {
        /**
         * Constructs an instance of credentials.
         *
         * @param providerName The name of the authentication provider used when authenticating.
         * @param providerType The type of the authentication provider used when authenticating.
         * @param payload The data being sent to the service when authenticating.
         */
        constructor(providerName, providerType, payload) {
            this.providerName = providerName;
            this.providerType = providerType;
            this.payload = payload;
        }
        /**
         * Creates credentials that logs in using the [Anonymous Provider](https://docs.mongodb.com/realm/authentication/anonymous/).
         *
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static anonymous() {
            return new Credentials("anon-user", "anon-user", {});
        }
        /**
         * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).
         *
         * @deprecated Use `Credentials.apiKey`.
         *
         * @param key The secret content of the API key.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static userApiKey(key) {
            return new Credentials("api-key", "api-key", { key });
        }
        /**
         * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).
         *
         * @deprecated Use `Credentials.apiKey`.
         *
         * @param key The secret content of the API key.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static serverApiKey(key) {
            return new Credentials("api-key", "api-key", { key });
        }
        /**
         * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).
         *
         * @param key The secret content of the API key.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static apiKey(key) {
            return new Credentials("api-key", "api-key", { key });
        }
        /**
         * Creates credentials that logs in using the [Email/Password Provider](https://docs.mongodb.com/realm/authentication/email-password/).
         * Note: This was formerly known as the "Username/Password" provider.
         *
         * @param email The end-users email address.
         * @param password The end-users password.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static emailPassword(email, password) {
            return new Credentials("local-userpass", "local-userpass", {
                username: email,
                password,
            });
        }
        /**
         * Creates credentials that logs in using the [Custom Function Provider](https://docs.mongodb.com/realm/authentication/custom-function/).
         *
         * @param payload The custom payload as expected by the server.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static function(payload) {
            return new Credentials("custom-function", "custom-function", payload);
        }
        /**
         * Creates credentials that logs in using the [Custom JWT Provider](https://docs.mongodb.com/realm/authentication/custom-jwt/).
         *
         * @param token The JSON Web Token (JWT).
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static jwt(token) {
            return new Credentials("custom-token", "custom-token", {
                token,
            });
        }
        /**
         * Creates credentials that logs in using the [Google Provider](https://docs.mongodb.com/realm/authentication/google/).
         *
         * @param payload The URL that users should be redirected to, the auth code or id token from Google.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static google(payload) {
            return new Credentials("oauth2-google", "oauth2-google", Credentials.derivePayload(payload));
        }
        /**
         * @param payload The payload string.
         * @returns A payload object based on the string.
         */
        static derivePayload(payload) {
            if (typeof payload === "string") {
                if (payload.includes("://")) {
                    return this.derivePayload({ redirectUrl: payload });
                }
                else if (payload.startsWith("4/")) {
                    return this.derivePayload({ authCode: payload });
                }
                else if (payload.startsWith("ey")) {
                    // eslint-disable-next-line @typescript-eslint/camelcase
                    return this.derivePayload({ idToken: payload });
                }
                else {
                    throw new Error(`Unexpected payload: ${payload}`);
                }
            }
            else if (Object.keys(payload).length === 1) {
                if ("authCode" in payload || "redirectUrl" in payload) {
                    return payload;
                }
                else if ("idToken" in payload) {
                    // eslint-disable-next-line @typescript-eslint/camelcase
                    return { id_token: payload.idToken };
                }
                else {
                    throw new Error("Unexpected payload: " + JSON.stringify(payload));
                }
            }
            else {
                throw new Error("Expected only one property in payload, got " +
                    JSON.stringify(payload));
            }
        }
        /**
         * Creates credentials that logs in using the [Facebook Provider](https://docs.mongodb.com/realm/authentication/facebook/).
         *
         * @param redirectUrlOrAccessToken The URL that users should be redirected to or the auth code returned from Facebook.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static facebook(redirectUrlOrAccessToken) {
            return new Credentials("oauth2-facebook", "oauth2-facebook", redirectUrlOrAccessToken.includes("://")
                ? { redirectUrl: redirectUrlOrAccessToken }
                : { accessToken: redirectUrlOrAccessToken });
        }
        /**
         * Creates credentials that logs in using the [Apple ID Provider](https://docs.mongodb.com/realm/authentication/apple/).
         *
         * @param redirectUrlOrIdToken The URL that users should be redirected to or the id_token returned from Apple.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static apple(redirectUrlOrIdToken) {
            return new Credentials("oauth2-apple", "oauth2-apple", redirectUrlOrIdToken.includes("://")
                ? { redirectUrl: redirectUrlOrIdToken }
                : {
                    // eslint-disable-next-line @typescript-eslint/camelcase
                    id_token: redirectUrlOrIdToken,
                });
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    const USER_IDS_STORAGE_KEY = "userIds";
    const DEVICE_ID_STORAGE_KEY = "deviceId";
    /**
     * Storage specific to the app.
     */
    class AppStorage extends PrefixedStorage {
        /**
         * @param storage The underlying storage to wrap.
         * @param appId The id of the app.
         */
        constructor(storage, appId) {
            super(storage, `app(${appId})`);
        }
        /**
         * Reads out the list of user ids from storage.
         *
         * @returns A list of user ids.
         */
        getUserIds() {
            try {
                const userIdsString = this.get(USER_IDS_STORAGE_KEY);
                const userIds = userIdsString ? JSON.parse(userIdsString) : [];
                if (Array.isArray(userIds)) {
                    // Remove any duplicates that might have been added
                    // The Set preserves insertion order
                    return [...new Set(userIds)];
                }
                else {
                    throw new Error("Expected an array");
                }
            }
            catch (err) {
                // The storage was corrupted
                this.remove(USER_IDS_STORAGE_KEY);
                throw err;
            }
        }
        /**
         * Sets the list of ids in storage.
         * Optionally merging with existing ids stored in the storage, by prepending these while voiding duplicates.
         *
         * @param userIds The list of ids to store.
         * @param mergeWithExisting Prepend existing ids to avoid data-races with other apps using this storage.
         */
        setUserIds(userIds, mergeWithExisting) {
            if (mergeWithExisting) {
                // Add any existing user id to the end of this list, avoiding duplicates
                const existingIds = this.getUserIds();
                for (const id of existingIds) {
                    if (userIds.indexOf(id) === -1) {
                        userIds.push(id);
                    }
                }
            }
            // Store the list of ids
            this.set(USER_IDS_STORAGE_KEY, JSON.stringify(userIds));
        }
        /**
         * Remove an id from the list of ids.
         *
         * @param userId The id of a User to be removed.
         */
        removeUserId(userId) {
            const existingIds = this.getUserIds();
            const userIds = existingIds.filter(id => id !== userId);
            // Store the list of ids
            this.setUserIds(userIds, false);
        }
        /**
         * @returns id of this device (if any exists)
         */
        getDeviceId() {
            return this.get(DEVICE_ID_STORAGE_KEY);
        }
        /**
         * @param deviceId The id of this device, to send on subsequent authentication requests.
         */
        setDeviceId(deviceId) {
            this.set(DEVICE_ID_STORAGE_KEY, deviceId);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    const LOWERCASE_LETTERS = "abcdefghijklmnopqrstuvwxyz";
    const CLOSE_CHECK_INTERVAL = 100; // 10 times per second
    /* eslint-disable @typescript-eslint/camelcase */
    const REDIRECT_HASH_TO_RESULT = {
        _stitch_client_app_id: "appId",
        _baas_client_app_id: "appId",
        _stitch_ua: "userAuth",
        _baas_ua: "userAuth",
        _stitch_link: "link",
        _baas_link: "link",
        _stitch_error: "error",
        _baas_error: "error",
        _stitch_state: "state",
        _baas_state: "state",
    };
    /* eslint-enable @typescript-eslint/camelcase */
    /**
     * A collection of methods helping implement the OAuth2 flow.
     */
    class OAuth2Helper {
        /**
         * @param storage The underlying storage to use when storing and retriving secrets.
         * @param openWindow An optional function called when a browser window needs to open.
         */
        constructor(storage, openWindow = getEnvironment().openWindow) {
            this.storage = storage.prefix("oauth2");
            this.openWindow = openWindow;
        }
        /**
         * Parses the query string from the final step of the OAuth flow.
         *
         * @param queryString The query string passed through in location.hash.
         * @returns The result of the OAuth flow.
         */
        static parseRedirectLocation(queryString) {
            const params = decodeQueryString(queryString);
            const result = {};
            for (const [p, r] of Object.entries(REDIRECT_HASH_TO_RESULT)) {
                const value = params[p];
                if (value) {
                    result[r] = value;
                }
            }
            return result;
        }
        /**
         * Handle the redirect querystring by parsing it and storing it for others to consume.
         *
         * @param queryString The query string containing the encoded result from the OAuth provider.
         * @param storage The underlying storage used to persist the result.
         */
        static handleRedirect(queryString, storage = getEnvironment().defaultStorage) {
            const result = OAuth2Helper.parseRedirectLocation(queryString);
            const { state, error } = result;
            if (typeof state === "string") {
                const oauth2Storage = storage.prefix("oauth2");
                const stateStorage = OAuth2Helper.getStateStorage(oauth2Storage, state);
                stateStorage.set("result", JSON.stringify(result));
            }
            else if (error) {
                throw new Error(`Failed to handle OAuth 2.0 redirect: ${error}`);
            }
            else {
                throw new Error("Failed to handle OAuth 2.0 redirect.");
            }
        }
        /**
         * Decodes the authInfo string into its seperate parts.
         *
         * @param authInfo An authInfo string returned from the server.
         * @returns An object containing the separate parts of the authInfo string.
         */
        static decodeAuthInfo(authInfo) {
            const parts = (authInfo || "").split("$");
            if (parts.length === 4) {
                const [accessToken, refreshToken, userId, deviceId] = parts;
                return { accessToken, refreshToken, userId, deviceId };
            }
            else {
                throw new Error("Failed to decode 'authInfo' into ids and tokens");
            }
        }
        /**
         * Get the storage key associated of an secret associated with a state.
         *
         * @param storage The root storage used to derive a "state namespaced" storage.
         * @param state The random state.
         * @returns The storage associated with a particular state.
         */
        static getStateStorage(storage, state) {
            return storage.prefix(`state(${state})`);
        }
        /**
         * Open a window and wait for the redirect to be handled.
         *
         * @param url The URL to open.
         * @param state The state which will be used to listen for storage updates.
         * @returns The result passed through the redirect.
         */
        openWindowAndWaitForRedirect(url, state) {
            const stateStorage = OAuth2Helper.getStateStorage(this.storage, state);
            // Return a promise that resolves when the  gets known
            return new Promise((resolve, reject) => {
                let redirectWindow = null;
                // We're declaring the interval now to enable referencing before its initialized
                let windowClosedInterval; // eslint-disable-line prefer-const
                const handleStorageUpdate = () => {
                    // Trying to get the secret from storage
                    const result = stateStorage.get("result");
                    if (result) {
                        const parsedResult = JSON.parse(result);
                        // The secret got updated!
                        stateStorage.removeListener(handleStorageUpdate);
                        // Clear the storage to prevent others from reading this
                        stateStorage.clear();
                        // Try closing the newly created window
                        try {
                            if (redirectWindow) {
                                // Stop checking if the window closed
                                clearInterval(windowClosedInterval);
                                redirectWindow.close();
                            }
                        }
                        catch (err) {
                            console.warn(`Failed closing redirect window: ${err}`);
                        }
                        finally {
                            resolve(parsedResult);
                        }
                    }
                };
                // Add a listener to the state storage, awaiting an update to the secret
                stateStorage.addListener(handleStorageUpdate);
                // Open up a window
                redirectWindow = this.openWindow(url);
                // Not using a const, because we need the two listeners to reference each other when removing the other.
                windowClosedInterval = setInterval(() => {
                    // Polling "closed" because registering listeners on the window violates cross-origin policies
                    if (!redirectWindow) {
                        // No need to keep polling for a window that we can't check
                        clearInterval(windowClosedInterval);
                    }
                    else if (redirectWindow.closed) {
                        // Stop polling the window state
                        clearInterval(windowClosedInterval);
                        // Stop listening for changes to the storage
                        stateStorage.removeListener(handleStorageUpdate);
                        // Reject the promise
                        const err = new Error("Window closed");
                        reject(err);
                    }
                }, CLOSE_CHECK_INTERVAL);
            });
        }
        /**
         * Generate a random state string.
         *
         * @returns The random state string.
         */
        generateState() {
            return generateRandomString(12, LOWERCASE_LETTERS);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    const REDIRECT_LOCATION_HEADER = "x-baas-location";
    /**
     * Handles authentication and linking of users.
     */
    class Authenticator {
        /**
         * @param fetcher The fetcher used to fetch responses from the server.
         * @param storage The storage used when completing OAuth 2.0 flows (should not be scoped to a specific app).
         * @param getDeviceInformation Called to get device information to be sent to the server.
         */
        constructor(fetcher, storage, getDeviceInformation) {
            this.fetcher = fetcher;
            this.oauth2 = new OAuth2Helper(storage);
            this.getDeviceInformation = getDeviceInformation;
        }
        /**
         * @param credentials Credentials to use when logging in.
         * @param linkingUser A user requesting to link.
         */
        async authenticate(credentials, linkingUser) {
            const deviceInformation = this.getDeviceInformation();
            const isLinking = typeof linkingUser === "object";
            if (credentials.providerType.startsWith("oauth2") &&
                typeof credentials.payload.redirectUrl === "string") {
                // Initiate the OAuth2 flow by generating a state and fetch a redirect URL
                const state = this.oauth2.generateState();
                const url = await this.getLogInUrl(credentials, isLinking, {
                    state,
                    redirect: credentials.payload.redirectUrl,
                    // Ensure redirects are communicated in a header different from "Location" and status remains 200 OK
                    providerRedirectHeader: isLinking ? true : undefined,
                    // Add the device information, only if we're not linking - since that request won't have a body of its own.
                    device: !isLinking ? deviceInformation.encode() : undefined,
                });
                // If we're linking, we need to send the users access token in the request
                if (isLinking) {
                    const response = await this.fetcher.fetch({
                        method: "GET",
                        url,
                        tokenType: isLinking ? "access" : "none",
                        user: linkingUser,
                        // The response will set a cookie that we need to tell the browser to store
                        mode: "cors",
                        credentials: "include",
                    });
                    // If a response header contains a redirect URL: Open a window and wait for the redirect to be handled
                    const redirectUrl = response.headers.get(REDIRECT_LOCATION_HEADER);
                    if (redirectUrl) {
                        return this.openWindowAndWaitForAuthResponse(redirectUrl, state);
                    }
                    else {
                        throw new Error(`Missing ${REDIRECT_LOCATION_HEADER} header`);
                    }
                }
                else {
                    // Otherwise we can open a window and let the server redirect the user right away
                    // This gives lower latency (as we don't need the client to receive and execute the redirect in code)
                    // This also has less dependency on cookies and doesn't sent any tokens.
                    return this.openWindowAndWaitForAuthResponse(url, state);
                }
            }
            else {
                const logInUrl = await this.getLogInUrl(credentials, isLinking);
                const response = await this.fetcher.fetchJSON({
                    method: "POST",
                    url: logInUrl,
                    body: {
                        ...credentials.payload,
                        options: {
                            device: deviceInformation.toJSON(),
                        },
                    },
                    tokenType: isLinking ? "access" : "none",
                    user: linkingUser,
                });
                // Spread out values from the response and ensure they're valid
                const { user_id: userId, access_token: accessToken, refresh_token: refreshToken = null, device_id: deviceId, } = response;
                if (typeof userId !== "string") {
                    throw new Error("Expected a user id in the response");
                }
                if (typeof accessToken !== "string") {
                    throw new Error("Expected an access token in the response");
                }
                return { userId, accessToken, refreshToken, deviceId };
            }
        }
        /**
         * @param credentials Credentials to use when logging in.
         * @param link Should the request link with the current user?
         * @param extraQueryParams Any extra parameters to include in the query string
         */
        async getLogInUrl(credentials, link = false, extraQueryParams = {}) {
            // See https://github.com/mongodb/stitch-js-sdk/blob/310f0bd5af80f818cdfbc3caf1ae29ffa8e9c7cf/packages/core/sdk/src/auth/internal/CoreStitchAuth.ts#L746-L780
            const appRoute = this.fetcher.appRoute;
            const loginRoute = appRoute
                .authProvider(credentials.providerName)
                .login();
            const qs = encodeQueryString({
                link: link ? "true" : undefined,
                ...extraQueryParams,
            });
            const locationUrl = await this.fetcher.locationUrl;
            return locationUrl + loginRoute.path + qs;
        }
        async openWindowAndWaitForAuthResponse(redirectUrl, state) {
            const redirectResult = await this.oauth2.openWindowAndWaitForRedirect(redirectUrl, state);
            // Decode the auth info (id, tokens, etc.) from the result of the redirect
            return OAuth2Helper.decodeAuthInfo(redirectResult.userAuth);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    // TODO: Determine if the shape of an error response is specific to each service or widely used.
    /**
     * An error produced while communicating with the MongoDB Realm server.
     */
    class MongoDBRealmError extends Error {
        constructor(method, url, statusCode, statusText, error, errorCode, link) {
            const summary = statusText
                ? `status ${statusCode} ${statusText}`
                : `status ${statusCode}`;
            if (typeof error === "string") {
                super(`Request failed (${method} ${url}): ${error} (${summary})`);
            }
            else {
                super(`Request failed (${method} ${url}): (${summary})`);
            }
            this.method = method;
            this.url = url;
            this.statusText = statusText;
            this.statusCode = statusCode;
            this.error = error;
            this.errorCode = errorCode;
            this.link = link;
        }
        /**
         * Constructs and returns an error from a request and a response.
         * Note: The caller must throw this error themselves.
         *
         * @param request The request sent to the server.
         * @param response A raw response, as returned from the server.
         */
        static async fromRequestAndResponse(request, response) {
            var _a;
            const { url, method } = request;
            const { status, statusText } = response;
            if ((_a = response.headers.get("content-type")) === null || _a === void 0 ? void 0 : _a.startsWith("application/json")) {
                const body = await response.json();
                const error = body.error || "No message";
                const errorCode = body.error_code;
                const link = body.link;
                return new MongoDBRealmError(method, url, status, statusText, error, errorCode, link);
            }
            else {
                return new MongoDBRealmError(method, url, status, statusText);
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * @param body A possible resonse body.
     * @returns An async iterator.
     */
    function asyncIteratorFromResponseBody(body) {
        if (typeof body !== "object" || body === null) {
            throw new Error("Expected a non-null object");
        }
        else if (Symbol.asyncIterator in body) {
            return body;
        }
        else if ("getReader" in body) {
            const stream = body;
            return {
                [Symbol.asyncIterator]() {
                    const reader = stream.getReader();
                    return {
                        next() {
                            return reader.read();
                        },
                        async return() {
                            await reader.cancel();
                            return { done: true, value: null };
                        },
                    };
                },
            };
        }
        else {
            throw new Error("Expected an AsyncIterable or a ReadableStream");
        }
    }
    /**
     * Wraps a NetworkTransport from the "realm-network-transport" package.
     * Extracts error messages and throws `MongoDBRealmError` objects upon failures.
     * Injects access or refresh tokens for a current or specific user.
     * Refreshes access tokens if requests fails due to a 401 error.
     * Optionally parses response as JSON before returning it.
     * Fetches and exposes an app's location url.
     */
    class Fetcher {
        /**
         * @param config A configuration of the fetcher.
         */
        constructor({ appId, transport, userContext, locationUrlContext, }) {
            this.appId = appId;
            this.transport = transport;
            this.userContext = userContext;
            this.locationUrlContext = locationUrlContext;
        }
        /**
         * @param user An optional user to generate the header for.
         * @param tokenType The type of token (access or refresh).
         * @returns An object containing the user's token as "Authorization" header or undefined if no user is given.
         */
        static buildAuthorizationHeader(user, tokenType) {
            if (!user || tokenType === "none") {
                return {};
            }
            else if (tokenType === "access") {
                return { Authorization: `Bearer ${user.accessToken}` };
            }
            else if (tokenType === "refresh") {
                return { Authorization: `Bearer ${user.refreshToken}` };
            }
            else {
                throw new Error(`Unexpected token type (${tokenType})`);
            }
        }
        /**
         * @param body The body string or object passed from a request.
         * @returns An object optionally specifying the "Content-Type" header.
         */
        static buildBody(body) {
            if (!body) {
                return;
            }
            else if (typeof body === "object" && body !== null) {
                return JSON.stringify(serialize$2(body));
            }
            else if (typeof body === "string") {
                return body;
            }
            else {
                console.log("body is", body);
                throw new Error("Unexpected type of body");
            }
        }
        /**
         * @param body The body string or object passed from a request.
         * @returns An object optionally specifying the "Content-Type" header.
         */
        static buildJsonHeader(body) {
            if (body && body.length > 0) {
                return { "Content-Type": "application/json" };
            }
            else {
                return {};
            }
        }
        clone(config) {
            return new Fetcher({
                appId: this.appId,
                transport: this.transport,
                userContext: this.userContext,
                locationUrlContext: this.locationUrlContext,
                ...config,
            });
        }
        /**
         * Fetch a network resource as an authenticated user.
         *
         * @param request The request which should be sent to the server.
         * @returns The response from the server.
         */
        async fetch(request) {
            const { path, url, tokenType = "access", user = this.userContext.currentUser, ...restOfRequest } = request;
            if (typeof path === "string" && typeof url === "string") {
                throw new Error("Use of 'url' and 'path' mutually exclusive");
            }
            else if (typeof path === "string") {
                // Derive the URL
                const url = (await this.locationUrlContext.locationUrl) + path;
                return this.fetch({ ...request, path: undefined, url });
            }
            else if (typeof url === "string") {
                const response = await this.transport.fetch({
                    ...restOfRequest,
                    url,
                    headers: {
                        ...Fetcher.buildAuthorizationHeader(user, tokenType),
                        ...request.headers,
                    },
                });
                if (response.ok) {
                    return response;
                }
                else if (user &&
                    response.status === 401 &&
                    tokenType === "access") {
                    try {
                        // If the access token has expired, it would help refreshing it
                        await user.refreshAccessToken();
                        // Retry with the specific user, since the currentUser might have changed.
                        return this.fetch({ ...request, user });
                    }
                    catch (err) {
                        if (err instanceof MongoDBRealmError &&
                            err.statusCode === 401) {
                            // A 401 error while refreshing the access token indicates the refresh token has an issue too
                            // Log out the user to prevent a live lock.
                            await user.logOut();
                        }
                        // Rethrow
                        throw err;
                    }
                }
                else {
                    // Throw an error with a message extracted from the body
                    throw await MongoDBRealmError.fromRequestAndResponse(request, response);
                }
            }
            else {
                throw new Error("Expected either 'url' or 'path'");
            }
        }
        /**
         * Fetch a network resource as an authenticated user and parse the result as extended JSON.
         *
         * @param request The request which should be sent to the server.
         * @returns The response from the server, parsed as extended JSON.
         */
        async fetchJSON(request) {
            const { body } = request;
            const serializedBody = Fetcher.buildBody(body);
            const contentTypeHeaders = Fetcher.buildJsonHeader(serializedBody);
            const response = await this.fetch({
                ...request,
                body: serializedBody,
                headers: {
                    Accept: "application/json",
                    ...contentTypeHeaders,
                    ...request.headers,
                },
            });
            const contentType = response.headers.get("content-type");
            if (contentType === null || contentType === void 0 ? void 0 : contentType.startsWith("application/json")) {
                const responseBody = await response.json();
                return deserialize$3(responseBody);
            }
            else if (contentType === null) {
                return null;
            }
            else {
                throw new Error(`Expected JSON response, got "${contentType}"`);
            }
        }
        /**
         * Fetch an "event-stream" resource as an authenticated user.
         *
         * @param request The request which should be sent to the server.
         */
        async fetchStream(request) {
            const { body } = await this.fetch({
                ...request,
                headers: {
                    Accept: "text/event-stream",
                    ...request.headers,
                },
            });
            return asyncIteratorFromResponseBody(body);
        }
        /**
         * @returns The path of the app route.
         */
        get appRoute() {
            return routes.api().app(this.appId);
        }
        /**
         * @returns A promise of the location URL of the app.
         */
        get locationUrl() {
            return this.locationUrlContext.locationUrl;
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * The key in a storage on which the device id is stored.
     */
    const DEVICE_ID_STORAGE_KEY$1 = "deviceId";
    var DeviceFields;
    (function (DeviceFields) {
        DeviceFields["DEVICE_ID"] = "deviceId";
        DeviceFields["APP_ID"] = "appId";
        DeviceFields["APP_VERSION"] = "appVersion";
        DeviceFields["PLATFORM"] = "platform";
        DeviceFields["PLATFORM_VERSION"] = "platformVersion";
        DeviceFields["SDK_VERSION"] = "sdkVersion";
    })(DeviceFields || (DeviceFields = {}));
    /**
     * Information describing the device, app and SDK.
     */
    class DeviceInformation {
        /**
         * @param params Construct the device information from these parameters.
         */
        constructor({ appId, appVersion, deviceId, }) {
            /**
             * The version of the Realm Web SDK (constant provided by Rollup).
             */
            this.sdkVersion = "1.1.0";
            const environment = getEnvironment();
            this.platform = environment.platform;
            this.platformVersion = environment.platformVersion;
            this.appId = appId;
            this.appVersion = appVersion;
            this.deviceId = deviceId;
        }
        /**
         * @returns An base64 URI encoded representation of the device information.
         */
        encode() {
            const obj = removeKeysWithUndefinedValues(this);
            return base64.Base64.encode(JSON.stringify(obj));
        }
        /**
         * @returns The defaults
         */
        toJSON() {
            return removeKeysWithUndefinedValues(this);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * Default base url to prefix all requests if no baseUrl is specified in the configuration.
     */
    const DEFAULT_BASE_URL = "https://stitch.mongodb.com";
    /**
     * MongoDB Realm App
     */
    class App {
        /**
         * Construct a Realm App, either from the Realm App id visible from the MongoDB Realm UI or a configuration.
         *
         * @param idOrConfiguration The Realm App id or a configuration to use for this app.
         */
        constructor(idOrConfiguration) {
            /**
             * An array of active and logged-out users.
             * Elements in the beginning of the array is considered more recent than the later elements.
             */
            this.users = [];
            /**
             * A promise resolving to the App's location url.
             */
            this._locationUrl = null;
            // If the argument is a string, convert it to a simple configuration object.
            const configuration = typeof idOrConfiguration === "string"
                ? { id: idOrConfiguration }
                : idOrConfiguration;
            // Initialize properties from the configuration
            if (typeof configuration === "object" &&
                typeof configuration.id === "string") {
                this.id = configuration.id;
            }
            else {
                throw new Error("Missing a MongoDB Realm app-id");
            }
            this.baseUrl = configuration.baseUrl || DEFAULT_BASE_URL;
            this.localApp = configuration.app;
            const { storage, transport = new DefaultNetworkTransport(), } = configuration;
            // Construct a fetcher wrapping the network transport
            this.fetcher = new Fetcher({
                appId: this.id,
                userContext: this,
                locationUrlContext: this,
                transport,
            });
            // Construct the auth providers
            this.emailPasswordAuth = new EmailPasswordAuth(this.fetcher);
            // Construct the storage
            const baseStorage = storage || getEnvironment().defaultStorage;
            this.storage = new AppStorage(baseStorage, this.id);
            this.authenticator = new Authenticator(this.fetcher, baseStorage, () => this.deviceInformation);
            // Hydrate the app state from storage
            this.hydrate();
        }
        /**
         * Get or create a singleton Realm App from an id.
         * Calling this function multiple times with the same id will return the same instance.
         *
         * @param id The Realm App id visible from the MongoDB Realm UI or a configuration.
         * @returns The Realm App instance.
         */
        static getApp(id) {
            if (id in App.appCache) {
                return App.appCache[id];
            }
            else {
                const instance = new App(id);
                App.appCache[id] = instance;
                return instance;
            }
        }
        /**
         * Switch user.
         *
         * @param nextUser The user or id of the user to switch to.
         */
        switchUser(nextUser) {
            const index = this.users.findIndex(u => u === nextUser);
            if (index === -1) {
                throw new Error("The user was never logged into this app");
            }
            // Remove the user from the stack
            const [user] = this.users.splice(index, 1);
            // Insert the user in the beginning of the stack
            this.users.unshift(user);
        }
        /**
         * Log in a user.
         *
         * @param credentials Credentials to use when logging in.
         * @param fetchProfile Should the users profile be fetched? (default: true)
         */
        async logIn(credentials, fetchProfile = true) {
            const response = await this.authenticator.authenticate(credentials);
            const user = this.createOrUpdateUser(response);
            // Let's ensure this will be the current user, in case the user object was reused.
            this.switchUser(user);
            // If neeeded, fetch and set the profile on the user
            if (fetchProfile) {
                await user.refreshProfile();
            }
            // Persist the user id in the storage,
            // merging to avoid overriding logins from other apps using the same underlying storage
            this.storage.setUserIds(this.users.map(u => u.id), true);
            // Read out and store the device id from the server
            const deviceId = response.deviceId;
            if (deviceId && deviceId !== "000000000000000000000000") {
                this.storage.set(DEVICE_ID_STORAGE_KEY$1, deviceId);
            }
            // Return the user
            return user;
        }
        /**
         * @inheritdoc
         */
        async removeUser(user) {
            // Remove the user from the list of users
            const index = this.users.findIndex(u => u === user);
            if (index === -1) {
                throw new Error("The user was never logged into this app");
            }
            this.users.splice(index, 1);
            // Log out the user - this removes access and refresh tokens from storage
            await user.logOut();
            // Remove the users profile from storage
            this.storage.remove(`user(${user.id}):profile`);
            // Remove the user from the storage
            this.storage.removeUserId(user.id);
        }
        /**
         * The currently active user (or null if no active users exists).
         *
         * @returns the currently active user or null.
         */
        get currentUser() {
            const activeUsers = this.users.filter(user => user.state === exports.UserState.Active);
            if (activeUsers.length === 0) {
                return null;
            }
            else {
                // Current user is the top of the stack
                return activeUsers[0];
            }
        }
        /**
         * All active and logged-out users:
         *  - First in the list are active users (ordered by most recent call to switchUser or login)
         *  - Followed by logged out users (also ordered by most recent call to switchUser or login).
         *
         * @returns An array of users active or loggedout users (current user being the first).
         */
        get allUsers() {
            // Returning a freezed copy of the list of users to prevent outside changes
            return Object.fromEntries(this.users.map(user => [user.id, user]));
        }
        /**
         * @returns A promise of the app URL, with the app location resolved.
         */
        get locationUrl() {
            if (!this._locationUrl) {
                const path = routes.api().app(this.id).location().path;
                this._locationUrl = this.fetcher
                    .fetchJSON({
                    method: "GET",
                    url: this.baseUrl + path,
                    tokenType: "none",
                })
                    .then(({ hostname }) => {
                    if (typeof hostname !== "string") {
                        throw new Error("Expected response to contain a 'hostname'");
                    }
                    else {
                        return hostname;
                    }
                })
                    .catch(err => {
                    // Reset the location to allow another request to fetch again.
                    this._locationUrl = null;
                    throw err;
                });
            }
            return this._locationUrl;
        }
        /**
         * @returns Information about the current device, sent to the server when authenticating.
         */
        get deviceInformation() {
            const deviceIdStr = this.storage.getDeviceId();
            const deviceId = typeof deviceIdStr === "string" &&
                deviceIdStr !== "000000000000000000000000"
                ? new bson_38(deviceIdStr)
                : undefined;
            return new DeviceInformation({
                appId: this.localApp ? this.localApp.name : undefined,
                appVersion: this.localApp ? this.localApp.version : undefined,
                deviceId,
            });
        }
        /**
         * Create (and store) a new user or update an existing user's access and refresh tokens.
         * This helps de-duplicating users in the list of users known to the app.
         *
         * @param response A response from the Authenticator.
         * @returns A new or an existing user.
         */
        createOrUpdateUser(response) {
            const existingUser = this.users.find(u => u.id === response.userId);
            if (existingUser) {
                // Update the users access and refresh tokens
                existingUser.accessToken = response.accessToken;
                existingUser.refreshToken = response.refreshToken;
                return existingUser;
            }
            else {
                // Create and store a new user
                const user = new User({
                    app: this,
                    id: response.userId,
                    accessToken: response.accessToken,
                    refreshToken: response.refreshToken,
                });
                this.users.unshift(user);
                return user;
            }
        }
        /**
         * Restores the state of the app (active and logged-out users) from the storage
         */
        hydrate() {
            try {
                const userIds = this.storage.getUserIds();
                this.users = userIds.map(id => User.hydrate(this, id));
            }
            catch (err) {
                // The storage was corrupted
                this.storage.clear();
                throw err;
            }
        }
    }
    /**
     * A map of app instances returned from calling getApp.
     */
    App.appCache = {};
    /**
     * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.
     */
    App.Credentials = Credentials;

    ////////////////////////////////////////////////////////////////////////////
    /**
     * Get or create a singleton Realm App from an id.
     * Calling this function multiple times with the same id will return the same instance.
     *
     * @param id The Realm App id visible from the MongoDB Realm UI or a configuration.
     * @returns The Realm App instance.
     */
    function getApp(id) {
        return App.getApp(id);
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * In-memory storage that will not be persisted.
     */
    class LocalStorage {
        /**
         * Constructs a LocalStorage using the global window.
         */
        constructor() {
            if (typeof window === "object") {
                this.window = window;
            }
            else {
                throw new Error("Cannot use LocalStorage without a global window object");
            }
        }
        /** @inheritdoc */
        get(key) {
            return this.window.localStorage.getItem(key);
        }
        /** @inheritdoc */
        set(key, value) {
            return this.window.localStorage.setItem(key, value);
        }
        /** @inheritdoc */
        remove(key) {
            return this.window.localStorage.removeItem(key);
        }
        /** @inheritdoc */
        prefix(keyPart) {
            return new PrefixedStorage(this, keyPart);
        }
        /** @inheritdoc */
        clear(prefix) {
            const keys = [];
            // Iterate all keys to find the once have a matching prefix.
            for (let i = 0; i < this.window.localStorage.length; i++) {
                const key = this.window.localStorage.key(i);
                if (key && (!prefix || key.startsWith(prefix))) {
                    keys.push(key);
                }
            }
            // Remove the items in a seperate loop to avoid updating while iterating.
            for (const key of keys) {
                this.window.localStorage.removeItem(key);
            }
        }
        /** @inheritdoc */
        addListener(listener) {
            return this.window.addEventListener("storage", listener);
        }
        /** @inheritdoc */
        removeListener(listener) {
            return this.window.removeEventListener("storage", listener);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    const browser = detect();
    const environment$1 = {
        defaultStorage: new LocalStorage().prefix("realm-web"),
        openWindow: url => window.open(url),
        platform: (browser === null || browser === void 0 ? void 0 : browser.name) || "web",
        platformVersion: (browser === null || browser === void 0 ? void 0 : browser.version) || "0.0.0",
        TextDecoder,
    };
    setEnvironment(environment$1);
    /**
     * Handle an OAuth 2.0 redirect.
     *
     * @param location An optional location to use (defaults to the windows current location).
     * @param storage Optional storage used to save any results from the location.
     */
    function handleAuthRedirect(location = window.location, storage = environment$1.defaultStorage) {
        try {
            const queryString = location.hash.substr(1); // Strip the initial # from the hash
            OAuth2Helper.handleRedirect(queryString, storage);
        }
        catch (err) {
            // Ensure calling this never throws: It should not interrupt a users flow.
            console.warn(err);
        }
    }

    exports.App = App;
    exports.Credentials = Credentials;
    exports.DEFAULT_BASE_URL = DEFAULT_BASE_URL;
    exports.LocalStorage = LocalStorage;
    exports.MongoDBRealmError = MongoDBRealmError;
    exports.User = User;
    exports.getApp = getApp;
    exports.getEnvironment = getEnvironment;
    exports.handleAuthRedirect = handleAuthRedirect;
    exports.setEnvironment = setEnvironment;

    return exports;

}({}));
